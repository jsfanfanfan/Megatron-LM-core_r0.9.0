examples/multimodal/pretrain_freeze-llm.sh: line 4: activate: No such file or directory
[2024-11-26 16:07:16,310] torch.distributed.run: [WARNING] 
[2024-11-26 16:07:16,310] torch.distributed.run: [WARNING] *****************************************
[2024-11-26 16:07:16,310] torch.distributed.run: [WARNING] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
[2024-11-26 16:07:16,310] torch.distributed.run: [WARNING] *****************************************
You set `add_prefix_space`. The tokenizer needs to be converted from the slow tokenizers
You set `add_prefix_space`. The tokenizer needs to be converted from the slow tokenizers
You set `add_prefix_space`. The tokenizer needs to be converted from the slow tokenizers
You set `add_prefix_space`. The tokenizer needs to be converted from the slow tokenizers
------pipeline_parallel_model_size:5------
------world_size:20------
------total_model_size:20------
------num_pipeline_model_parallel_groups:4------
------pipeline_parallel_model_size:5------
------world_size:20------
------total_model_size:20------
------num_pipeline_model_parallel_groups:4------
------pipeline_parallel_model_size:5------
------world_size:20------
------total_model_size:20------
------num_pipeline_model_parallel_groups:4------
------pipeline_parallel_model_size:5------
------world_size:20------
------total_model_size:20------
------num_pipeline_model_parallel_groups:4------
---Rank 6---Tensor Parallel Group GPUs: [2, 2, 2, 2]
---Rank 7---Tensor Parallel Group GPUs: [3, 3, 3, 3]
---Rank 6---Pipeline Parallel Group GPUs: [1, 1, 1, 1, 1]
---Rank 4---Tensor Parallel Group GPUs: [0, 0, 0, 0]
---Rank 7---Pipeline Parallel Group GPUs: [1, 1, 1, 1, 1]
---Rank 4---Pipeline Parallel Group GPUs: [1, 1, 1, 1, 1]---Rank 5---Tensor Parallel Group GPUs: [1, 1, 1, 1]

[rank6]:[W init.cpp:767] Warning: nvfuser is no longer supported in torch script, use _jit_set_nvfuser_enabled is deprecated and a no-op (function operator())
[rank7]:[W init.cpp:767] Warning: nvfuser is no longer supported in torch script, use _jit_set_nvfuser_enabled is deprecated and a no-op (function operator())
---Rank 5---Pipeline Parallel Group GPUs: [1, 1, 1, 1, 1]
[rank4]:[W init.cpp:767] Warning: nvfuser is no longer supported in torch script, use _jit_set_nvfuser_enabled is deprecated and a no-op (function operator())
[rank5]:[W init.cpp:767] Warning: nvfuser is no longer supported in torch script, use _jit_set_nvfuser_enabled is deprecated and a no-op (function operator())
WARNING:megatron.core.models.multimodal.llava_model:LLaVA model is under active development. It may be missing features and its methods may change.
WARNING:megatron.core.models.multimodal.llava_model:LLaVA model is under active development. It may be missing features and its methods may change.
WARNING:megatron.core.models.multimodal.llava_model:LLaVA model is under active development. It may be missing features and its methods may change.
WARNING:megatron.core.models.multimodal.llava_model:LLaVA model is under active development. It may be missing features and its methods may change.
 > number of parameters on (tensor, pipeline) model parallel rank (0, 1): 330882560
 > number of parameters on (tensor, pipeline) model parallel rank (3, 1): 330882560
 > number of parameters on (tensor, pipeline) model parallel rank (2, 1): 330882560
INFO:megatron.core.distributed.param_and_grad_buffer:Number of buckets for gradient all-reduce / reduce-scatter: 1
Params for bucket 1 (24657408 elements):
	vision_projection.encoder.linear_fc2.weight
	vision_model.decoder.layers.1.mlp.linear_fc1.layer_norm_bias
	vision_model.decoder.layers.1.self_attention.linear_qkv.weight
	vision_model.decoder.layers.0.mlp.linear_fc1.layer_norm_weight
	vision_model.decoder.layers.0.self_attention.linear_proj.bias
	vision_model.decoder.layers.1.mlp.linear_fc1.bias
	vision_model.decoder.layers.1.mlp.linear_fc1.weight
	vision_model.decoder.layers.0.mlp.linear_fc1.layer_norm_bias
	vision_model.decoder.layers.0.self_attention.linear_qkv.layer_norm_bias
	vision_model.decoder.layers.0.self_attention.linear_qkv.layer_norm_weight
	vision_model.decoder.layers.1.self_attention.linear_qkv.layer_norm_weight
	vision_model.decoder.layers.1.self_attention.linear_proj.bias
	vision_model.decoder.layers.0.mlp.linear_fc2.bias
	vision_projection.encoder.linear_fc1.weight
	vision_model.decoder.layers.1.self_attention.linear_qkv.bias
	vision_model.decoder.layers.0.mlp.linear_fc1.bias
	vision_model.decoder.layers.0.self_attention.linear_qkv.bias
	vision_model.decoder.layers.0.self_attention.linear_proj.weight
	vision_model.decoder.layers.1.mlp.linear_fc1.layer_norm_weight
	vision_model.decoder.layers.1.self_attention.linear_qkv.layer_norm_bias
	vision_model.decoder.layers.1.self_attention.linear_proj.weight
	vision_model.decoder.layers.1.mlp.linear_fc2.weight
	vision_model.decoder.layers.1.mlp.linear_fc2.bias
	vision_model.decoder.layers.0.mlp.linear_fc2.weight
	vision_model.decoder.layers.0.mlp.linear_fc1.weight
	vision_model.decoder.layers.0.self_attention.linear_qkv.weight
 > number of parameters on (tensor, pipeline) model parallel rank (1, 1): 330882560
[DistributedDataParallel(
  (module): LLaVAModel(
    (language_model): GPTModel(
      (embedding): LanguageModelEmbedding(
        (word_embeddings): VocabParallelEmbedding()
        (embedding_dropout): Dropout(p=0.0, inplace=False)
      )
      (rotary_pos_emb): RotaryEmbedding()
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-4): 5 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
    (vision_model): CLIPViTModel(
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-1): 2 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
    (vision_projection): MultimodalProjector(
      (encoder): MLP(
        (linear_fc1): TEColumnParallelLinear()
        (linear_fc2): TERowParallelLinear()
      )
    )
  )
)][DistributedDataParallel(
  (module): LLaVAModel(
    (language_model): GPTModel(
      (embedding): LanguageModelEmbedding(
        (word_embeddings): VocabParallelEmbedding()
        (embedding_dropout): Dropout(p=0.0, inplace=False)
      )
      (rotary_pos_emb): RotaryEmbedding()
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-4): 5 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
    (vision_model): CLIPViTModel(
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-1): 2 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
    (vision_projection): MultimodalProjector(
      (encoder): MLP(
        (linear_fc1): TEColumnParallelLinear()
        (linear_fc2): TERowParallelLinear()
      )
    )
  )
)]

[DistributedDataParallel(
  (module): LLaVAModel(
    (language_model): GPTModel(
      (embedding): LanguageModelEmbedding(
        (word_embeddings): VocabParallelEmbedding()
        (embedding_dropout): Dropout(p=0.0, inplace=False)
      )
      (rotary_pos_emb): RotaryEmbedding()
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-4): 5 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
    (vision_model): CLIPViTModel(
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-1): 2 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
    (vision_projection): MultimodalProjector(
      (encoder): MLP(
        (linear_fc1): TEColumnParallelLinear()
        (linear_fc2): TERowParallelLinear()
      )
    )
  )
)]
[DistributedDataParallel(
  (module): LLaVAModel(
    (language_model): GPTModel(
      (embedding): LanguageModelEmbedding(
        (word_embeddings): VocabParallelEmbedding()
        (embedding_dropout): Dropout(p=0.0, inplace=False)
      )
      (rotary_pos_emb): RotaryEmbedding()
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-4): 5 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
    (vision_model): CLIPViTModel(
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-1): 2 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
    (vision_projection): MultimodalProjector(
      (encoder): MLP(
        (linear_fc1): TEColumnParallelLinear()
        (linear_fc2): TERowParallelLinear()
      )
    )
  )
)]
pretrain configTransformerConfig(tensor_model_parallel_size=4, pipeline_model_parallel_size=5, virtual_pipeline_model_parallel_size=None, sequence_parallel=False, context_parallel_size=1, expert_model_parallel_size=1, moe_extended_tp=False, perform_initialization=True, use_cpu_initialization=None, fp16=False, bf16=False, params_dtype=torch.float32, timers=None, finalize_model_grads_func=None, grad_scale_func=None, no_sync_func=None, grad_sync_func=None, param_sync_func=None, deterministic_mode=False, enable_autocast=False, autocast_dtype=torch.float32, num_microbatches_with_partial_activation_checkpoints=None, gradient_accumulation_fusion=True, async_tensor_model_parallel_allreduce=True, use_te_rng_tracker=False, tp_comm_overlap=False, tp_comm_bulk_wgrad=True, tp_comm_bulk_dgrad=True, tp_comm_overlap_ag=True, tp_comm_overlap_rs=True, tp_comm_overlap_rs_dgrad=False, tp_comm_split_ag=True, tp_comm_atomic_ag=False, tp_comm_split_rs=True, tp_comm_atomic_rs=False, cross_entropy_loss_fusion=False, tp_comm_overlap_disable_qkv=False, tp_comm_overlap_disable_fc1=False, pipeline_dtype=torch.float32, variable_seq_lengths=False, overlap_p2p_comm=False, batch_p2p_comm=True, batch_p2p_sync=True, use_ring_exchange_p2p=False, deallocate_pipeline_outputs=True, defer_embedding_wgrad_compute=False, wgrad_deferral_limit=0, pipeline_model_parallel_split_rank=None, cpu_offloading=False, cpu_offloading_num_layers=0, _cpu_offloading_context=None, cpu_offloading_activations=True, cpu_offloading_weights=True, barrier_with_L1_time=True, num_layers=32, first_pipeline_num_layers=None, last_pipeline_num_layers=None, hidden_size=4096, num_attention_heads=32, num_query_groups=8, ffn_hidden_size=14336, kv_channels=128, hidden_dropout=0.0, attention_dropout=0.0, fp32_residual_connection=False, apply_residual_connection_post_layernorm=False, layernorm_epsilon=1e-05, layernorm_zero_centered_gamma=False, add_bias_linear=False, add_qkv_bias=False, gated_linear_unit=True, activation_func=<function silu at 0x7f81ba7355a0>, activation_func_fp8_input_store=False, num_moe_experts=None, rotary_interleaved=False, window_size=None, normalization='RMSNorm', qk_layernorm=False, test_mode=False, calculate_per_token_loss=True, init_method=<function init_method_normal.<locals>.init_ at 0x7f8100165900>, output_layer_init_method=<function scaled_init_method_normal.<locals>.init_ at 0x7f81001645e0>, init_method_std=0.014, apply_query_key_layer_scaling=False, attention_softmax_in_fp32=True, bias_activation_fusion=False, masked_softmax_fusion=False, persist_layer_norm=True, memory_efficient_layer_norm=False, bias_dropout_fusion=False, apply_rope_fusion=False, recompute_granularity=None, recompute_method=None, recompute_num_layers=None, distribute_saved_activations=False, fp8=None, fp8_margin=0, fp8_interval=1, fp8_amax_history_len=1, fp8_amax_compute_algo='most_recent', fp8_wgrad=True, fp8_dot_product_attention=False, fp8_multi_head_attention=False, tp_only_amax_red=False, moe_router_load_balancing_type='aux_loss', moe_router_topk=2, moe_router_pre_softmax=False, moe_grouped_gemm=False, moe_aux_loss_coeff=0.0, moe_z_loss_coeff=None, moe_input_jitter_eps=None, moe_token_dropping=False, moe_token_dispatcher_type='allgather', moe_per_layer_logging=False, moe_expert_capacity_factor=None, moe_pad_expert_input_to_capacity=False, moe_token_drop_policy='probs', moe_layer_recompute=False, clone_scatter_output_in_embedding=True, disable_parameter_transpose_cache=False, enable_cuda_graph=False, external_cuda_graph=False, config_logger_dir='')pretrain configTransformerConfig(tensor_model_parallel_size=4, pipeline_model_parallel_size=5, virtual_pipeline_model_parallel_size=None, sequence_parallel=False, context_parallel_size=1, expert_model_parallel_size=1, moe_extended_tp=False, perform_initialization=True, use_cpu_initialization=None, fp16=False, bf16=False, params_dtype=torch.float32, timers=None, finalize_model_grads_func=None, grad_scale_func=None, no_sync_func=None, grad_sync_func=None, param_sync_func=None, deterministic_mode=False, enable_autocast=False, autocast_dtype=torch.float32, num_microbatches_with_partial_activation_checkpoints=None, gradient_accumulation_fusion=True, async_tensor_model_parallel_allreduce=True, use_te_rng_tracker=False, tp_comm_overlap=False, tp_comm_bulk_wgrad=True, tp_comm_bulk_dgrad=True, tp_comm_overlap_ag=True, tp_comm_overlap_rs=True, tp_comm_overlap_rs_dgrad=False, tp_comm_split_ag=True, tp_comm_atomic_ag=False, tp_comm_split_rs=True, tp_comm_atomic_rs=False, cross_entropy_loss_fusion=False, tp_comm_overlap_disable_qkv=False, tp_comm_overlap_disable_fc1=False, pipeline_dtype=torch.float32, variable_seq_lengths=False, overlap_p2p_comm=False, batch_p2p_comm=True, batch_p2p_sync=True, use_ring_exchange_p2p=False, deallocate_pipeline_outputs=True, defer_embedding_wgrad_compute=False, wgrad_deferral_limit=0, pipeline_model_parallel_split_rank=None, cpu_offloading=False, cpu_offloading_num_layers=0, _cpu_offloading_context=None, cpu_offloading_activations=True, cpu_offloading_weights=True, barrier_with_L1_time=True, num_layers=32, first_pipeline_num_layers=None, last_pipeline_num_layers=None, hidden_size=4096, num_attention_heads=32, num_query_groups=8, ffn_hidden_size=14336, kv_channels=128, hidden_dropout=0.0, attention_dropout=0.0, fp32_residual_connection=False, apply_residual_connection_post_layernorm=False, layernorm_epsilon=1e-05, layernorm_zero_centered_gamma=False, add_bias_linear=False, add_qkv_bias=False, gated_linear_unit=True, activation_func=<function silu at 0x7f97e34095a0>, activation_func_fp8_input_store=False, num_moe_experts=None, rotary_interleaved=False, window_size=None, normalization='RMSNorm', qk_layernorm=False, test_mode=False, calculate_per_token_loss=True, init_method=<function init_method_normal.<locals>.init_ at 0x7f97514f0820>, output_layer_init_method=<function scaled_init_method_normal.<locals>.init_ at 0x7f97514f1990>, init_method_std=0.014, apply_query_key_layer_scaling=False, attention_softmax_in_fp32=True, bias_activation_fusion=False, masked_softmax_fusion=False, persist_layer_norm=True, memory_efficient_layer_norm=False, bias_dropout_fusion=False, apply_rope_fusion=False, recompute_granularity=None, recompute_method=None, recompute_num_layers=None, distribute_saved_activations=False, fp8=None, fp8_margin=0, fp8_interval=1, fp8_amax_history_len=1, fp8_amax_compute_algo='most_recent', fp8_wgrad=True, fp8_dot_product_attention=False, fp8_multi_head_attention=False, tp_only_amax_red=False, moe_router_load_balancing_type='aux_loss', moe_router_topk=2, moe_router_pre_softmax=False, moe_grouped_gemm=False, moe_aux_loss_coeff=0.0, moe_z_loss_coeff=None, moe_input_jitter_eps=None, moe_token_dropping=False, moe_token_dispatcher_type='allgather', moe_per_layer_logging=False, moe_expert_capacity_factor=None, moe_pad_expert_input_to_capacity=False, moe_token_drop_policy='probs', moe_layer_recompute=False, clone_scatter_output_in_embedding=True, disable_parameter_transpose_cache=False, enable_cuda_graph=False, external_cuda_graph=False, config_logger_dir='')

pretrain configTransformerConfig(tensor_model_parallel_size=4, pipeline_model_parallel_size=5, virtual_pipeline_model_parallel_size=None, sequence_parallel=False, context_parallel_size=1, expert_model_parallel_size=1, moe_extended_tp=False, perform_initialization=True, use_cpu_initialization=None, fp16=False, bf16=False, params_dtype=torch.float32, timers=None, finalize_model_grads_func=None, grad_scale_func=None, no_sync_func=None, grad_sync_func=None, param_sync_func=None, deterministic_mode=False, enable_autocast=False, autocast_dtype=torch.float32, num_microbatches_with_partial_activation_checkpoints=None, gradient_accumulation_fusion=True, async_tensor_model_parallel_allreduce=True, use_te_rng_tracker=False, tp_comm_overlap=False, tp_comm_bulk_wgrad=True, tp_comm_bulk_dgrad=True, tp_comm_overlap_ag=True, tp_comm_overlap_rs=True, tp_comm_overlap_rs_dgrad=False, tp_comm_split_ag=True, tp_comm_atomic_ag=False, tp_comm_split_rs=True, tp_comm_atomic_rs=False, cross_entropy_loss_fusion=False, tp_comm_overlap_disable_qkv=False, tp_comm_overlap_disable_fc1=False, pipeline_dtype=torch.float32, variable_seq_lengths=False, overlap_p2p_comm=False, batch_p2p_comm=True, batch_p2p_sync=True, use_ring_exchange_p2p=False, deallocate_pipeline_outputs=True, defer_embedding_wgrad_compute=False, wgrad_deferral_limit=0, pipeline_model_parallel_split_rank=None, cpu_offloading=False, cpu_offloading_num_layers=0, _cpu_offloading_context=None, cpu_offloading_activations=True, cpu_offloading_weights=True, barrier_with_L1_time=True, num_layers=32, first_pipeline_num_layers=None, last_pipeline_num_layers=None, hidden_size=4096, num_attention_heads=32, num_query_groups=8, ffn_hidden_size=14336, kv_channels=128, hidden_dropout=0.0, attention_dropout=0.0, fp32_residual_connection=False, apply_residual_connection_post_layernorm=False, layernorm_epsilon=1e-05, layernorm_zero_centered_gamma=False, add_bias_linear=False, add_qkv_bias=False, gated_linear_unit=True, activation_func=<function silu at 0x7f36149195a0>, activation_func_fp8_input_store=False, num_moe_experts=None, rotary_interleaved=False, window_size=None, normalization='RMSNorm', qk_layernorm=False, test_mode=False, calculate_per_token_loss=True, init_method=<function init_method_normal.<locals>.init_ at 0x7f35593ac790>, output_layer_init_method=<function scaled_init_method_normal.<locals>.init_ at 0x7f35593ac5e0>, init_method_std=0.014, apply_query_key_layer_scaling=False, attention_softmax_in_fp32=True, bias_activation_fusion=False, masked_softmax_fusion=False, persist_layer_norm=True, memory_efficient_layer_norm=False, bias_dropout_fusion=False, apply_rope_fusion=False, recompute_granularity=None, recompute_method=None, recompute_num_layers=None, distribute_saved_activations=False, fp8=None, fp8_margin=0, fp8_interval=1, fp8_amax_history_len=1, fp8_amax_compute_algo='most_recent', fp8_wgrad=True, fp8_dot_product_attention=False, fp8_multi_head_attention=False, tp_only_amax_red=False, moe_router_load_balancing_type='aux_loss', moe_router_topk=2, moe_router_pre_softmax=False, moe_grouped_gemm=False, moe_aux_loss_coeff=0.0, moe_z_loss_coeff=None, moe_input_jitter_eps=None, moe_token_dropping=False, moe_token_dispatcher_type='allgather', moe_per_layer_logging=False, moe_expert_capacity_factor=None, moe_pad_expert_input_to_capacity=False, moe_token_drop_policy='probs', moe_layer_recompute=False, clone_scatter_output_in_embedding=True, disable_parameter_transpose_cache=False, enable_cuda_graph=False, external_cuda_graph=False, config_logger_dir='')
pretrain configTransformerConfig(tensor_model_parallel_size=4, pipeline_model_parallel_size=5, virtual_pipeline_model_parallel_size=None, sequence_parallel=False, context_parallel_size=1, expert_model_parallel_size=1, moe_extended_tp=False, perform_initialization=True, use_cpu_initialization=None, fp16=False, bf16=False, params_dtype=torch.float32, timers=None, finalize_model_grads_func=None, grad_scale_func=None, no_sync_func=None, grad_sync_func=None, param_sync_func=None, deterministic_mode=False, enable_autocast=False, autocast_dtype=torch.float32, num_microbatches_with_partial_activation_checkpoints=None, gradient_accumulation_fusion=True, async_tensor_model_parallel_allreduce=True, use_te_rng_tracker=False, tp_comm_overlap=False, tp_comm_bulk_wgrad=True, tp_comm_bulk_dgrad=True, tp_comm_overlap_ag=True, tp_comm_overlap_rs=True, tp_comm_overlap_rs_dgrad=False, tp_comm_split_ag=True, tp_comm_atomic_ag=False, tp_comm_split_rs=True, tp_comm_atomic_rs=False, cross_entropy_loss_fusion=False, tp_comm_overlap_disable_qkv=False, tp_comm_overlap_disable_fc1=False, pipeline_dtype=torch.float32, variable_seq_lengths=False, overlap_p2p_comm=False, batch_p2p_comm=True, batch_p2p_sync=True, use_ring_exchange_p2p=False, deallocate_pipeline_outputs=True, defer_embedding_wgrad_compute=False, wgrad_deferral_limit=0, pipeline_model_parallel_split_rank=None, cpu_offloading=False, cpu_offloading_num_layers=0, _cpu_offloading_context=None, cpu_offloading_activations=True, cpu_offloading_weights=True, barrier_with_L1_time=True, num_layers=32, first_pipeline_num_layers=None, last_pipeline_num_layers=None, hidden_size=4096, num_attention_heads=32, num_query_groups=8, ffn_hidden_size=14336, kv_channels=128, hidden_dropout=0.0, attention_dropout=0.0, fp32_residual_connection=False, apply_residual_connection_post_layernorm=False, layernorm_epsilon=1e-05, layernorm_zero_centered_gamma=False, add_bias_linear=False, add_qkv_bias=False, gated_linear_unit=True, activation_func=<function silu at 0x7f82e36fd5a0>, activation_func_fp8_input_store=False, num_moe_experts=None, rotary_interleaved=False, window_size=None, normalization='RMSNorm', qk_layernorm=False, test_mode=False, calculate_per_token_loss=True, init_method=<function init_method_normal.<locals>.init_ at 0x7f82280d0790>, output_layer_init_method=<function scaled_init_method_normal.<locals>.init_ at 0x7f82280d05e0>, init_method_std=0.014, apply_query_key_layer_scaling=False, attention_softmax_in_fp32=True, bias_activation_fusion=False, masked_softmax_fusion=False, persist_layer_norm=True, memory_efficient_layer_norm=False, bias_dropout_fusion=False, apply_rope_fusion=False, recompute_granularity=None, recompute_method=None, recompute_num_layers=None, distribute_saved_activations=False, fp8=None, fp8_margin=0, fp8_interval=1, fp8_amax_history_len=1, fp8_amax_compute_algo='most_recent', fp8_wgrad=True, fp8_dot_product_attention=False, fp8_multi_head_attention=False, tp_only_amax_red=False, moe_router_load_balancing_type='aux_loss', moe_router_topk=2, moe_router_pre_softmax=False, moe_grouped_gemm=False, moe_aux_loss_coeff=0.0, moe_z_loss_coeff=None, moe_input_jitter_eps=None, moe_token_dropping=False, moe_token_dispatcher_type='allgather', moe_per_layer_logging=False, moe_expert_capacity_factor=None, moe_pad_expert_input_to_capacity=False, moe_token_drop_policy='probs', moe_layer_recompute=False, clone_scatter_output_in_embedding=True, disable_parameter_transpose_cache=False, enable_cuda_graph=False, external_cuda_graph=False, config_logger_dir='')
rank=0, worker=0: shard_range=[pretrain-0.tar[0, 100), pretrain-0.tar[100, 200), pretrain-0.tar[200, 300), ...<2194>, pretrain-28.tar[9700, 9800), pretrain-28.tar[9800, 9900), pretrain-28.tar[9900, 10000)] sum(count)=220000
rank=0, worker=1: shard_range=[pretrain-29.tar[0, 100), pretrain-29.tar[100, 200), pretrain-29.tar[200, 300), ...<2194>, pretrain-48.tar[9700, 9800), pretrain-48.tar[9800, 9900), pretrain-48.tar[9900, 10000)] sum(count)=220000
rank=0, worker=0: shard_range=[pretrain-49.tar[0, 10000), pretrain-5.tar[0, 10000), pretrain-50.tar[0, 10000)] sum(count)=30000
rank=0, worker=1: shard_range=[pretrain-51.tar[0, 10000), pretrain-52.tar[0, 10000), pretrain-53.tar[0, 10000)] sum(count)=30000
schedules.py decoder_seq_length:1152schedules.py decoder_seq_length:1152

start layer:23
start layer:23
start layer:31
start layer:31
schedules.py decoder_seq_length:1152
start layer:23
schedules.py decoder_seq_length:1152start layer:31

start layer:23
start layer:31
c:[(576, 2, 4096)]c:[(576, 2, 4096)]

c:[(576, 2, 4096)]
c:[(576, 2, 4096)]
receive input_tensor shapes:[tensor([[[ 0.9024,  0.3216,  1.3491,  ..., -0.0531,  0.6373, -0.7822],
         [ 1.3146, -0.2833,  0.2837,  ..., -0.3453, -0.1533, -0.9036]],

        [[ 0.5810,  0.2866,  0.8149,  ...,  0.3963,  0.8077, -1.2699],
         [ 1.3167, -1.1348,  0.6460,  ...,  0.1196,  0.0255, -0.7041]],

        [[ 0.6186, -1.1881,  0.6934,  ...,  0.5631,  0.8217,  0.0167],
         [ 0.8854, -0.1524,  1.6506,  ..., -0.9202,  1.0903,  0.3061]],

        ...,

        [[ 1.4444, -0.1227,  0.3192,  ..., -0.8469,  0.7918,  0.8346],
         [ 0.1221, -1.2096,  0.8063,  ..., -0.1547,  0.9704, -0.6050]],

        [[ 0.4118, -0.2550,  1.3171,  ..., -0.4242,  1.8018,  0.6540],
         [ 1.3912, -0.6383, -0.4052,  ..., -0.8772, -1.2146, -1.1722]],

        [[ 0.8790, -0.1982, -0.3210,  ..., -0.5208, -0.2947, -0.0049],
         [ 1.0642,  0.5572,  0.3057,  ...,  1.9065,  1.8340,  0.2070]]],
       device='cuda:3', requires_grad=True)]
receive input_tensor shapes:[tensor([[[ 0.9024,  0.3216,  1.3491,  ..., -0.0531,  0.6373, -0.7822],
         [ 1.3146, -0.2833,  0.2837,  ..., -0.3453, -0.1533, -0.9036]],

        [[ 0.5810,  0.2866,  0.8149,  ...,  0.3963,  0.8077, -1.2699],
         [ 1.3167, -1.1348,  0.6460,  ...,  0.1196,  0.0255, -0.7041]],

        [[ 0.6186, -1.1881,  0.6934,  ...,  0.5631,  0.8217,  0.0167],
         [ 0.8854, -0.1524,  1.6506,  ..., -0.9202,  1.0903,  0.3061]],

        ...,

        [[ 1.4444, -0.1227,  0.3192,  ..., -0.8469,  0.7918,  0.8346],
         [ 0.1221, -1.2096,  0.8063,  ..., -0.1547,  0.9704, -0.6050]],

        [[ 0.4118, -0.2550,  1.3171,  ..., -0.4242,  1.8018,  0.6540],
         [ 1.3912, -0.6383, -0.4052,  ..., -0.8772, -1.2146, -1.1722]],

        [[ 0.8790, -0.1982, -0.3210,  ..., -0.5208, -0.2947, -0.0049],
         [ 1.0642,  0.5572,  0.3057,  ...,  1.9065,  1.8340,  0.2070]]],
       device='cuda:0', requires_grad=True)]
receive input_tensor shapes:[tensor([[[ 0.9024,  0.3216,  1.3491,  ..., -0.0531,  0.6373, -0.7822],
         [ 1.3146, -0.2833,  0.2837,  ..., -0.3453, -0.1533, -0.9036]],

        [[ 0.5810,  0.2866,  0.8149,  ...,  0.3963,  0.8077, -1.2699],
         [ 1.3167, -1.1348,  0.6460,  ...,  0.1196,  0.0255, -0.7041]],

        [[ 0.6186, -1.1881,  0.6934,  ...,  0.5631,  0.8217,  0.0167],
         [ 0.8854, -0.1524,  1.6506,  ..., -0.9202,  1.0903,  0.3061]],

        ...,

        [[ 1.4444, -0.1227,  0.3192,  ..., -0.8469,  0.7918,  0.8346],
         [ 0.1221, -1.2096,  0.8063,  ..., -0.1547,  0.9704, -0.6050]],

        [[ 0.4118, -0.2550,  1.3171,  ..., -0.4242,  1.8018,  0.6540],
         [ 1.3912, -0.6383, -0.4052,  ..., -0.8772, -1.2146, -1.1722]],

        [[ 0.8790, -0.1982, -0.3210,  ..., -0.5208, -0.2947, -0.0049],
         [ 1.0642,  0.5572,  0.3057,  ...,  1.9065,  1.8340,  0.2070]]],
       device='cuda:1', requires_grad=True)]
receive input_tensor shapes:[tensor([[[ 0.9024,  0.3216,  1.3491,  ..., -0.0531,  0.6373, -0.7822],
         [ 1.3146, -0.2833,  0.2837,  ..., -0.3453, -0.1533, -0.9036]],

        [[ 0.5810,  0.2866,  0.8149,  ...,  0.3963,  0.8077, -1.2699],
         [ 1.3167, -1.1348,  0.6460,  ...,  0.1196,  0.0255, -0.7041]],

        [[ 0.6186, -1.1881,  0.6934,  ...,  0.5631,  0.8217,  0.0167],
         [ 0.8854, -0.1524,  1.6506,  ..., -0.9202,  1.0903,  0.3061]],

        ...,

        [[ 1.4444, -0.1227,  0.3192,  ..., -0.8469,  0.7918,  0.8346],
         [ 0.1221, -1.2096,  0.8063,  ..., -0.1547,  0.9704, -0.6050]],

        [[ 0.4118, -0.2550,  1.3171,  ..., -0.4242,  1.8018,  0.6540],
         [ 1.3912, -0.6383, -0.4052,  ..., -0.8772, -1.2146, -1.1722]],

        [[ 0.8790, -0.1982, -0.3210,  ..., -0.5208, -0.2947, -0.0049],
         [ 1.0642,  0.5572,  0.3057,  ...,  1.9065,  1.8340,  0.2070]]],
       device='cuda:2', requires_grad=True)]
get batch end! tokens size:torch.Size([2, 576])
get batch end! tokens size:torch.Size([2, 576])get batch end! labels size:torch.Size([2, 576])

get batch end! loss_mask size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! tokens size:torch.Size([2, 576])get batch end! attention_mask:torch.Size([1, 1, 576, 576])get batch end! loss_mask size:torch.Size([2, 576])


get batch end! position_ids:torch.Size([2, 576])get batch end! attention_mask:torch.Size([1, 1, 576, 576])

get batch end! labels size:torch.Size([2, 576])get batch end! images size:torch.Size([2, 3, 336, 336])get batch end! position_ids:torch.Size([2, 576])


get batch end! num_image_tiles:torch.Size([2])get batch end! loss_mask size:torch.Size([2, 576])get batch end! images size:torch.Size([2, 3, 336, 336])


get batch end! num_image_tiles:torch.Size([2])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
Traceback (most recent call last):
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/examples/multimodal/train.py", line 463, in <module>
Traceback (most recent call last):
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/examples/multimodal/train.py", line 463, in <module>
Traceback (most recent call last):
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/examples/multimodal/train.py", line 463, in <module>
Traceback (most recent call last):
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/examples/multimodal/train.py", line 463, in <module>
    pretrain(
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/training/training.py", line 371, in pretrain
    pretrain(
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/training/training.py", line 371, in pretrain
    pretrain(
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/training/training.py", line 371, in pretrain
    iteration, num_floating_point_operations_so_far = train( # 调用 1172 行进行训练
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/training/training.py", line 1342, in train
    iteration, num_floating_point_operations_so_far = train( # 调用 1172 行进行训练
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/training/training.py", line 1342, in train
    pretrain(
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/training/training.py", line 371, in pretrain
    iteration, num_floating_point_operations_so_far = train( # 调用 1172 行进行训练
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/training/training.py", line 1342, in train
    train_step(forward_step_func, # 调用 805 行
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/training/training.py", line 818, in train_step
    iteration, num_floating_point_operations_so_far = train( # 调用 1172 行进行训练
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/training/training.py", line 1342, in train
    losses_reduced = forward_backward_func( # schedules.py 1278 行 forward_backward_pipelining_without_interleaving
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/pipeline_parallel/schedules.py", line 1481, in forward_backward_pipelining_without_interleaving
    train_step(forward_step_func, # 调用 805 行
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/training/training.py", line 818, in train_step
    train_step(forward_step_func, # 调用 805 行
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/training/training.py", line 818, in train_step
    output_tensor, num_tokens = forward_step(
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/pipeline_parallel/schedules.py", line 273, in forward_step
    losses_reduced = forward_backward_func( # schedules.py 1278 行 forward_backward_pipelining_without_interleaving
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/pipeline_parallel/schedules.py", line 1481, in forward_backward_pipelining_without_interleaving
    train_step(forward_step_func, # 调用 805 行
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/training/training.py", line 818, in train_step
    output_tensor, loss_func = forward_step_func(data_iterator, model)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/examples/multimodal/train.py", line 375, in forward_step
    losses_reduced = forward_backward_func( # schedules.py 1278 行 forward_backward_pipelining_without_interleaving
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/pipeline_parallel/schedules.py", line 1481, in forward_backward_pipelining_without_interleaving
    output_tensor, loss_mask = model(images, tokens, position_ids, attention_mask, labels, loss_mask, num_image_tiles=num_image_tiles)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    output_tensor, num_tokens = forward_step(
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/pipeline_parallel/schedules.py", line 273, in forward_step
    output_tensor, loss_func = forward_step_func(data_iterator, model)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/examples/multimodal/train.py", line 375, in forward_step
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    losses_reduced = forward_backward_func( # schedules.py 1278 行 forward_backward_pipelining_without_interleaving
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/pipeline_parallel/schedules.py", line 1481, in forward_backward_pipelining_without_interleaving
    output_tensor, num_tokens = forward_step(
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/pipeline_parallel/schedules.py", line 273, in forward_step
    output_tensor, loss_mask = model(images, tokens, position_ids, attention_mask, labels, loss_mask, num_image_tiles=num_image_tiles)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    output_tensor, loss_func = forward_step_func(data_iterator, model)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/examples/multimodal/train.py", line 375, in forward_step
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/distributed/distributed_data_parallel.py", line 308, in forward
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    output_tensor, loss_mask = model(images, tokens, position_ids, attention_mask, labels, loss_mask, num_image_tiles=num_image_tiles)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    output_tensor, num_tokens = forward_step(
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/pipeline_parallel/schedules.py", line 273, in forward_step
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/distributed/distributed_data_parallel.py", line 308, in forward
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    output_tensor, loss_func = forward_step_func(data_iterator, model)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/examples/multimodal/train.py", line 375, in forward_step
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/distributed/distributed_data_parallel.py", line 308, in forward
    output_tensor, loss_mask = model(images, tokens, position_ids, attention_mask, labels, loss_mask, num_image_tiles=num_image_tiles)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self.module(*inputs, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self.module(*inputs, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self.module(*inputs, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/models/multimodal/llava_model.py", line 504, in forward
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/models/multimodal/llava_model.py", line 504, in forward
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/models/multimodal/llava_model.py", line 504, in forward
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/distributed/distributed_data_parallel.py", line 308, in forward
    return self.module(*inputs, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
        return forward_call(*args, **kwargs)image_embeddings = self.vision_projection(

  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/models/multimodal/llava_model.py", line 504, in forward
        image_embeddings = self.vision_projection(image_embeddings = self.vision_projection(

  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/models/vision/multimodal_projector.py", line 56, in forward
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/models/vision/multimodal_projector.py", line 56, in forward
    image_embeddings = self.vision_projection(    
return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/models/vision/multimodal_projector.py", line 56, in forward
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    encoder_output, encoder_output_bias = self.encoder(hidden_states)
          File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
encoder_output, encoder_output_bias = self.encoder(hidden_states)encoder_output, encoder_output_bias = self.encoder(hidden_states)

  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/models/vision/multimodal_projector.py", line 56, in forward
    encoder_output, encoder_output_bias = self.encoder(hidden_states)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/transformer/mlp.py", line 98, in forward
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/transformer/mlp.py", line 98, in forward
    return forward_call(*args, **kwargs)
    return self._call_impl(*args, **kwargs)  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/transformer/mlp.py", line 98, in forward

  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/transformer/mlp.py", line 98, in forward
        intermediate_parallel, bias_parallel = self.linear_fc1(hidden_states)intermediate_parallel, bias_parallel = self.linear_fc1(hidden_states)

  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    intermediate_parallel, bias_parallel = self.linear_fc1(hidden_states)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    intermediate_parallel, bias_parallel = self.linear_fc1(hidden_states)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/extensions/transformer_engine.py", line 201, in forward
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/extensions/transformer_engine.py", line 201, in forward
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/extensions/transformer_engine.py", line 201, in forward
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/extensions/transformer_engine.py", line 201, in forward
    out = super().forward(x, is_first_microbatch=_is_first_microbatch)    
      File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py", line 489, in _fn
out = super().forward(x, is_first_microbatch=_is_first_microbatch)out = super().forward(x, is_first_microbatch=_is_first_microbatch)    

out = super().forward(x, is_first_microbatch=_is_first_microbatch)  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py", line 489, in _fn

  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py", line 489, in _fn
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py", line 489, in _fn
    return fn(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/transformer_engine/pytorch/module/linear.py", line 982, in forward
    return fn(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/transformer_engine/pytorch/module/linear.py", line 982, in forward
    return fn(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/transformer_engine/pytorch/module/linear.py", line 982, in forward
    return fn(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/transformer_engine/pytorch/module/linear.py", line 982, in forward
    with self.prepare_forward(inp,
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/contextlib.py", line 135, in __enter__
    with self.prepare_forward(inp,
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/contextlib.py", line 135, in __enter__
    with self.prepare_forward(inp,
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/contextlib.py", line 135, in __enter__
    with self.prepare_forward(inp,
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/contextlib.py", line 135, in __enter__
    return next(self.gen)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/transformer_engine/pytorch/module/base.py", line 586, in prepare_forward
    return next(self.gen)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/transformer_engine/pytorch/module/base.py", line 586, in prepare_forward
    return next(self.gen)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/transformer_engine/pytorch/module/base.py", line 586, in prepare_forward
    return next(self.gen)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/transformer_engine/pytorch/module/base.py", line 586, in prepare_forward
        assert inp.is_cuda, "TransformerEngine needs CUDA."assert inp.is_cuda, "TransformerEngine needs CUDA."

    assert inp.is_cuda, "TransformerEngine needs CUDA."
AttributeErrorAttributeError: : 'NoneType' object has no attribute 'is_cuda'AttributeError'NoneType' object has no attribute 'is_cuda': 'NoneType' object has no attribute 'is_cuda'    assert inp.is_cuda, "TransformerEngine needs CUDA."
AttributeError: 


'NoneType' object has no attribute 'is_cuda'
[2024-11-26 16:07:53,739] torch.distributed.elastic.multiprocessing.api: [WARNING] Sending process 4600 closing signal SIGTERM
[2024-11-26 16:07:54,054] torch.distributed.elastic.multiprocessing.api: [ERROR] failed (exitcode: 1) local_rank: 1 (pid: 4601) of binary: /gf3/home/fjs/anaconda3/envs/megatron/bin/python3.10
Traceback (most recent call last):
  File "/gf3/home/fjs/anaconda3/envs/megatron/bin/torchrun", line 8, in <module>
    sys.exit(main())
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/distributed/elastic/multiprocessing/errors/__init__.py", line 347, in wrapper
    return f(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/distributed/run.py", line 812, in main
    run(args)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/distributed/run.py", line 803, in run
    elastic_launch(
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/distributed/launcher/api.py", line 135, in __call__
    return launch_agent(self._config, self._entrypoint, list(args))
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/distributed/launcher/api.py", line 268, in launch_agent
    raise ChildFailedError(
torch.distributed.elastic.multiprocessing.errors.ChildFailedError: 
============================================================
examples/multimodal/train.py FAILED
------------------------------------------------------------
Failures:
[1]:
  time      : 2024-11-26_16:07:53
  host      : gn65
  rank      : 6 (local_rank: 2)
  exitcode  : 1 (pid: 4602)
  error_file: <N/A>
  traceback : To enable traceback see: https://pytorch.org/docs/stable/elastic/errors.html
[2]:
  time      : 2024-11-26_16:07:53
  host      : gn65
  rank      : 7 (local_rank: 3)
  exitcode  : 1 (pid: 4603)
  error_file: <N/A>
  traceback : To enable traceback see: https://pytorch.org/docs/stable/elastic/errors.html
------------------------------------------------------------
Root Cause (first observed failure):
[0]:
  time      : 2024-11-26_16:07:53
  host      : gn65
  rank      : 5 (local_rank: 1)
  exitcode  : 1 (pid: 4601)
  error_file: <N/A>
  traceback : To enable traceback see: https://pytorch.org/docs/stable/elastic/errors.html
============================================================
