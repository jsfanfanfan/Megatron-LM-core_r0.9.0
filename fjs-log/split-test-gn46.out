examples/multimodal/pretrain_freeze-llm.sh: line 4: activate: No such file or directory
[2024-11-25 23:08:07,504] torch.distributed.run: [WARNING] 
[2024-11-25 23:08:07,504] torch.distributed.run: [WARNING] *****************************************
[2024-11-25 23:08:07,504] torch.distributed.run: [WARNING] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
[2024-11-25 23:08:07,504] torch.distributed.run: [WARNING] *****************************************
You set `add_prefix_space`. The tokenizer needs to be converted from the slow tokenizers
You set `add_prefix_space`. The tokenizer needs to be converted from the slow tokenizers
You set `add_prefix_space`. The tokenizer needs to be converted from the slow tokenizers
You set `add_prefix_space`. The tokenizer needs to be converted from the slow tokenizers
------pipeline_parallel_model_size:5------
------world_size:20------
------total_model_size:20------
------num_pipeline_model_parallel_groups:4------
------pipeline_parallel_model_size:5------
------world_size:20------
------total_model_size:20------
------num_pipeline_model_parallel_groups:4------
------pipeline_parallel_model_size:5------
------world_size:20------
------total_model_size:20------
------num_pipeline_model_parallel_groups:4------
------pipeline_parallel_model_size:5------
------world_size:20------
------total_model_size:20------
------num_pipeline_model_parallel_groups:4------
---Rank 12---Tensor Parallel Group GPUs: [0, 0, 0, 0]
---Rank 13---Tensor Parallel Group GPUs: [1, 1, 1, 1]---Rank 14---Tensor Parallel Group GPUs: [2, 2, 2, 2]
---Rank 15---Tensor Parallel Group GPUs: [3, 3, 3, 3]
---Rank 12---Pipeline Parallel Group GPUs: [3, 3, 3, 3, 3]
---Rank 13---Pipeline Parallel Group GPUs: [3, 3, 3, 3, 3]

---Rank 14---Pipeline Parallel Group GPUs: [3, 3, 3, 3, 3]
---Rank 15---Pipeline Parallel Group GPUs: [3, 3, 3, 3, 3]
[rank12]:[W init.cpp:767] Warning: nvfuser is no longer supported in torch script, use _jit_set_nvfuser_enabled is deprecated and a no-op (function operator())
[rank14]:[W init.cpp:767] Warning: nvfuser is no longer supported in torch script, use _jit_set_nvfuser_enabled is deprecated and a no-op (function operator())
[rank13]:[W init.cpp:767] Warning: nvfuser is no longer supported in torch script, use _jit_set_nvfuser_enabled is deprecated and a no-op (function operator())
[rank15]:[W init.cpp:767] Warning: nvfuser is no longer supported in torch script, use _jit_set_nvfuser_enabled is deprecated and a no-op (function operator())
WARNING:megatron.core.models.multimodal.llava_model:LLaVA model is under active development. It may be missing features and its methods may change.
WARNING:megatron.core.models.multimodal.llava_model:LLaVA model is under active development. It may be missing features and its methods may change.
WARNING:megatron.core.models.multimodal.llava_model:LLaVA model is under active development. It may be missing features and its methods may change.
WARNING:megatron.core.models.multimodal.llava_model:LLaVA model is under active development. It may be missing features and its methods may change.
 > number of parameters on (tensor, pipeline) model parallel rank (2, 3): 436273152
 > number of parameters on (tensor, pipeline) model parallel rank (1, 3): 436273152
 > number of parameters on (tensor, pipeline) model parallel rank (3, 3): 436273152
 > number of parameters on (tensor, pipeline) model parallel rank (0, 3): 436273152
[DistributedDataParallel(
  (module): LLaVAModel(
    (language_model): GPTModel(
      (rotary_pos_emb): RotaryEmbedding()
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-7): 8 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
  )
)][DistributedDataParallel(
  (module): LLaVAModel(
    (language_model): GPTModel(
      (rotary_pos_emb): RotaryEmbedding()
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-7): 8 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
  )
)]

[DistributedDataParallel(
  (module): LLaVAModel(
    (language_model): GPTModel(
      (rotary_pos_emb): RotaryEmbedding()
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-7): 8 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
  )
)]
[DistributedDataParallel(
  (module): LLaVAModel(
    (language_model): GPTModel(
      (rotary_pos_emb): RotaryEmbedding()
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-7): 8 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
  )
)]
pretrain configTransformerConfig(tensor_model_parallel_size=4, pipeline_model_parallel_size=5, virtual_pipeline_model_parallel_size=None, sequence_parallel=False, context_parallel_size=1, expert_model_parallel_size=1, moe_extended_tp=False, perform_initialization=True, use_cpu_initialization=None, fp16=False, bf16=False, params_dtype=torch.float32, timers=None, finalize_model_grads_func=None, grad_scale_func=None, no_sync_func=None, grad_sync_func=None, param_sync_func=None, deterministic_mode=False, enable_autocast=False, autocast_dtype=torch.float32, num_microbatches_with_partial_activation_checkpoints=None, gradient_accumulation_fusion=True, async_tensor_model_parallel_allreduce=True, use_te_rng_tracker=False, tp_comm_overlap=False, tp_comm_bulk_wgrad=True, tp_comm_bulk_dgrad=True, tp_comm_overlap_ag=True, tp_comm_overlap_rs=True, tp_comm_overlap_rs_dgrad=False, tp_comm_split_ag=True, tp_comm_atomic_ag=False, tp_comm_split_rs=True, tp_comm_atomic_rs=False, cross_entropy_loss_fusion=False, tp_comm_overlap_disable_qkv=False, tp_comm_overlap_disable_fc1=False, pipeline_dtype=torch.float32, variable_seq_lengths=False, overlap_p2p_comm=False, batch_p2p_comm=True, batch_p2p_sync=True, use_ring_exchange_p2p=False, deallocate_pipeline_outputs=True, defer_embedding_wgrad_compute=False, wgrad_deferral_limit=0, pipeline_model_parallel_split_rank=None, cpu_offloading=False, cpu_offloading_num_layers=0, _cpu_offloading_context=None, cpu_offloading_activations=True, cpu_offloading_weights=True, barrier_with_L1_time=True, num_layers=32, first_pipeline_num_layers=None, last_pipeline_num_layers=None, hidden_size=4096, num_attention_heads=32, num_query_groups=8, ffn_hidden_size=14336, kv_channels=128, hidden_dropout=0.0, attention_dropout=0.0, fp32_residual_connection=False, apply_residual_connection_post_layernorm=False, layernorm_epsilon=1e-05, layernorm_zero_centered_gamma=False, add_bias_linear=False, add_qkv_bias=False, gated_linear_unit=True, activation_func=<function silu at 0x7f1a41a695a0>, activation_func_fp8_input_store=False, num_moe_experts=None, rotary_interleaved=False, window_size=None, normalization='RMSNorm', qk_layernorm=False, test_mode=False, calculate_per_token_loss=True, init_method=<function init_method_normal.<locals>.init_ at 0x7f196becc4c0>, output_layer_init_method=<function scaled_init_method_normal.<locals>.init_ at 0x7f196becc310>, init_method_std=0.014, apply_query_key_layer_scaling=False, attention_softmax_in_fp32=True, bias_activation_fusion=False, masked_softmax_fusion=False, persist_layer_norm=True, memory_efficient_layer_norm=False, bias_dropout_fusion=False, apply_rope_fusion=False, recompute_granularity=None, recompute_method=None, recompute_num_layers=None, distribute_saved_activations=False, fp8=None, fp8_margin=0, fp8_interval=1, fp8_amax_history_len=1, fp8_amax_compute_algo='most_recent', fp8_wgrad=True, fp8_dot_product_attention=False, fp8_multi_head_attention=False, tp_only_amax_red=False, moe_router_load_balancing_type='aux_loss', moe_router_topk=2, moe_router_pre_softmax=False, moe_grouped_gemm=False, moe_aux_loss_coeff=0.0, moe_z_loss_coeff=None, moe_input_jitter_eps=None, moe_token_dropping=False, moe_token_dispatcher_type='allgather', moe_per_layer_logging=False, moe_expert_capacity_factor=None, moe_pad_expert_input_to_capacity=False, moe_token_drop_policy='probs', moe_layer_recompute=False, clone_scatter_output_in_embedding=True, disable_parameter_transpose_cache=False, enable_cuda_graph=False, external_cuda_graph=False, config_logger_dir='')pretrain configTransformerConfig(tensor_model_parallel_size=4, pipeline_model_parallel_size=5, virtual_pipeline_model_parallel_size=None, sequence_parallel=False, context_parallel_size=1, expert_model_parallel_size=1, moe_extended_tp=False, perform_initialization=True, use_cpu_initialization=None, fp16=False, bf16=False, params_dtype=torch.float32, timers=None, finalize_model_grads_func=None, grad_scale_func=None, no_sync_func=None, grad_sync_func=None, param_sync_func=None, deterministic_mode=False, enable_autocast=False, autocast_dtype=torch.float32, num_microbatches_with_partial_activation_checkpoints=None, gradient_accumulation_fusion=True, async_tensor_model_parallel_allreduce=True, use_te_rng_tracker=False, tp_comm_overlap=False, tp_comm_bulk_wgrad=True, tp_comm_bulk_dgrad=True, tp_comm_overlap_ag=True, tp_comm_overlap_rs=True, tp_comm_overlap_rs_dgrad=False, tp_comm_split_ag=True, tp_comm_atomic_ag=False, tp_comm_split_rs=True, tp_comm_atomic_rs=False, cross_entropy_loss_fusion=False, tp_comm_overlap_disable_qkv=False, tp_comm_overlap_disable_fc1=False, pipeline_dtype=torch.float32, variable_seq_lengths=False, overlap_p2p_comm=False, batch_p2p_comm=True, batch_p2p_sync=True, use_ring_exchange_p2p=False, deallocate_pipeline_outputs=True, defer_embedding_wgrad_compute=False, wgrad_deferral_limit=0, pipeline_model_parallel_split_rank=None, cpu_offloading=False, cpu_offloading_num_layers=0, _cpu_offloading_context=None, cpu_offloading_activations=True, cpu_offloading_weights=True, barrier_with_L1_time=True, num_layers=32, first_pipeline_num_layers=None, last_pipeline_num_layers=None, hidden_size=4096, num_attention_heads=32, num_query_groups=8, ffn_hidden_size=14336, kv_channels=128, hidden_dropout=0.0, attention_dropout=0.0, fp32_residual_connection=False, apply_residual_connection_post_layernorm=False, layernorm_epsilon=1e-05, layernorm_zero_centered_gamma=False, add_bias_linear=False, add_qkv_bias=False, gated_linear_unit=True, activation_func=<function silu at 0x7f4763a355a0>, activation_func_fp8_input_store=False, num_moe_experts=None, rotary_interleaved=False, window_size=None, normalization='RMSNorm', qk_layernorm=False, test_mode=False, calculate_per_token_loss=True, init_method=<function init_method_normal.<locals>.init_ at 0x7f46b25f4550>, output_layer_init_method=<function scaled_init_method_normal.<locals>.init_ at 0x7f46b25f43a0>, init_method_std=0.014, apply_query_key_layer_scaling=False, attention_softmax_in_fp32=True, bias_activation_fusion=False, masked_softmax_fusion=False, persist_layer_norm=True, memory_efficient_layer_norm=False, bias_dropout_fusion=False, apply_rope_fusion=False, recompute_granularity=None, recompute_method=None, recompute_num_layers=None, distribute_saved_activations=False, fp8=None, fp8_margin=0, fp8_interval=1, fp8_amax_history_len=1, fp8_amax_compute_algo='most_recent', fp8_wgrad=True, fp8_dot_product_attention=False, fp8_multi_head_attention=False, tp_only_amax_red=False, moe_router_load_balancing_type='aux_loss', moe_router_topk=2, moe_router_pre_softmax=False, moe_grouped_gemm=False, moe_aux_loss_coeff=0.0, moe_z_loss_coeff=None, moe_input_jitter_eps=None, moe_token_dropping=False, moe_token_dispatcher_type='allgather', moe_per_layer_logging=False, moe_expert_capacity_factor=None, moe_pad_expert_input_to_capacity=False, moe_token_drop_policy='probs', moe_layer_recompute=False, clone_scatter_output_in_embedding=True, disable_parameter_transpose_cache=False, enable_cuda_graph=False, external_cuda_graph=False, config_logger_dir='')

pretrain configTransformerConfig(tensor_model_parallel_size=4, pipeline_model_parallel_size=5, virtual_pipeline_model_parallel_size=None, sequence_parallel=False, context_parallel_size=1, expert_model_parallel_size=1, moe_extended_tp=False, perform_initialization=True, use_cpu_initialization=None, fp16=False, bf16=False, params_dtype=torch.float32, timers=None, finalize_model_grads_func=None, grad_scale_func=None, no_sync_func=None, grad_sync_func=None, param_sync_func=None, deterministic_mode=False, enable_autocast=False, autocast_dtype=torch.float32, num_microbatches_with_partial_activation_checkpoints=None, gradient_accumulation_fusion=True, async_tensor_model_parallel_allreduce=True, use_te_rng_tracker=False, tp_comm_overlap=False, tp_comm_bulk_wgrad=True, tp_comm_bulk_dgrad=True, tp_comm_overlap_ag=True, tp_comm_overlap_rs=True, tp_comm_overlap_rs_dgrad=False, tp_comm_split_ag=True, tp_comm_atomic_ag=False, tp_comm_split_rs=True, tp_comm_atomic_rs=False, cross_entropy_loss_fusion=False, tp_comm_overlap_disable_qkv=False, tp_comm_overlap_disable_fc1=False, pipeline_dtype=torch.float32, variable_seq_lengths=False, overlap_p2p_comm=False, batch_p2p_comm=True, batch_p2p_sync=True, use_ring_exchange_p2p=False, deallocate_pipeline_outputs=True, defer_embedding_wgrad_compute=False, wgrad_deferral_limit=0, pipeline_model_parallel_split_rank=None, cpu_offloading=False, cpu_offloading_num_layers=0, _cpu_offloading_context=None, cpu_offloading_activations=True, cpu_offloading_weights=True, barrier_with_L1_time=True, num_layers=32, first_pipeline_num_layers=None, last_pipeline_num_layers=None, hidden_size=4096, num_attention_heads=32, num_query_groups=8, ffn_hidden_size=14336, kv_channels=128, hidden_dropout=0.0, attention_dropout=0.0, fp32_residual_connection=False, apply_residual_connection_post_layernorm=False, layernorm_epsilon=1e-05, layernorm_zero_centered_gamma=False, add_bias_linear=False, add_qkv_bias=False, gated_linear_unit=True, activation_func=<function silu at 0x7f30d395d5a0>, activation_func_fp8_input_store=False, num_moe_experts=None, rotary_interleaved=False, window_size=None, normalization='RMSNorm', qk_layernorm=False, test_mode=False, calculate_per_token_loss=True, init_method=<function init_method_normal.<locals>.init_ at 0x7f30540196c0>, output_layer_init_method=<function scaled_init_method_normal.<locals>.init_ at 0x7f30540183a0>, init_method_std=0.014, apply_query_key_layer_scaling=False, attention_softmax_in_fp32=True, bias_activation_fusion=False, masked_softmax_fusion=False, persist_layer_norm=True, memory_efficient_layer_norm=False, bias_dropout_fusion=False, apply_rope_fusion=False, recompute_granularity=None, recompute_method=None, recompute_num_layers=None, distribute_saved_activations=False, fp8=None, fp8_margin=0, fp8_interval=1, fp8_amax_history_len=1, fp8_amax_compute_algo='most_recent', fp8_wgrad=True, fp8_dot_product_attention=False, fp8_multi_head_attention=False, tp_only_amax_red=False, moe_router_load_balancing_type='aux_loss', moe_router_topk=2, moe_router_pre_softmax=False, moe_grouped_gemm=False, moe_aux_loss_coeff=0.0, moe_z_loss_coeff=None, moe_input_jitter_eps=None, moe_token_dropping=False, moe_token_dispatcher_type='allgather', moe_per_layer_logging=False, moe_expert_capacity_factor=None, moe_pad_expert_input_to_capacity=False, moe_token_drop_policy='probs', moe_layer_recompute=False, clone_scatter_output_in_embedding=True, disable_parameter_transpose_cache=False, enable_cuda_graph=False, external_cuda_graph=False, config_logger_dir='')
pretrain configTransformerConfig(tensor_model_parallel_size=4, pipeline_model_parallel_size=5, virtual_pipeline_model_parallel_size=None, sequence_parallel=False, context_parallel_size=1, expert_model_parallel_size=1, moe_extended_tp=False, perform_initialization=True, use_cpu_initialization=None, fp16=False, bf16=False, params_dtype=torch.float32, timers=None, finalize_model_grads_func=None, grad_scale_func=None, no_sync_func=None, grad_sync_func=None, param_sync_func=None, deterministic_mode=False, enable_autocast=False, autocast_dtype=torch.float32, num_microbatches_with_partial_activation_checkpoints=None, gradient_accumulation_fusion=True, async_tensor_model_parallel_allreduce=True, use_te_rng_tracker=False, tp_comm_overlap=False, tp_comm_bulk_wgrad=True, tp_comm_bulk_dgrad=True, tp_comm_overlap_ag=True, tp_comm_overlap_rs=True, tp_comm_overlap_rs_dgrad=False, tp_comm_split_ag=True, tp_comm_atomic_ag=False, tp_comm_split_rs=True, tp_comm_atomic_rs=False, cross_entropy_loss_fusion=False, tp_comm_overlap_disable_qkv=False, tp_comm_overlap_disable_fc1=False, pipeline_dtype=torch.float32, variable_seq_lengths=False, overlap_p2p_comm=False, batch_p2p_comm=True, batch_p2p_sync=True, use_ring_exchange_p2p=False, deallocate_pipeline_outputs=True, defer_embedding_wgrad_compute=False, wgrad_deferral_limit=0, pipeline_model_parallel_split_rank=None, cpu_offloading=False, cpu_offloading_num_layers=0, _cpu_offloading_context=None, cpu_offloading_activations=True, cpu_offloading_weights=True, barrier_with_L1_time=True, num_layers=32, first_pipeline_num_layers=None, last_pipeline_num_layers=None, hidden_size=4096, num_attention_heads=32, num_query_groups=8, ffn_hidden_size=14336, kv_channels=128, hidden_dropout=0.0, attention_dropout=0.0, fp32_residual_connection=False, apply_residual_connection_post_layernorm=False, layernorm_epsilon=1e-05, layernorm_zero_centered_gamma=False, add_bias_linear=False, add_qkv_bias=False, gated_linear_unit=True, activation_func=<function silu at 0x7f40784395a0>, activation_func_fp8_input_store=False, num_moe_experts=None, rotary_interleaved=False, window_size=None, normalization='RMSNorm', qk_layernorm=False, test_mode=False, calculate_per_token_loss=True, init_method=<function init_method_normal.<locals>.init_ at 0x7f3ff80445e0>, output_layer_init_method=<function scaled_init_method_normal.<locals>.init_ at 0x7f3ff8044430>, init_method_std=0.014, apply_query_key_layer_scaling=False, attention_softmax_in_fp32=True, bias_activation_fusion=False, masked_softmax_fusion=False, persist_layer_norm=True, memory_efficient_layer_norm=False, bias_dropout_fusion=False, apply_rope_fusion=False, recompute_granularity=None, recompute_method=None, recompute_num_layers=None, distribute_saved_activations=False, fp8=None, fp8_margin=0, fp8_interval=1, fp8_amax_history_len=1, fp8_amax_compute_algo='most_recent', fp8_wgrad=True, fp8_dot_product_attention=False, fp8_multi_head_attention=False, tp_only_amax_red=False, moe_router_load_balancing_type='aux_loss', moe_router_topk=2, moe_router_pre_softmax=False, moe_grouped_gemm=False, moe_aux_loss_coeff=0.0, moe_z_loss_coeff=None, moe_input_jitter_eps=None, moe_token_dropping=False, moe_token_dispatcher_type='allgather', moe_per_layer_logging=False, moe_expert_capacity_factor=None, moe_pad_expert_input_to_capacity=False, moe_token_drop_policy='probs', moe_layer_recompute=False, clone_scatter_output_in_embedding=True, disable_parameter_transpose_cache=False, enable_cuda_graph=False, external_cuda_graph=False, config_logger_dir='')
rank=0, worker=0: shard_range=[pretrain-0.tar[0, 100), pretrain-0.tar[100, 200), pretrain-0.tar[200, 300), ...<2194>, pretrain-28.tar[9700, 9800), pretrain-28.tar[9800, 9900), pretrain-28.tar[9900, 10000)] sum(count)=220000
rank=0, worker=1: shard_range=[pretrain-29.tar[0, 100), pretrain-29.tar[100, 200), pretrain-29.tar[200, 300), ...<2194>, pretrain-48.tar[9700, 9800), pretrain-48.tar[9800, 9900), pretrain-48.tar[9900, 10000)] sum(count)=220000
rank=0, worker=0: shard_range=[pretrain-49.tar[0, 10000), pretrain-5.tar[0, 10000), pretrain-50.tar[0, 10000)] sum(count)=30000
rank=0, worker=1: shard_range=[pretrain-51.tar[0, 10000), pretrain-52.tar[0, 10000), pretrain-53.tar[0, 10000)] sum(count)=30000
schedules.py decoder_seq_length:1152schedules.py decoder_seq_length:1152
schedules.py decoder_seq_length:1152
start layer:43

start layer:43
start layer:43
start layer:43
start layer:43
start layer:43
schedules.py decoder_seq_length:1152
start layer:43
start layer:43
c:[(1024, 2, 4096)]
c:[(1024, 2, 4096)]
c:[(1024, 2, 4096)]
c:[(1024, 2, 4096)]
receive input_tensor shapes:[tensor([[[ 0.0321, -0.9987, -1.0967,  ..., -0.2764, -0.6077,  0.0410],
         [ 0.2034, -0.2262, -0.9647,  ..., -0.2541,  0.3705, -0.0089]],

        [[ 0.0124, -0.9836, -1.0888,  ..., -0.2875, -0.5955,  0.0259],
         [ 0.2049, -0.2384, -0.9766,  ..., -0.2557,  0.3836, -0.0191]],

        [[-0.1011, -0.6915, -0.7991,  ...,  0.0332, -0.9914,  0.4595],
         [-0.0627, -0.3276, -0.8608,  ..., -0.4428,  0.0662, -0.0018]],

        ...,

        [[ 0.1137, -0.2711, -0.5314,  ..., -0.9065, -1.3548, -0.2442],
         [ 0.1772, -0.0957, -0.6412,  ..., -0.6761, -1.1624,  0.0360]],

        [[ 0.1175, -0.2655, -0.5434,  ..., -0.9047, -1.3540, -0.2400],
         [ 0.1769, -0.1041, -0.6391,  ..., -0.6735, -1.1701,  0.0562]],

        [[ 0.1222, -0.2662, -0.5497,  ..., -0.8991, -1.3545, -0.2365],
         [ 0.1732, -0.1124, -0.6468,  ..., -0.6813, -1.1727,  0.0541]]],
       device='cuda:1', requires_grad=True)]
receive input_tensor shapes:[tensor([[[ 0.0321, -0.9987, -1.0967,  ..., -0.2764, -0.6077,  0.0410],
         [ 0.2034, -0.2262, -0.9647,  ..., -0.2541,  0.3705, -0.0089]],

        [[ 0.0124, -0.9836, -1.0888,  ..., -0.2875, -0.5955,  0.0259],
         [ 0.2049, -0.2384, -0.9766,  ..., -0.2557,  0.3836, -0.0191]],

        [[-0.1011, -0.6915, -0.7991,  ...,  0.0332, -0.9914,  0.4595],
         [-0.0627, -0.3276, -0.8608,  ..., -0.4428,  0.0662, -0.0018]],

        ...,

        [[ 0.1137, -0.2711, -0.5314,  ..., -0.9065, -1.3548, -0.2442],
         [ 0.1772, -0.0957, -0.6412,  ..., -0.6761, -1.1624,  0.0360]],

        [[ 0.1175, -0.2655, -0.5434,  ..., -0.9047, -1.3540, -0.2400],
         [ 0.1769, -0.1041, -0.6391,  ..., -0.6735, -1.1701,  0.0562]],

        [[ 0.1222, -0.2662, -0.5497,  ..., -0.8991, -1.3545, -0.2365],
         [ 0.1732, -0.1124, -0.6468,  ..., -0.6813, -1.1727,  0.0541]]],
       device='cuda:2', requires_grad=True)]
receive input_tensor shapes:[tensor([[[ 0.0321, -0.9987, -1.0967,  ..., -0.2764, -0.6077,  0.0410],
         [ 0.2034, -0.2262, -0.9647,  ..., -0.2541,  0.3705, -0.0089]],

        [[ 0.0124, -0.9836, -1.0888,  ..., -0.2875, -0.5955,  0.0259],
         [ 0.2049, -0.2384, -0.9766,  ..., -0.2557,  0.3836, -0.0191]],

        [[-0.1011, -0.6915, -0.7991,  ...,  0.0332, -0.9914,  0.4595],
         [-0.0627, -0.3276, -0.8608,  ..., -0.4428,  0.0662, -0.0018]],

        ...,

        [[ 0.1137, -0.2711, -0.5314,  ..., -0.9065, -1.3548, -0.2442],
         [ 0.1772, -0.0957, -0.6412,  ..., -0.6761, -1.1624,  0.0360]],

        [[ 0.1175, -0.2655, -0.5434,  ..., -0.9047, -1.3540, -0.2400],
         [ 0.1769, -0.1041, -0.6391,  ..., -0.6735, -1.1701,  0.0562]],

        [[ 0.1222, -0.2662, -0.5497,  ..., -0.8991, -1.3545, -0.2365],
         [ 0.1732, -0.1124, -0.6468,  ..., -0.6813, -1.1727,  0.0541]]],
       device='cuda:3', requires_grad=True)]
receive input_tensor shapes:[tensor([[[ 0.0321, -0.9987, -1.0967,  ..., -0.2764, -0.6077,  0.0410],
         [ 0.2034, -0.2262, -0.9647,  ..., -0.2541,  0.3705, -0.0089]],

        [[ 0.0124, -0.9836, -1.0888,  ..., -0.2875, -0.5955,  0.0259],
         [ 0.2049, -0.2384, -0.9766,  ..., -0.2557,  0.3836, -0.0191]],

        [[-0.1011, -0.6915, -0.7991,  ...,  0.0332, -0.9914,  0.4595],
         [-0.0627, -0.3276, -0.8608,  ..., -0.4428,  0.0662, -0.0018]],

        ...,

        [[ 0.1137, -0.2711, -0.5314,  ..., -0.9065, -1.3548, -0.2442],
         [ 0.1772, -0.0957, -0.6412,  ..., -0.6761, -1.1624,  0.0360]],

        [[ 0.1175, -0.2655, -0.5434,  ..., -0.9047, -1.3540, -0.2400],
         [ 0.1769, -0.1041, -0.6391,  ..., -0.6735, -1.1701,  0.0562]],

        [[ 0.1222, -0.2662, -0.5497,  ..., -0.8991, -1.3545, -0.2365],
         [ 0.1732, -0.1124, -0.6468,  ..., -0.6813, -1.1727,  0.0541]]],
       device='cuda:0', requires_grad=True)]
get batch end! tokens size:torch.Size([2, 576])get batch end! tokens size:torch.Size([2, 576])

get batch end! labels size:torch.Size([2, 576])get batch end! labels size:torch.Size([2, 576])

get batch end! loss_mask size:torch.Size([2, 576])get batch end! loss_mask size:torch.Size([2, 576])

get batch end! attention_mask:torch.Size([1, 1, 576, 576])get batch end! attention_mask:torch.Size([1, 1, 576, 576])

get batch end! position_ids:torch.Size([2, 576])get batch end! position_ids:torch.Size([2, 576])

get batch end! images size:torch.Size([2, 3, 336, 336])get batch end! images size:torch.Size([2, 3, 336, 336])

get batch end! num_image_tiles:torch.Size([2])get batch end! num_image_tiles:torch.Size([2])

get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
self.input tensor size:torch.Size([1024, 2, 4096])self.input tensor size:torch.Size([1024, 2, 4096])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])

TransformerBlock hidden states size:torch.Size([1024, 2, 4096])
TransformerBlock hidden states size:torch.Size([1024, 2, 4096])get batch end! position_ids:torch.Size([2, 576])

get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
self.input tensor size:torch.Size([1024, 2, 4096])
TransformerBlock hidden states size:torch.Size([1024, 2, 4096])
self.input tensor size:torch.Size([1024, 2, 4096])
TransformerBlock hidden states size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! tokens size:torch.Size([2, 576])get batch end! images size:torch.Size([2, 3, 336, 336])

get batch end! num_image_tiles:torch.Size([2])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
get batch end! tokens size:torch.Size([2, 576])self.input tensor size:torch.Size([1024, 2, 4096])

self.input tensor size:torch.Size([1024, 2, 4096])TransformerBlock hidden states size:torch.Size([1024, 2, 4096])get batch end! labels size:torch.Size([2, 576])


TransformerBlock hidden states size:torch.Size([1024, 2, 4096])get batch end! loss_mask size:torch.Size([2, 576])
get batch end! tokens size:torch.Size([2, 576])

get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! position_ids:torch.Size([2, 576])get batch end! loss_mask size:torch.Size([2, 576])

get batch end! images size:torch.Size([2, 3, 336, 336])get batch end! attention_mask:torch.Size([1, 1, 576, 576])

get batch end! num_image_tiles:torch.Size([2])get batch end! position_ids:torch.Size([2, 576])

get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
self.input tensor size:torch.Size([1024, 2, 4096])
TransformerBlock hidden states size:torch.Size([1024, 2, 4096])
self.input tensor size:torch.Size([1024, 2, 4096])
TransformerBlock hidden states size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
1111 output_tensor:torch.Size([1024, 2, 4096])
2222 output_tensor:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
1111 output_tensor:torch.Size([1024, 2, 4096])
2222 output_tensor:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
1111 output_tensor:torch.Size([1024, 2, 4096])
2222 output_tensor:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
1111 output_tensor:torch.Size([1024, 2, 4096])
2222 output_tensor:torch.Size([1024, 2, 4096])
----------output_tensor_grad:torch.Size([1024, 2, 4096])
3333 output_tensor:torch.Size([1024, 2, 4096])
----------output_tensor_grad:torch.Size([1024, 2, 4096])
3333 output_tensor:torch.Size([1024, 2, 4096])
----------output_tensor_grad:torch.Size([1024, 2, 4096])----------output_tensor_grad:torch.Size([1024, 2, 4096])

3333 output_tensor:torch.Size([1024, 2, 4096])
3333 output_tensor:torch.Size([1024, 2, 4096])
output tensors:[[tensor([[[ 0.9343, -1.1135, -0.9756,  ..., -0.1992, -1.7226,  0.4007],
         [ 0.0458,  0.1157, -1.6327,  ..., -0.1474,  0.2511,  0.9416]],

        [[ 0.9173, -1.1082, -0.9696,  ..., -0.1864, -1.7032,  0.3951],
         [ 0.0491,  0.0992, -1.6563,  ..., -0.1544,  0.2567,  0.9168]],

        [[ 0.4549, -0.5786, -0.6468,  ..., -0.1680, -2.0367,  1.1569],
         [-0.1771, -0.0506, -1.0480,  ..., -0.1540, -0.4782,  0.5920]],

        ...,

        [[ 0.1338,  0.0997, -0.7326,  ..., -0.4479, -1.6756, -0.2236],
         [-0.1073,  0.3795, -0.8724,  ..., -0.3440, -1.4345, -0.2956]],

        [[ 0.1481,  0.1049, -0.7506,  ..., -0.4485, -1.6776, -0.2119],
         [-0.0941,  0.3680, -0.8697,  ..., -0.3376, -1.4364, -0.2680]],

        [[ 0.1625,  0.1065, -0.7561,  ..., -0.4441, -1.6783, -0.1983],
         [-0.0857,  0.3546, -0.8843,  ..., -0.3412, -1.4305, -0.2737]]],
       device='cuda:0', grad_fn=<AddBackward0>)], [tensor([[[-0.6230,  0.2442,  0.1821,  ..., -0.8512, -0.3546,  0.7945],
         [ 0.3179,  0.9672, -0.7959,  ...,  0.6637, -0.2926,  0.9277]],

        [[ 0.1833,  0.1523,  0.5201,  ..., -0.3322, -0.1380,  0.3683],
         [ 0.7616,  1.6648, -1.4077,  ...,  0.4418, -0.5148,  1.1589]],

        [[-0.6418,  0.5094,  0.3230,  ..., -0.0197, -0.1450,  0.1307],
         [-0.3006,  1.4355, -0.6133,  ...,  0.4113, -1.0805,  0.6452]],

        ...,

        [[-0.5000,  1.2130, -0.5320,  ...,  0.2073,  0.8115,  0.8103],
         [ 0.3662,  0.2119, -0.2346,  ...,  0.9129,  0.4155,  0.3576]],

        [[-0.4916,  1.2207, -0.5290,  ...,  0.2255,  0.8218,  0.7929],
         [ 0.3938,  0.1991, -0.2612,  ...,  0.8961,  0.4120,  0.3569]],

        [[-0.4760,  1.2259, -0.5245,  ...,  0.2381,  0.8174,  0.7906],
         [ 0.3990,  0.1738, -0.2663,  ...,  0.8857,  0.3895,  0.3845]]],
       device='cuda:0', grad_fn=<AddBackward0>)]]
4444 output_tensor:torch.Size([1024, 2, 4096])
torch.autograd.backward
custom_backward output_tensor[0]:torch.Size([1024, 2, 4096])
output_tensor_grad[0]:torch.Size([1024, 2, 4096])
output tensors:[[tensor([[[ 0.9343, -1.1135, -0.9756,  ..., -0.1992, -1.7226,  0.4007],
         [ 0.0458,  0.1157, -1.6327,  ..., -0.1474,  0.2511,  0.9416]],

        [[ 0.9173, -1.1082, -0.9696,  ..., -0.1864, -1.7032,  0.3951],
         [ 0.0491,  0.0992, -1.6563,  ..., -0.1544,  0.2567,  0.9168]],

        [[ 0.4549, -0.5786, -0.6468,  ..., -0.1680, -2.0367,  1.1569],
         [-0.1771, -0.0506, -1.0480,  ..., -0.1540, -0.4782,  0.5920]],

        ...,

        [[ 0.1338,  0.0997, -0.7326,  ..., -0.4479, -1.6756, -0.2236],
         [-0.1073,  0.3795, -0.8724,  ..., -0.3440, -1.4345, -0.2956]],

        [[ 0.1481,  0.1049, -0.7506,  ..., -0.4485, -1.6776, -0.2119],
         [-0.0941,  0.3680, -0.8697,  ..., -0.3376, -1.4364, -0.2680]],

        [[ 0.1625,  0.1065, -0.7561,  ..., -0.4441, -1.6783, -0.1983],
         [-0.0857,  0.3546, -0.8843,  ..., -0.3412, -1.4305, -0.2737]]],
       device='cuda:1', grad_fn=<AddBackward0>)], [tensor([[[-0.6230,  0.2442,  0.1821,  ..., -0.8512, -0.3546,  0.7945],
         [ 0.3179,  0.9672, -0.7959,  ...,  0.6637, -0.2926,  0.9277]],

        [[ 0.1833,  0.1523,  0.5201,  ..., -0.3322, -0.1380,  0.3683],
         [ 0.7616,  1.6648, -1.4077,  ...,  0.4418, -0.5148,  1.1589]],

        [[-0.6418,  0.5094,  0.3230,  ..., -0.0197, -0.1450,  0.1307],
         [-0.3006,  1.4355, -0.6133,  ...,  0.4113, -1.0805,  0.6452]],

        ...,

        [[-0.5000,  1.2130, -0.5320,  ...,  0.2073,  0.8115,  0.8103],
         [ 0.3662,  0.2119, -0.2346,  ...,  0.9129,  0.4155,  0.3576]],

        [[-0.4916,  1.2207, -0.5290,  ...,  0.2255,  0.8218,  0.7929],
         [ 0.3938,  0.1991, -0.2612,  ...,  0.8961,  0.4120,  0.3569]],

        [[-0.4760,  1.2259, -0.5245,  ...,  0.2381,  0.8174,  0.7906],
         [ 0.3990,  0.1738, -0.2663,  ...,  0.8857,  0.3895,  0.3845]]],
       device='cuda:1', grad_fn=<AddBackward0>)]]
4444 output_tensor:torch.Size([1024, 2, 4096])
torch.autograd.backward
custom_backward output_tensor[0]:torch.Size([1024, 2, 4096])
output_tensor_grad[0]:torch.Size([1024, 2, 4096])
output tensors:[[tensor([[[ 0.9343, -1.1135, -0.9756,  ..., -0.1992, -1.7226,  0.4007],
         [ 0.0458,  0.1157, -1.6327,  ..., -0.1474,  0.2511,  0.9416]],

        [[ 0.9173, -1.1082, -0.9696,  ..., -0.1864, -1.7032,  0.3951],
         [ 0.0491,  0.0992, -1.6563,  ..., -0.1544,  0.2567,  0.9168]],

        [[ 0.4549, -0.5786, -0.6468,  ..., -0.1680, -2.0367,  1.1569],
         [-0.1771, -0.0506, -1.0480,  ..., -0.1540, -0.4782,  0.5920]],

        ...,

        [[ 0.1338,  0.0997, -0.7326,  ..., -0.4479, -1.6756, -0.2236],
         [-0.1073,  0.3795, -0.8724,  ..., -0.3440, -1.4345, -0.2956]],

        [[ 0.1481,  0.1049, -0.7506,  ..., -0.4485, -1.6776, -0.2119],
         [-0.0941,  0.3680, -0.8697,  ..., -0.3376, -1.4364, -0.2680]],

        [[ 0.1625,  0.1065, -0.7561,  ..., -0.4441, -1.6783, -0.1983],
         [-0.0857,  0.3546, -0.8843,  ..., -0.3412, -1.4305, -0.2737]]],
       device='cuda:3', grad_fn=<AddBackward0>)], [tensor([[[-0.6230,  0.2442,  0.1821,  ..., -0.8512, -0.3546,  0.7945],
         [ 0.3179,  0.9672, -0.7959,  ...,  0.6637, -0.2926,  0.9277]],

        [[ 0.1833,  0.1523,  0.5201,  ..., -0.3322, -0.1380,  0.3683],
         [ 0.7616,  1.6648, -1.4077,  ...,  0.4418, -0.5148,  1.1589]],

        [[-0.6418,  0.5094,  0.3230,  ..., -0.0197, -0.1450,  0.1307],
         [-0.3006,  1.4355, -0.6133,  ...,  0.4113, -1.0805,  0.6452]],

        ...,

        [[-0.5000,  1.2130, -0.5320,  ...,  0.2073,  0.8115,  0.8103],
         [ 0.3662,  0.2119, -0.2346,  ...,  0.9129,  0.4155,  0.3576]],

        [[-0.4916,  1.2207, -0.5290,  ...,  0.2255,  0.8218,  0.7929],
         [ 0.3938,  0.1991, -0.2612,  ...,  0.8961,  0.4120,  0.3569]],

        [[-0.4760,  1.2259, -0.5245,  ...,  0.2381,  0.8174,  0.7906],
         [ 0.3990,  0.1738, -0.2663,  ...,  0.8857,  0.3895,  0.3845]]],
       device='cuda:3', grad_fn=<AddBackward0>)]]
4444 output_tensor:torch.Size([1024, 2, 4096])
torch.autograd.backward
custom_backward output_tensor[0]:torch.Size([1024, 2, 4096])
output_tensor_grad[0]:torch.Size([1024, 2, 4096])
output tensors:[[tensor([[[ 0.9343, -1.1135, -0.9756,  ..., -0.1992, -1.7226,  0.4007],
         [ 0.0458,  0.1157, -1.6327,  ..., -0.1474,  0.2511,  0.9416]],

        [[ 0.9173, -1.1082, -0.9696,  ..., -0.1864, -1.7032,  0.3951],
         [ 0.0491,  0.0992, -1.6563,  ..., -0.1544,  0.2567,  0.9168]],

        [[ 0.4549, -0.5786, -0.6468,  ..., -0.1680, -2.0367,  1.1569],
         [-0.1771, -0.0506, -1.0480,  ..., -0.1540, -0.4782,  0.5920]],

        ...,

        [[ 0.1338,  0.0997, -0.7326,  ..., -0.4479, -1.6756, -0.2236],
         [-0.1073,  0.3795, -0.8724,  ..., -0.3440, -1.4345, -0.2956]],

        [[ 0.1481,  0.1049, -0.7506,  ..., -0.4485, -1.6776, -0.2119],
         [-0.0941,  0.3680, -0.8697,  ..., -0.3376, -1.4364, -0.2680]],

        [[ 0.1625,  0.1065, -0.7561,  ..., -0.4441, -1.6783, -0.1983],
         [-0.0857,  0.3546, -0.8843,  ..., -0.3412, -1.4305, -0.2737]]],
       device='cuda:2', grad_fn=<AddBackward0>)], [tensor([[[-0.6230,  0.2442,  0.1821,  ..., -0.8512, -0.3546,  0.7945],
         [ 0.3179,  0.9672, -0.7959,  ...,  0.6637, -0.2926,  0.9277]],

        [[ 0.1833,  0.1523,  0.5201,  ..., -0.3322, -0.1380,  0.3683],
         [ 0.7616,  1.6648, -1.4077,  ...,  0.4418, -0.5148,  1.1589]],

        [[-0.6418,  0.5094,  0.3230,  ..., -0.0197, -0.1450,  0.1307],
         [-0.3006,  1.4355, -0.6133,  ...,  0.4113, -1.0805,  0.6452]],

        ...,

        [[-0.5000,  1.2130, -0.5320,  ...,  0.2073,  0.8115,  0.8103],
         [ 0.3662,  0.2119, -0.2346,  ...,  0.9129,  0.4155,  0.3576]],

        [[-0.4916,  1.2207, -0.5290,  ...,  0.2255,  0.8218,  0.7929],
         [ 0.3938,  0.1991, -0.2612,  ...,  0.8961,  0.4120,  0.3569]],

        [[-0.4760,  1.2259, -0.5245,  ...,  0.2381,  0.8174,  0.7906],
         [ 0.3990,  0.1738, -0.2663,  ...,  0.8857,  0.3895,  0.3845]]],
       device='cuda:2', grad_fn=<AddBackward0>)]]
4444 output_tensor:torch.Size([1024, 2, 4096])
torch.autograd.backward
custom_backward output_tensor[0]:torch.Size([1024, 2, 4096])
output_tensor_grad[0]:torch.Size([1024, 2, 4096])
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
self.input tensor size:torch.Size([1024, 2, 4096])
TransformerBlock hidden states size:torch.Size([1024, 2, 4096])
self.input tensor size:torch.Size([1024, 2, 4096])
TransformerBlock hidden states size:torch.Size([1024, 2, 4096])
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
self.input tensor size:torch.Size([1024, 2, 4096])get batch end! position_ids:torch.Size([2, 576])

TransformerBlock hidden states size:torch.Size([1024, 2, 4096])get batch end! images size:torch.Size([2, 3, 336, 336])

get batch end! num_image_tiles:torch.Size([2])
self.input tensor size:torch.Size([1024, 2, 4096])
TransformerBlock hidden states size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
1111 output_tensor:torch.Size([1024, 2, 4096])
2222 output_tensor:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
1111 output_tensor:torch.Size([1024, 2, 4096])
2222 output_tensor:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
1111 output_tensor:torch.Size([1024, 2, 4096])
2222 output_tensor:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
1111 output_tensor:torch.Size([1024, 2, 4096])
2222 output_tensor:torch.Size([1024, 2, 4096])
----------output_tensor_grad:torch.Size([1024, 2, 4096])
3333 output_tensor:torch.Size([1024, 2, 4096])
----------output_tensor_grad:torch.Size([1024, 2, 4096])----------output_tensor_grad:torch.Size([1024, 2, 4096])

3333 output_tensor:torch.Size([1024, 2, 4096])
3333 output_tensor:torch.Size([1024, 2, 4096])
----------output_tensor_grad:torch.Size([1024, 2, 4096])
3333 output_tensor:torch.Size([1024, 2, 4096])
output tensors:[[tensor([[[-0.6230,  0.2442,  0.1821,  ..., -0.8512, -0.3546,  0.7945],
         [ 0.3179,  0.9672, -0.7959,  ...,  0.6637, -0.2926,  0.9277]],

        [[ 0.1833,  0.1523,  0.5201,  ..., -0.3322, -0.1380,  0.3683],
         [ 0.7616,  1.6648, -1.4077,  ...,  0.4418, -0.5148,  1.1589]],

        [[-0.6418,  0.5094,  0.3230,  ..., -0.0197, -0.1450,  0.1307],
         [-0.3006,  1.4355, -0.6133,  ...,  0.4113, -1.0805,  0.6452]],

        ...,

        [[-0.5000,  1.2130, -0.5320,  ...,  0.2073,  0.8115,  0.8103],
         [ 0.3662,  0.2119, -0.2346,  ...,  0.9129,  0.4155,  0.3576]],

        [[-0.4916,  1.2207, -0.5290,  ...,  0.2255,  0.8218,  0.7929],
         [ 0.3938,  0.1991, -0.2612,  ...,  0.8961,  0.4120,  0.3569]],

        [[-0.4760,  1.2259, -0.5245,  ...,  0.2381,  0.8174,  0.7906],
         [ 0.3990,  0.1738, -0.2663,  ...,  0.8857,  0.3895,  0.3845]]],
       device='cuda:1', grad_fn=<AddBackward0>)], [tensor([[[ 1.1765, -0.9632, -1.1682,  ..., -0.1683, -1.7159,  0.4378],
         [ 0.0631,  0.3713, -0.9059,  ...,  0.2538, -0.1626,  1.3739]],

        [[ 1.2254, -0.9232, -1.1972,  ..., -0.1906, -1.6050,  0.3736],
         [-0.0742,  0.3564, -1.0350,  ...,  0.4231,  0.0083,  0.9106]],

        [[ 0.6329, -0.2348, -0.5869,  ...,  0.2061, -1.9874,  1.5326],
         [-0.3879, -0.3461, -0.3502,  ..., -0.0693,  0.0585,  0.7447]],

        ...,

        [[ 0.0398,  0.2360, -0.6228,  ..., -0.4610, -1.7720, -0.3366],
         [ 0.2368,  0.4593, -1.1270,  ...,  0.3237, -0.7979,  0.9227]],

        [[ 0.0686,  0.2362, -0.6399,  ..., -0.4685, -1.7879, -0.3214],
         [ 0.2194,  0.4481, -1.1033,  ...,  0.3057, -0.8287,  0.9010]],

        [[ 0.1096,  0.2385, -0.6509,  ..., -0.4698, -1.8011, -0.3149],
         [ 0.1993,  0.4693, -1.0875,  ...,  0.2820, -0.8605,  0.9146]]],
       device='cuda:1', grad_fn=<AddBackward0>)]]
4444 output_tensor:torch.Size([1024, 2, 4096])
torch.autograd.backward
custom_backward output_tensor[0]:torch.Size([1024, 2, 4096])
output_tensor_grad[0]:torch.Size([1024, 2, 4096])
output tensors:[[tensor([[[-0.6230,  0.2442,  0.1821,  ..., -0.8512, -0.3546,  0.7945],
         [ 0.3179,  0.9672, -0.7959,  ...,  0.6637, -0.2926,  0.9277]],

        [[ 0.1833,  0.1523,  0.5201,  ..., -0.3322, -0.1380,  0.3683],
         [ 0.7616,  1.6648, -1.4077,  ...,  0.4418, -0.5148,  1.1589]],

        [[-0.6418,  0.5094,  0.3230,  ..., -0.0197, -0.1450,  0.1307],
         [-0.3006,  1.4355, -0.6133,  ...,  0.4113, -1.0805,  0.6452]],

        ...,

        [[-0.5000,  1.2130, -0.5320,  ...,  0.2073,  0.8115,  0.8103],
         [ 0.3662,  0.2119, -0.2346,  ...,  0.9129,  0.4155,  0.3576]],

        [[-0.4916,  1.2207, -0.5290,  ...,  0.2255,  0.8218,  0.7929],
         [ 0.3938,  0.1991, -0.2612,  ...,  0.8961,  0.4120,  0.3569]],

        [[-0.4760,  1.2259, -0.5245,  ...,  0.2381,  0.8174,  0.7906],
         [ 0.3990,  0.1738, -0.2663,  ...,  0.8857,  0.3895,  0.3845]]],
       device='cuda:0', grad_fn=<AddBackward0>)], [tensor([[[ 1.1765, -0.9632, -1.1682,  ..., -0.1683, -1.7159,  0.4378],
         [ 0.0631,  0.3713, -0.9059,  ...,  0.2538, -0.1626,  1.3739]],

        [[ 1.2254, -0.9232, -1.1972,  ..., -0.1906, -1.6050,  0.3736],
         [-0.0742,  0.3564, -1.0350,  ...,  0.4231,  0.0083,  0.9106]],

        [[ 0.6329, -0.2348, -0.5869,  ...,  0.2061, -1.9874,  1.5326],
         [-0.3879, -0.3461, -0.3502,  ..., -0.0693,  0.0585,  0.7447]],

        ...,

        [[ 0.0398,  0.2360, -0.6228,  ..., -0.4610, -1.7720, -0.3366],
         [ 0.2368,  0.4593, -1.1270,  ...,  0.3237, -0.7979,  0.9227]],

        [[ 0.0686,  0.2362, -0.6399,  ..., -0.4685, -1.7879, -0.3214],
         [ 0.2194,  0.4481, -1.1033,  ...,  0.3057, -0.8287,  0.9010]],

        [[ 0.1096,  0.2385, -0.6509,  ..., -0.4698, -1.8011, -0.3149],
         [ 0.1993,  0.4693, -1.0875,  ...,  0.2820, -0.8605,  0.9146]]],
       device='cuda:0', grad_fn=<AddBackward0>)]]
4444 output_tensor:torch.Size([1024, 2, 4096])
torch.autograd.backward
custom_backward output_tensor[0]:torch.Size([1024, 2, 4096])
output_tensor_grad[0]:torch.Size([1024, 2, 4096])
output tensors:[[tensor([[[-0.6230,  0.2442,  0.1821,  ..., -0.8512, -0.3546,  0.7945],
         [ 0.3179,  0.9672, -0.7959,  ...,  0.6637, -0.2926,  0.9277]],

        [[ 0.1833,  0.1523,  0.5201,  ..., -0.3322, -0.1380,  0.3683],
         [ 0.7616,  1.6648, -1.4077,  ...,  0.4418, -0.5148,  1.1589]],

        [[-0.6418,  0.5094,  0.3230,  ..., -0.0197, -0.1450,  0.1307],
         [-0.3006,  1.4355, -0.6133,  ...,  0.4113, -1.0805,  0.6452]],

        ...,

        [[-0.5000,  1.2130, -0.5320,  ...,  0.2073,  0.8115,  0.8103],
         [ 0.3662,  0.2119, -0.2346,  ...,  0.9129,  0.4155,  0.3576]],

        [[-0.4916,  1.2207, -0.5290,  ...,  0.2255,  0.8218,  0.7929],
         [ 0.3938,  0.1991, -0.2612,  ...,  0.8961,  0.4120,  0.3569]],

        [[-0.4760,  1.2259, -0.5245,  ...,  0.2381,  0.8174,  0.7906],
         [ 0.3990,  0.1738, -0.2663,  ...,  0.8857,  0.3895,  0.3845]]],
       device='cuda:2', grad_fn=<AddBackward0>)], [tensor([[[ 1.1765, -0.9632, -1.1682,  ..., -0.1683, -1.7159,  0.4378],
         [ 0.0631,  0.3713, -0.9059,  ...,  0.2538, -0.1626,  1.3739]],

        [[ 1.2254, -0.9232, -1.1972,  ..., -0.1906, -1.6050,  0.3736],
         [-0.0742,  0.3564, -1.0350,  ...,  0.4231,  0.0083,  0.9106]],

        [[ 0.6329, -0.2348, -0.5869,  ...,  0.2061, -1.9874,  1.5326],
         [-0.3879, -0.3461, -0.3502,  ..., -0.0693,  0.0585,  0.7447]],

        ...,

        [[ 0.0398,  0.2360, -0.6228,  ..., -0.4610, -1.7720, -0.3366],
         [ 0.2368,  0.4593, -1.1270,  ...,  0.3237, -0.7979,  0.9227]],

        [[ 0.0686,  0.2362, -0.6399,  ..., -0.4685, -1.7879, -0.3214],
         [ 0.2194,  0.4481, -1.1033,  ...,  0.3057, -0.8287,  0.9010]],

        [[ 0.1096,  0.2385, -0.6509,  ..., -0.4698, -1.8011, -0.3149],
         [ 0.1993,  0.4693, -1.0875,  ...,  0.2820, -0.8605,  0.9146]]],
       device='cuda:2', grad_fn=<AddBackward0>)]]
4444 output_tensor:torch.Size([1024, 2, 4096])
torch.autograd.backward
custom_backward output_tensor[0]:torch.Size([1024, 2, 4096])
output_tensor_grad[0]:torch.Size([1024, 2, 4096])
output tensors:[[tensor([[[-0.6230,  0.2442,  0.1821,  ..., -0.8512, -0.3546,  0.7945],
         [ 0.3179,  0.9672, -0.7959,  ...,  0.6637, -0.2926,  0.9277]],

        [[ 0.1833,  0.1523,  0.5201,  ..., -0.3322, -0.1380,  0.3683],
         [ 0.7616,  1.6648, -1.4077,  ...,  0.4418, -0.5148,  1.1589]],

        [[-0.6418,  0.5094,  0.3230,  ..., -0.0197, -0.1450,  0.1307],
         [-0.3006,  1.4355, -0.6133,  ...,  0.4113, -1.0805,  0.6452]],

        ...,

        [[-0.5000,  1.2130, -0.5320,  ...,  0.2073,  0.8115,  0.8103],
         [ 0.3662,  0.2119, -0.2346,  ...,  0.9129,  0.4155,  0.3576]],

        [[-0.4916,  1.2207, -0.5290,  ...,  0.2255,  0.8218,  0.7929],
         [ 0.3938,  0.1991, -0.2612,  ...,  0.8961,  0.4120,  0.3569]],

        [[-0.4760,  1.2259, -0.5245,  ...,  0.2381,  0.8174,  0.7906],
         [ 0.3990,  0.1738, -0.2663,  ...,  0.8857,  0.3895,  0.3845]]],
       device='cuda:3', grad_fn=<AddBackward0>)], [tensor([[[ 1.1765, -0.9632, -1.1682,  ..., -0.1683, -1.7159,  0.4378],
         [ 0.0631,  0.3713, -0.9059,  ...,  0.2538, -0.1626,  1.3739]],

        [[ 1.2254, -0.9232, -1.1972,  ..., -0.1906, -1.6050,  0.3736],
         [-0.0742,  0.3564, -1.0350,  ...,  0.4231,  0.0083,  0.9106]],

        [[ 0.6329, -0.2348, -0.5869,  ...,  0.2061, -1.9874,  1.5326],
         [-0.3879, -0.3461, -0.3502,  ..., -0.0693,  0.0585,  0.7447]],

        ...,

        [[ 0.0398,  0.2360, -0.6228,  ..., -0.4610, -1.7720, -0.3366],
         [ 0.2368,  0.4593, -1.1270,  ...,  0.3237, -0.7979,  0.9227]],

        [[ 0.0686,  0.2362, -0.6399,  ..., -0.4685, -1.7879, -0.3214],
         [ 0.2194,  0.4481, -1.1033,  ...,  0.3057, -0.8287,  0.9010]],

        [[ 0.1096,  0.2385, -0.6509,  ..., -0.4698, -1.8011, -0.3149],
         [ 0.1993,  0.4693, -1.0875,  ...,  0.2820, -0.8605,  0.9146]]],
       device='cuda:3', grad_fn=<AddBackward0>)]]
4444 output_tensor:torch.Size([1024, 2, 4096])
torch.autograd.backward
custom_backward output_tensor[0]:torch.Size([1024, 2, 4096])
output_tensor_grad[0]:torch.Size([1024, 2, 4096])
