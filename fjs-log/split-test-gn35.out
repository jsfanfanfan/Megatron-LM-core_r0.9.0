examples/multimodal/pretrain_freeze-llm.sh: line 4: activate: No such file or directory
[2024-11-25 20:34:23,629] torch.distributed.run: [WARNING] 
[2024-11-25 20:34:23,629] torch.distributed.run: [WARNING] *****************************************
[2024-11-25 20:34:23,629] torch.distributed.run: [WARNING] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
[2024-11-25 20:34:23,629] torch.distributed.run: [WARNING] *****************************************
You set `add_prefix_space`. The tokenizer needs to be converted from the slow tokenizers
You set `add_prefix_space`. The tokenizer needs to be converted from the slow tokenizers
You set `add_prefix_space`. The tokenizer needs to be converted from the slow tokenizers
You set `add_prefix_space`. The tokenizer needs to be converted from the slow tokenizers
------pipeline_parallel_model_size:5------
------world_size:20------
------total_model_size:20------
------num_pipeline_model_parallel_groups:4------
------pipeline_parallel_model_size:5------
------world_size:20------
------total_model_size:20------
------num_pipeline_model_parallel_groups:4------
------pipeline_parallel_model_size:5------
------world_size:20------
------total_model_size:20------
------num_pipeline_model_parallel_groups:4------
------pipeline_parallel_model_size:5------
------world_size:20------
------total_model_size:20------
------num_pipeline_model_parallel_groups:4------
---Rank 11---Tensor Parallel Group GPUs: [3, 3, 3, 3]
---Rank 11---Pipeline Parallel Group GPUs: [2, 2, 2, 2, 2]
---Rank 10---Tensor Parallel Group GPUs: [2, 2, 2, 2]
---Rank 9---Tensor Parallel Group GPUs: [1, 1, 1, 1]
---Rank 10---Pipeline Parallel Group GPUs: [2, 2, 2, 2, 2]
[rank11]:[W init.cpp:767] Warning: nvfuser is no longer supported in torch script, use _jit_set_nvfuser_enabled is deprecated and a no-op (function operator())
---Rank 8---Tensor Parallel Group GPUs: [0, 0, 0, 0]
---Rank 9---Pipeline Parallel Group GPUs: [2, 2, 2, 2, 2]
---Rank 8---Pipeline Parallel Group GPUs: [2, 2, 2, 2, 2]
[rank10]:[W init.cpp:767] Warning: nvfuser is no longer supported in torch script, use _jit_set_nvfuser_enabled is deprecated and a no-op (function operator())
[rank8]:[W init.cpp:767] Warning: nvfuser is no longer supported in torch script, use _jit_set_nvfuser_enabled is deprecated and a no-op (function operator())
[rank9]:[W init.cpp:767] Warning: nvfuser is no longer supported in torch script, use _jit_set_nvfuser_enabled is deprecated and a no-op (function operator())
WARNING:megatron.core.models.multimodal.llava_model:LLaVA model is under active development. It may be missing features and its methods may change.
WARNING:megatron.core.models.multimodal.llava_model:LLaVA model is under active development. It may be missing features and its methods may change.
WARNING:megatron.core.models.multimodal.llava_model:LLaVA model is under active development. It may be missing features and its methods may change.
WARNING:megatron.core.models.multimodal.llava_model:LLaVA model is under active development. It may be missing features and its methods may change.
 > number of parameters on (tensor, pipeline) model parallel rank (0, 2): 436273152
 > number of parameters on (tensor, pipeline) model parallel rank (1, 2): 436273152
 > number of parameters on (tensor, pipeline) model parallel rank (3, 2): 436273152
 > number of parameters on (tensor, pipeline) model parallel rank (2, 2): 436273152
[DistributedDataParallel(
  (module): LLaVAModel(
    (language_model): GPTModel(
      (rotary_pos_emb): RotaryEmbedding()
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-7): 8 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
  )
)][DistributedDataParallel(
  (module): LLaVAModel(
    (language_model): GPTModel(
      (rotary_pos_emb): RotaryEmbedding()
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-7): 8 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
  )
)][DistributedDataParallel(
  (module): LLaVAModel(
    (language_model): GPTModel(
      (rotary_pos_emb): RotaryEmbedding()
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-7): 8 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
  )
)]


[DistributedDataParallel(
  (module): LLaVAModel(
    (language_model): GPTModel(
      (rotary_pos_emb): RotaryEmbedding()
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-7): 8 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
  )
)]
pretrain configTransformerConfig(tensor_model_parallel_size=4, pipeline_model_parallel_size=5, virtual_pipeline_model_parallel_size=None, sequence_parallel=False, context_parallel_size=1, expert_model_parallel_size=1, moe_extended_tp=False, perform_initialization=True, use_cpu_initialization=None, fp16=False, bf16=False, params_dtype=torch.float32, timers=None, finalize_model_grads_func=None, grad_scale_func=None, no_sync_func=None, grad_sync_func=None, param_sync_func=None, deterministic_mode=False, enable_autocast=False, autocast_dtype=torch.float32, num_microbatches_with_partial_activation_checkpoints=None, gradient_accumulation_fusion=True, async_tensor_model_parallel_allreduce=True, use_te_rng_tracker=False, tp_comm_overlap=False, tp_comm_bulk_wgrad=True, tp_comm_bulk_dgrad=True, tp_comm_overlap_ag=True, tp_comm_overlap_rs=True, tp_comm_overlap_rs_dgrad=False, tp_comm_split_ag=True, tp_comm_atomic_ag=False, tp_comm_split_rs=True, tp_comm_atomic_rs=False, cross_entropy_loss_fusion=False, tp_comm_overlap_disable_qkv=False, tp_comm_overlap_disable_fc1=False, pipeline_dtype=torch.float32, variable_seq_lengths=False, overlap_p2p_comm=False, batch_p2p_comm=True, batch_p2p_sync=True, use_ring_exchange_p2p=False, deallocate_pipeline_outputs=True, defer_embedding_wgrad_compute=False, wgrad_deferral_limit=0, pipeline_model_parallel_split_rank=None, cpu_offloading=False, cpu_offloading_num_layers=0, _cpu_offloading_context=None, cpu_offloading_activations=True, cpu_offloading_weights=True, barrier_with_L1_time=True, num_layers=32, first_pipeline_num_layers=None, last_pipeline_num_layers=None, hidden_size=4096, num_attention_heads=32, num_query_groups=8, ffn_hidden_size=14336, kv_channels=128, hidden_dropout=0.0, attention_dropout=0.0, fp32_residual_connection=False, apply_residual_connection_post_layernorm=False, layernorm_epsilon=1e-05, layernorm_zero_centered_gamma=False, add_bias_linear=False, add_qkv_bias=False, gated_linear_unit=True, activation_func=<function silu at 0x7f645dc2d5a0>, activation_func_fp8_input_store=False, num_moe_experts=None, rotary_interleaved=False, window_size=None, normalization='RMSNorm', qk_layernorm=False, test_mode=False, calculate_per_token_loss=True, init_method=<function init_method_normal.<locals>.init_ at 0x7f63aa0b0550>, output_layer_init_method=<function scaled_init_method_normal.<locals>.init_ at 0x7f63aa0b03a0>, init_method_std=0.014, apply_query_key_layer_scaling=False, attention_softmax_in_fp32=True, bias_activation_fusion=False, masked_softmax_fusion=False, persist_layer_norm=True, memory_efficient_layer_norm=False, bias_dropout_fusion=False, apply_rope_fusion=False, recompute_granularity=None, recompute_method=None, recompute_num_layers=None, distribute_saved_activations=False, fp8=None, fp8_margin=0, fp8_interval=1, fp8_amax_history_len=1, fp8_amax_compute_algo='most_recent', fp8_wgrad=True, fp8_dot_product_attention=False, fp8_multi_head_attention=False, tp_only_amax_red=False, moe_router_load_balancing_type='aux_loss', moe_router_topk=2, moe_router_pre_softmax=False, moe_grouped_gemm=False, moe_aux_loss_coeff=0.0, moe_z_loss_coeff=None, moe_input_jitter_eps=None, moe_token_dropping=False, moe_token_dispatcher_type='allgather', moe_per_layer_logging=False, moe_expert_capacity_factor=None, moe_pad_expert_input_to_capacity=False, moe_token_drop_policy='probs', moe_layer_recompute=False, clone_scatter_output_in_embedding=True, disable_parameter_transpose_cache=False, enable_cuda_graph=False, external_cuda_graph=False, config_logger_dir='')pretrain configTransformerConfig(tensor_model_parallel_size=4, pipeline_model_parallel_size=5, virtual_pipeline_model_parallel_size=None, sequence_parallel=False, context_parallel_size=1, expert_model_parallel_size=1, moe_extended_tp=False, perform_initialization=True, use_cpu_initialization=None, fp16=False, bf16=False, params_dtype=torch.float32, timers=None, finalize_model_grads_func=None, grad_scale_func=None, no_sync_func=None, grad_sync_func=None, param_sync_func=None, deterministic_mode=False, enable_autocast=False, autocast_dtype=torch.float32, num_microbatches_with_partial_activation_checkpoints=None, gradient_accumulation_fusion=True, async_tensor_model_parallel_allreduce=True, use_te_rng_tracker=False, tp_comm_overlap=False, tp_comm_bulk_wgrad=True, tp_comm_bulk_dgrad=True, tp_comm_overlap_ag=True, tp_comm_overlap_rs=True, tp_comm_overlap_rs_dgrad=False, tp_comm_split_ag=True, tp_comm_atomic_ag=False, tp_comm_split_rs=True, tp_comm_atomic_rs=False, cross_entropy_loss_fusion=False, tp_comm_overlap_disable_qkv=False, tp_comm_overlap_disable_fc1=False, pipeline_dtype=torch.float32, variable_seq_lengths=False, overlap_p2p_comm=False, batch_p2p_comm=True, batch_p2p_sync=True, use_ring_exchange_p2p=False, deallocate_pipeline_outputs=True, defer_embedding_wgrad_compute=False, wgrad_deferral_limit=0, pipeline_model_parallel_split_rank=None, cpu_offloading=False, cpu_offloading_num_layers=0, _cpu_offloading_context=None, cpu_offloading_activations=True, cpu_offloading_weights=True, barrier_with_L1_time=True, num_layers=32, first_pipeline_num_layers=None, last_pipeline_num_layers=None, hidden_size=4096, num_attention_heads=32, num_query_groups=8, ffn_hidden_size=14336, kv_channels=128, hidden_dropout=0.0, attention_dropout=0.0, fp32_residual_connection=False, apply_residual_connection_post_layernorm=False, layernorm_epsilon=1e-05, layernorm_zero_centered_gamma=False, add_bias_linear=False, add_qkv_bias=False, gated_linear_unit=True, activation_func=<function silu at 0x7fc120c7d5a0>, activation_func_fp8_input_store=False, num_moe_experts=None, rotary_interleaved=False, window_size=None, normalization='RMSNorm', qk_layernorm=False, test_mode=False, calculate_per_token_loss=True, init_method=<function init_method_normal.<locals>.init_ at 0x7fc099b256c0>, output_layer_init_method=<function scaled_init_method_normal.<locals>.init_ at 0x7fc099b243a0>, init_method_std=0.014, apply_query_key_layer_scaling=False, attention_softmax_in_fp32=True, bias_activation_fusion=False, masked_softmax_fusion=False, persist_layer_norm=True, memory_efficient_layer_norm=False, bias_dropout_fusion=False, apply_rope_fusion=False, recompute_granularity=None, recompute_method=None, recompute_num_layers=None, distribute_saved_activations=False, fp8=None, fp8_margin=0, fp8_interval=1, fp8_amax_history_len=1, fp8_amax_compute_algo='most_recent', fp8_wgrad=True, fp8_dot_product_attention=False, fp8_multi_head_attention=False, tp_only_amax_red=False, moe_router_load_balancing_type='aux_loss', moe_router_topk=2, moe_router_pre_softmax=False, moe_grouped_gemm=False, moe_aux_loss_coeff=0.0, moe_z_loss_coeff=None, moe_input_jitter_eps=None, moe_token_dropping=False, moe_token_dispatcher_type='allgather', moe_per_layer_logging=False, moe_expert_capacity_factor=None, moe_pad_expert_input_to_capacity=False, moe_token_drop_policy='probs', moe_layer_recompute=False, clone_scatter_output_in_embedding=True, disable_parameter_transpose_cache=False, enable_cuda_graph=False, external_cuda_graph=False, config_logger_dir='')

pretrain configTransformerConfig(tensor_model_parallel_size=4, pipeline_model_parallel_size=5, virtual_pipeline_model_parallel_size=None, sequence_parallel=False, context_parallel_size=1, expert_model_parallel_size=1, moe_extended_tp=False, perform_initialization=True, use_cpu_initialization=None, fp16=False, bf16=False, params_dtype=torch.float32, timers=None, finalize_model_grads_func=None, grad_scale_func=None, no_sync_func=None, grad_sync_func=None, param_sync_func=None, deterministic_mode=False, enable_autocast=False, autocast_dtype=torch.float32, num_microbatches_with_partial_activation_checkpoints=None, gradient_accumulation_fusion=True, async_tensor_model_parallel_allreduce=True, use_te_rng_tracker=False, tp_comm_overlap=False, tp_comm_bulk_wgrad=True, tp_comm_bulk_dgrad=True, tp_comm_overlap_ag=True, tp_comm_overlap_rs=True, tp_comm_overlap_rs_dgrad=False, tp_comm_split_ag=True, tp_comm_atomic_ag=False, tp_comm_split_rs=True, tp_comm_atomic_rs=False, cross_entropy_loss_fusion=False, tp_comm_overlap_disable_qkv=False, tp_comm_overlap_disable_fc1=False, pipeline_dtype=torch.float32, variable_seq_lengths=False, overlap_p2p_comm=False, batch_p2p_comm=True, batch_p2p_sync=True, use_ring_exchange_p2p=False, deallocate_pipeline_outputs=True, defer_embedding_wgrad_compute=False, wgrad_deferral_limit=0, pipeline_model_parallel_split_rank=None, cpu_offloading=False, cpu_offloading_num_layers=0, _cpu_offloading_context=None, cpu_offloading_activations=True, cpu_offloading_weights=True, barrier_with_L1_time=True, num_layers=32, first_pipeline_num_layers=None, last_pipeline_num_layers=None, hidden_size=4096, num_attention_heads=32, num_query_groups=8, ffn_hidden_size=14336, kv_channels=128, hidden_dropout=0.0, attention_dropout=0.0, fp32_residual_connection=False, apply_residual_connection_post_layernorm=False, layernorm_epsilon=1e-05, layernorm_zero_centered_gamma=False, add_bias_linear=False, add_qkv_bias=False, gated_linear_unit=True, activation_func=<function silu at 0x7f0225a6d5a0>, activation_func_fp8_input_store=False, num_moe_experts=None, rotary_interleaved=False, window_size=None, normalization='RMSNorm', qk_layernorm=False, test_mode=False, calculate_per_token_loss=True, init_method=<function init_method_normal.<locals>.init_ at 0x7f01741805e0>, output_layer_init_method=<function scaled_init_method_normal.<locals>.init_ at 0x7f0174180430>, init_method_std=0.014, apply_query_key_layer_scaling=False, attention_softmax_in_fp32=True, bias_activation_fusion=False, masked_softmax_fusion=False, persist_layer_norm=True, memory_efficient_layer_norm=False, bias_dropout_fusion=False, apply_rope_fusion=False, recompute_granularity=None, recompute_method=None, recompute_num_layers=None, distribute_saved_activations=False, fp8=None, fp8_margin=0, fp8_interval=1, fp8_amax_history_len=1, fp8_amax_compute_algo='most_recent', fp8_wgrad=True, fp8_dot_product_attention=False, fp8_multi_head_attention=False, tp_only_amax_red=False, moe_router_load_balancing_type='aux_loss', moe_router_topk=2, moe_router_pre_softmax=False, moe_grouped_gemm=False, moe_aux_loss_coeff=0.0, moe_z_loss_coeff=None, moe_input_jitter_eps=None, moe_token_dropping=False, moe_token_dispatcher_type='allgather', moe_per_layer_logging=False, moe_expert_capacity_factor=None, moe_pad_expert_input_to_capacity=False, moe_token_drop_policy='probs', moe_layer_recompute=False, clone_scatter_output_in_embedding=True, disable_parameter_transpose_cache=False, enable_cuda_graph=False, external_cuda_graph=False, config_logger_dir='')pretrain configTransformerConfig(tensor_model_parallel_size=4, pipeline_model_parallel_size=5, virtual_pipeline_model_parallel_size=None, sequence_parallel=False, context_parallel_size=1, expert_model_parallel_size=1, moe_extended_tp=False, perform_initialization=True, use_cpu_initialization=None, fp16=False, bf16=False, params_dtype=torch.float32, timers=None, finalize_model_grads_func=None, grad_scale_func=None, no_sync_func=None, grad_sync_func=None, param_sync_func=None, deterministic_mode=False, enable_autocast=False, autocast_dtype=torch.float32, num_microbatches_with_partial_activation_checkpoints=None, gradient_accumulation_fusion=True, async_tensor_model_parallel_allreduce=True, use_te_rng_tracker=False, tp_comm_overlap=False, tp_comm_bulk_wgrad=True, tp_comm_bulk_dgrad=True, tp_comm_overlap_ag=True, tp_comm_overlap_rs=True, tp_comm_overlap_rs_dgrad=False, tp_comm_split_ag=True, tp_comm_atomic_ag=False, tp_comm_split_rs=True, tp_comm_atomic_rs=False, cross_entropy_loss_fusion=False, tp_comm_overlap_disable_qkv=False, tp_comm_overlap_disable_fc1=False, pipeline_dtype=torch.float32, variable_seq_lengths=False, overlap_p2p_comm=False, batch_p2p_comm=True, batch_p2p_sync=True, use_ring_exchange_p2p=False, deallocate_pipeline_outputs=True, defer_embedding_wgrad_compute=False, wgrad_deferral_limit=0, pipeline_model_parallel_split_rank=None, cpu_offloading=False, cpu_offloading_num_layers=0, _cpu_offloading_context=None, cpu_offloading_activations=True, cpu_offloading_weights=True, barrier_with_L1_time=True, num_layers=32, first_pipeline_num_layers=None, last_pipeline_num_layers=None, hidden_size=4096, num_attention_heads=32, num_query_groups=8, ffn_hidden_size=14336, kv_channels=128, hidden_dropout=0.0, attention_dropout=0.0, fp32_residual_connection=False, apply_residual_connection_post_layernorm=False, layernorm_epsilon=1e-05, layernorm_zero_centered_gamma=False, add_bias_linear=False, add_qkv_bias=False, gated_linear_unit=True, activation_func=<function silu at 0x7f9b258395a0>, activation_func_fp8_input_store=False, num_moe_experts=None, rotary_interleaved=False, window_size=None, normalization='RMSNorm', qk_layernorm=False, test_mode=False, calculate_per_token_loss=True, init_method=<function init_method_normal.<locals>.init_ at 0x7f9a7413c550>, output_layer_init_method=<function scaled_init_method_normal.<locals>.init_ at 0x7f9a7413c3a0>, init_method_std=0.014, apply_query_key_layer_scaling=False, attention_softmax_in_fp32=True, bias_activation_fusion=False, masked_softmax_fusion=False, persist_layer_norm=True, memory_efficient_layer_norm=False, bias_dropout_fusion=False, apply_rope_fusion=False, recompute_granularity=None, recompute_method=None, recompute_num_layers=None, distribute_saved_activations=False, fp8=None, fp8_margin=0, fp8_interval=1, fp8_amax_history_len=1, fp8_amax_compute_algo='most_recent', fp8_wgrad=True, fp8_dot_product_attention=False, fp8_multi_head_attention=False, tp_only_amax_red=False, moe_router_load_balancing_type='aux_loss', moe_router_topk=2, moe_router_pre_softmax=False, moe_grouped_gemm=False, moe_aux_loss_coeff=0.0, moe_z_loss_coeff=None, moe_input_jitter_eps=None, moe_token_dropping=False, moe_token_dispatcher_type='allgather', moe_per_layer_logging=False, moe_expert_capacity_factor=None, moe_pad_expert_input_to_capacity=False, moe_token_drop_policy='probs', moe_layer_recompute=False, clone_scatter_output_in_embedding=True, disable_parameter_transpose_cache=False, enable_cuda_graph=False, external_cuda_graph=False, config_logger_dir='')

rank=0, worker=0: shard_range=[pretrain-0.tar[0, 100), pretrain-0.tar[100, 200), pretrain-0.tar[200, 300), ...<2194>, pretrain-28.tar[9700, 9800), pretrain-28.tar[9800, 9900), pretrain-28.tar[9900, 10000)] sum(count)=220000
rank=0, worker=1: shard_range=[pretrain-29.tar[0, 100), pretrain-29.tar[100, 200), pretrain-29.tar[200, 300), ...<2194>, pretrain-48.tar[9700, 9800), pretrain-48.tar[9800, 9900), pretrain-48.tar[9900, 10000)] sum(count)=220000
rank=0, worker=0: shard_range=[pretrain-49.tar[0, 10000), pretrain-5.tar[0, 10000), pretrain-50.tar[0, 10000)] sum(count)=30000
rank=0, worker=1: shard_range=[pretrain-51.tar[0, 10000), pretrain-52.tar[0, 10000), pretrain-53.tar[0, 10000)] sum(count)=30000
schedules.py decoder_seq_length:1152
schedules.py decoder_seq_length:1152
recv_tensor_shapes:[(576, 2, 4096)]
schedules.py decoder_seq_length:1152
recv_tensor_shapes:[(576, 2, 4096)]
recv_tensor_shapes:[(576, 2, 4096)]
schedules.py decoder_seq_length:1152
recv_tensor_shapes:[(576, 2, 4096)]
receive input_tensor shapes:[tensor([[[ 0.1420, -0.6197, -0.4113,  ..., -0.2206, -0.5350,  0.2192],
         [ 0.2914, -0.0496, -0.3360,  ..., -0.5003, -0.1515,  0.1772]],

        [[ 0.1190, -0.6127, -0.4182,  ..., -0.2282, -0.5297,  0.2066],
         [ 0.2883, -0.0516, -0.3457,  ..., -0.4982, -0.1413,  0.1744]],

        [[ 0.0627, -0.3385, -0.0797,  ...,  0.0320, -0.4810,  0.5281],
         [-0.0299, -0.1033, -0.1056,  ..., -0.6335, -0.6673,  0.3046]],

        ...,

        [[ 0.1569, -0.1448,  0.0270,  ..., -0.7906, -0.4704, -0.2346],
         [ 0.1979,  0.1373,  0.0010,  ..., -0.7749, -0.3235,  0.0406]],

        [[ 0.1616, -0.1568,  0.0221,  ..., -0.7897, -0.4742, -0.2324],
         [ 0.2043,  0.1343,  0.0018,  ..., -0.7773, -0.3213,  0.0391]],

        [[ 0.1649, -0.1648,  0.0216,  ..., -0.7895, -0.4791, -0.2327],
         [ 0.2171,  0.1384,  0.0064,  ..., -0.7800, -0.3231,  0.0420]]],
       device='cuda:0', requires_grad=True)]
receive input_tensor shapes:[tensor([[[ 0.1420, -0.6197, -0.4113,  ..., -0.2206, -0.5350,  0.2192],
         [ 0.2914, -0.0496, -0.3360,  ..., -0.5003, -0.1515,  0.1772]],

        [[ 0.1190, -0.6127, -0.4182,  ..., -0.2282, -0.5297,  0.2066],
         [ 0.2883, -0.0516, -0.3457,  ..., -0.4982, -0.1413,  0.1744]],

        [[ 0.0627, -0.3385, -0.0797,  ...,  0.0320, -0.4810,  0.5281],
         [-0.0299, -0.1033, -0.1056,  ..., -0.6335, -0.6673,  0.3046]],

        ...,

        [[ 0.1569, -0.1448,  0.0270,  ..., -0.7906, -0.4704, -0.2346],
         [ 0.1979,  0.1373,  0.0010,  ..., -0.7749, -0.3235,  0.0406]],

        [[ 0.1616, -0.1568,  0.0221,  ..., -0.7897, -0.4742, -0.2324],
         [ 0.2043,  0.1343,  0.0018,  ..., -0.7773, -0.3213,  0.0391]],

        [[ 0.1649, -0.1648,  0.0216,  ..., -0.7895, -0.4791, -0.2327],
         [ 0.2171,  0.1384,  0.0064,  ..., -0.7800, -0.3231,  0.0420]]],
       device='cuda:3', requires_grad=True)]
receive input_tensor shapes:[tensor([[[ 0.1420, -0.6197, -0.4113,  ..., -0.2206, -0.5350,  0.2192],
         [ 0.2914, -0.0496, -0.3360,  ..., -0.5003, -0.1515,  0.1772]],

        [[ 0.1190, -0.6127, -0.4182,  ..., -0.2282, -0.5297,  0.2066],
         [ 0.2883, -0.0516, -0.3457,  ..., -0.4982, -0.1413,  0.1744]],

        [[ 0.0627, -0.3385, -0.0797,  ...,  0.0320, -0.4810,  0.5281],
         [-0.0299, -0.1033, -0.1056,  ..., -0.6335, -0.6673,  0.3046]],

        ...,

        [[ 0.1569, -0.1448,  0.0270,  ..., -0.7906, -0.4704, -0.2346],
         [ 0.1979,  0.1373,  0.0010,  ..., -0.7749, -0.3235,  0.0406]],

        [[ 0.1616, -0.1568,  0.0221,  ..., -0.7897, -0.4742, -0.2324],
         [ 0.2043,  0.1343,  0.0018,  ..., -0.7773, -0.3213,  0.0391]],

        [[ 0.1649, -0.1648,  0.0216,  ..., -0.7895, -0.4791, -0.2327],
         [ 0.2171,  0.1384,  0.0064,  ..., -0.7800, -0.3231,  0.0420]]],
       device='cuda:2', requires_grad=True)]
receive input_tensor shapes:[tensor([[[ 0.1420, -0.6197, -0.4113,  ..., -0.2206, -0.5350,  0.2192],
         [ 0.2914, -0.0496, -0.3360,  ..., -0.5003, -0.1515,  0.1772]],

        [[ 0.1190, -0.6127, -0.4182,  ..., -0.2282, -0.5297,  0.2066],
         [ 0.2883, -0.0516, -0.3457,  ..., -0.4982, -0.1413,  0.1744]],

        [[ 0.0627, -0.3385, -0.0797,  ...,  0.0320, -0.4810,  0.5281],
         [-0.0299, -0.1033, -0.1056,  ..., -0.6335, -0.6673,  0.3046]],

        ...,

        [[ 0.1569, -0.1448,  0.0270,  ..., -0.7906, -0.4704, -0.2346],
         [ 0.1979,  0.1373,  0.0010,  ..., -0.7749, -0.3235,  0.0406]],

        [[ 0.1616, -0.1568,  0.0221,  ..., -0.7897, -0.4742, -0.2324],
         [ 0.2043,  0.1343,  0.0018,  ..., -0.7773, -0.3213,  0.0391]],

        [[ 0.1649, -0.1648,  0.0216,  ..., -0.7895, -0.4791, -0.2327],
         [ 0.2171,  0.1384,  0.0064,  ..., -0.7800, -0.3231,  0.0420]]],
       device='cuda:1', requires_grad=True)]
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
self.input tensor size:torch.Size([576, 2, 4096])
TransformerBlock hidden states size:torch.Size([576, 2, 4096])
self.input tensor size:torch.Size([576, 2, 4096])
TransformerBlock hidden states size:torch.Size([576, 2, 4096])
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
self.input tensor size:torch.Size([576, 2, 4096])
TransformerBlock hidden states size:torch.Size([576, 2, 4096])
self.input tensor size:torch.Size([576, 2, 4096])
TransformerBlock hidden states size:torch.Size([576, 2, 4096])
hidden state size:torch.Size([576, 2, 4096])
language model end! output size:torch.Size([576, 2, 4096])
hidden state size:torch.Size([576, 2, 4096])
language model end! output size:torch.Size([576, 2, 4096])
hidden state size:torch.Size([576, 2, 4096])
language model end! output size:torch.Size([576, 2, 4096])
hidden state size:torch.Size([576, 2, 4096])
language model end! output size:torch.Size([576, 2, 4096])
recv_tensor_shapes:[(576, 2, 4096)]
recv_tensor_shapes:[(576, 2, 4096)]
recv_tensor_shapes:[(576, 2, 4096)]
recv_tensor_shapes:[(576, 2, 4096)]
receive input_tensor shapes:[tensor([[[ 0.2699, -0.1847, -0.3081,  ..., -0.5510, -0.2737,  0.0470],
         [ 0.4570, -0.0502, -0.1695,  ..., -0.4245,  0.1869, -0.0774]],

        [[ 0.2791, -0.1861, -0.3096,  ..., -0.5451, -0.2739,  0.0346],
         [ 0.0648, -0.0600, -0.1441,  ..., -0.4649, -0.2154,  0.0901]],

        [[-0.1242, -0.7417, -0.2525,  ..., -0.5269, -0.3684,  0.0961],
         [ 0.2669, -0.6016, -0.1877,  ..., -0.4297,  0.1456,  0.0649]],

        ...,

        [[ 0.0825,  0.1516,  0.0027,  ..., -0.5556,  0.0098,  0.0511],
         [ 0.3271,  0.1849, -0.3843,  ...,  0.3450, -0.0497,  0.2719]],

        [[ 0.0902,  0.2340, -0.2985,  ...,  0.0278, -0.2822,  0.1499],
         [ 0.4909,  0.5372,  0.2470,  ..., -0.2589, -0.3971,  0.2496]],

        [[ 0.1252,  0.2595, -0.6346,  ..., -0.1661, -0.1540, -0.0761],
         [ 0.4826,  0.4791,  0.2743,  ..., -0.2904, -0.4248,  0.2646]]],
       device='cuda:0', requires_grad=True)]
receive input_tensor shapes:[tensor([[[ 0.2699, -0.1847, -0.3081,  ..., -0.5510, -0.2737,  0.0470],
         [ 0.4570, -0.0502, -0.1695,  ..., -0.4245,  0.1869, -0.0774]],

        [[ 0.2791, -0.1861, -0.3096,  ..., -0.5451, -0.2739,  0.0346],
         [ 0.0648, -0.0600, -0.1441,  ..., -0.4649, -0.2154,  0.0901]],

        [[-0.1242, -0.7417, -0.2525,  ..., -0.5269, -0.3684,  0.0961],
         [ 0.2669, -0.6016, -0.1877,  ..., -0.4297,  0.1456,  0.0649]],

        ...,

        [[ 0.0825,  0.1516,  0.0027,  ..., -0.5556,  0.0098,  0.0511],
         [ 0.3271,  0.1849, -0.3843,  ...,  0.3450, -0.0497,  0.2719]],

        [[ 0.0902,  0.2340, -0.2985,  ...,  0.0278, -0.2822,  0.1499],
         [ 0.4909,  0.5372,  0.2470,  ..., -0.2589, -0.3971,  0.2496]],

        [[ 0.1252,  0.2595, -0.6346,  ..., -0.1661, -0.1540, -0.0761],
         [ 0.4826,  0.4791,  0.2743,  ..., -0.2904, -0.4248,  0.2646]]],
       device='cuda:3', requires_grad=True)]
receive input_tensor shapes:[tensor([[[ 0.2699, -0.1847, -0.3081,  ..., -0.5510, -0.2737,  0.0470],
         [ 0.4570, -0.0502, -0.1695,  ..., -0.4245,  0.1869, -0.0774]],

        [[ 0.2791, -0.1861, -0.3096,  ..., -0.5451, -0.2739,  0.0346],
         [ 0.0648, -0.0600, -0.1441,  ..., -0.4649, -0.2154,  0.0901]],

        [[-0.1242, -0.7417, -0.2525,  ..., -0.5269, -0.3684,  0.0961],
         [ 0.2669, -0.6016, -0.1877,  ..., -0.4297,  0.1456,  0.0649]],

        ...,

        [[ 0.0825,  0.1516,  0.0027,  ..., -0.5556,  0.0098,  0.0511],
         [ 0.3271,  0.1849, -0.3843,  ...,  0.3450, -0.0497,  0.2719]],

        [[ 0.0902,  0.2340, -0.2985,  ...,  0.0278, -0.2822,  0.1499],
         [ 0.4909,  0.5372,  0.2470,  ..., -0.2589, -0.3971,  0.2496]],

        [[ 0.1252,  0.2595, -0.6346,  ..., -0.1661, -0.1540, -0.0761],
         [ 0.4826,  0.4791,  0.2743,  ..., -0.2904, -0.4248,  0.2646]]],
       device='cuda:1', requires_grad=True)]
receive input_tensor shapes:[tensor([[[ 0.2699, -0.1847, -0.3081,  ..., -0.5510, -0.2737,  0.0470],
         [ 0.4570, -0.0502, -0.1695,  ..., -0.4245,  0.1869, -0.0774]],

        [[ 0.2791, -0.1861, -0.3096,  ..., -0.5451, -0.2739,  0.0346],
         [ 0.0648, -0.0600, -0.1441,  ..., -0.4649, -0.2154,  0.0901]],

        [[-0.1242, -0.7417, -0.2525,  ..., -0.5269, -0.3684,  0.0961],
         [ 0.2669, -0.6016, -0.1877,  ..., -0.4297,  0.1456,  0.0649]],

        ...,

        [[ 0.0825,  0.1516,  0.0027,  ..., -0.5556,  0.0098,  0.0511],
         [ 0.3271,  0.1849, -0.3843,  ...,  0.3450, -0.0497,  0.2719]],

        [[ 0.0902,  0.2340, -0.2985,  ...,  0.0278, -0.2822,  0.1499],
         [ 0.4909,  0.5372,  0.2470,  ..., -0.2589, -0.3971,  0.2496]],

        [[ 0.1252,  0.2595, -0.6346,  ..., -0.1661, -0.1540, -0.0761],
         [ 0.4826,  0.4791,  0.2743,  ..., -0.2904, -0.4248,  0.2646]]],
       device='cuda:2', requires_grad=True)]
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
self.input tensor size:torch.Size([576, 2, 4096])
TransformerBlock hidden states size:torch.Size([576, 2, 4096])
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! tokens size:torch.Size([2, 576])get batch end! position_ids:torch.Size([2, 576])

get batch end! labels size:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! num_image_tiles:torch.Size([2])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
self.input tensor size:torch.Size([576, 2, 4096])
TransformerBlock hidden states size:torch.Size([576, 2, 4096])
self.input tensor size:torch.Size([576, 2, 4096])
TransformerBlock hidden states size:torch.Size([576, 2, 4096])
self.input tensor size:torch.Size([576, 2, 4096])
TransformerBlock hidden states size:torch.Size([576, 2, 4096])
hidden state size:torch.Size([576, 2, 4096])
language model end! output size:torch.Size([576, 2, 4096])
hidden state size:torch.Size([576, 2, 4096])
language model end! output size:torch.Size([576, 2, 4096])
hidden state size:torch.Size([576, 2, 4096])
language model end! output size:torch.Size([576, 2, 4096])
hidden state size:torch.Size([576, 2, 4096])
language model end! output size:torch.Size([576, 2, 4096])
get batch end! tokens size:torch.Size([2, 576])get batch end! tokens size:torch.Size([2, 576])
get batch end! tokens size:torch.Size([2, 576])get batch end! labels size:torch.Size([2, 576])


get batch end! loss_mask size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])get batch end! loss_mask size:torch.Size([2, 576])

get batch end! position_ids:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])get batch end! position_ids:torch.Size([2, 576])

get batch end! labels size:torch.Size([2, 576])get batch end! num_image_tiles:torch.Size([2])get batch end! tokens size:torch.Size([2, 576])get batch end! images size:torch.Size([2, 3, 336, 336])


get batch end! num_image_tiles:torch.Size([2])

get batch end! loss_mask size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])get batch end! attention_mask:torch.Size([1, 1, 576, 576])

get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! position_ids:torch.Size([2, 576])get batch end! images size:torch.Size([2, 3, 336, 336])

get batch end! num_image_tiles:torch.Size([2])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
self.input tensor size:torch.Size([576, 2, 4096])
TransformerBlock hidden states size:torch.Size([576, 2, 4096])
self.input tensor size:torch.Size([576, 2, 4096])
TransformerBlock hidden states size:torch.Size([576, 2, 4096])
self.input tensor size:torch.Size([576, 2, 4096])
TransformerBlock hidden states size:torch.Size([576, 2, 4096])
self.input tensor size:torch.Size([576, 2, 4096])
TransformerBlock hidden states size:torch.Size([576, 2, 4096])
hidden state size:torch.Size([576, 2, 4096])
language model end! output size:torch.Size([576, 2, 4096])
hidden state size:torch.Size([576, 2, 4096])
language model end! output size:torch.Size([576, 2, 4096])
hidden state size:torch.Size([576, 2, 4096])
language model end! output size:torch.Size([576, 2, 4096])
hidden state size:torch.Size([576, 2, 4096])
language model end! output size:torch.Size([576, 2, 4096])
