examples/multimodal/pretrain_freeze-llm.sh: line 4: activate: No such file or directory
[2024-11-25 20:33:03,052] torch.distributed.run: [WARNING] 
[2024-11-25 20:33:03,052] torch.distributed.run: [WARNING] *****************************************
[2024-11-25 20:33:03,052] torch.distributed.run: [WARNING] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
[2024-11-25 20:33:03,052] torch.distributed.run: [WARNING] *****************************************
You set `add_prefix_space`. The tokenizer needs to be converted from the slow tokenizers
You set `add_prefix_space`. The tokenizer needs to be converted from the slow tokenizers
You set `add_prefix_space`. The tokenizer needs to be converted from the slow tokenizers
You set `add_prefix_space`. The tokenizer needs to be converted from the slow tokenizers
------pipeline_parallel_model_size:5------
------world_size:20------
------total_model_size:20------
------num_pipeline_model_parallel_groups:4------
------pipeline_parallel_model_size:5------
------world_size:20------
------total_model_size:20------
------num_pipeline_model_parallel_groups:4------
------pipeline_parallel_model_size:5------
------world_size:20------
------total_model_size:20------
------num_pipeline_model_parallel_groups:4------
------pipeline_parallel_model_size:5------
------world_size:20------
------total_model_size:20------
------num_pipeline_model_parallel_groups:4------
---Rank 7---Tensor Parallel Group GPUs: [3, 3, 3, 3]
---Rank 7---Pipeline Parallel Group GPUs: [1, 1, 1, 1, 1]
---Rank 6---Tensor Parallel Group GPUs: [2, 2, 2, 2]
[rank7]:[W init.cpp:767] Warning: nvfuser is no longer supported in torch script, use _jit_set_nvfuser_enabled is deprecated and a no-op (function operator())
---Rank 6---Pipeline Parallel Group GPUs: [1, 1, 1, 1, 1]
---Rank 4---Tensor Parallel Group GPUs: [0, 0, 0, 0]
---Rank 4---Pipeline Parallel Group GPUs: [1, 1, 1, 1, 1]
[rank6]:[W init.cpp:767] Warning: nvfuser is no longer supported in torch script, use _jit_set_nvfuser_enabled is deprecated and a no-op (function operator())
---Rank 5---Tensor Parallel Group GPUs: [1, 1, 1, 1]
---Rank 5---Pipeline Parallel Group GPUs: [1, 1, 1, 1, 1]
[rank4]:[W init.cpp:767] Warning: nvfuser is no longer supported in torch script, use _jit_set_nvfuser_enabled is deprecated and a no-op (function operator())
[rank5]:[W init.cpp:767] Warning: nvfuser is no longer supported in torch script, use _jit_set_nvfuser_enabled is deprecated and a no-op (function operator())
WARNING:megatron.core.models.multimodal.llava_model:LLaVA model is under active development. It may be missing features and its methods may change.
WARNING:megatron.core.models.multimodal.llava_model:LLaVA model is under active development. It may be missing features and its methods may change.
WARNING:megatron.core.models.multimodal.llava_model:LLaVA model is under active development. It may be missing features and its methods may change.
WARNING:megatron.core.models.multimodal.llava_model:LLaVA model is under active development. It may be missing features and its methods may change.
 > number of parameters on (tensor, pipeline) model parallel rank (3, 1): 469827584
 > number of parameters on (tensor, pipeline) model parallel rank (1, 1): 469827584
 > number of parameters on (tensor, pipeline) model parallel rank (2, 1): 469827584
 > number of parameters on (tensor, pipeline) model parallel rank (0, 1): 469827584
[DistributedDataParallel(
  (module): LLaVAModel(
    (language_model): GPTModel(
      (embedding): LanguageModelEmbedding(
        (word_embeddings): VocabParallelEmbedding()
        (embedding_dropout): Dropout(p=0.0, inplace=False)
      )
      (rotary_pos_emb): RotaryEmbedding()
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-7): 8 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
  )
)]
[DistributedDataParallel(
  (module): LLaVAModel(
    (language_model): GPTModel(
      (embedding): LanguageModelEmbedding(
        (word_embeddings): VocabParallelEmbedding()
        (embedding_dropout): Dropout(p=0.0, inplace=False)
      )
      (rotary_pos_emb): RotaryEmbedding()
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-7): 8 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
  )
)]
[DistributedDataParallel(
  (module): LLaVAModel(
    (language_model): GPTModel(
      (embedding): LanguageModelEmbedding(
        (word_embeddings): VocabParallelEmbedding()
        (embedding_dropout): Dropout(p=0.0, inplace=False)
      )
      (rotary_pos_emb): RotaryEmbedding()
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-7): 8 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
  )
)]
[DistributedDataParallel(
  (module): LLaVAModel(
    (language_model): GPTModel(
      (embedding): LanguageModelEmbedding(
        (word_embeddings): VocabParallelEmbedding()
        (embedding_dropout): Dropout(p=0.0, inplace=False)
      )
      (rotary_pos_emb): RotaryEmbedding()
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-7): 8 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
  )
)]
pretrain configTransformerConfig(tensor_model_parallel_size=4, pipeline_model_parallel_size=5, virtual_pipeline_model_parallel_size=None, sequence_parallel=False, context_parallel_size=1, expert_model_parallel_size=1, moe_extended_tp=False, perform_initialization=True, use_cpu_initialization=None, fp16=False, bf16=False, params_dtype=torch.float32, timers=None, finalize_model_grads_func=None, grad_scale_func=None, no_sync_func=None, grad_sync_func=None, param_sync_func=None, deterministic_mode=False, enable_autocast=False, autocast_dtype=torch.float32, num_microbatches_with_partial_activation_checkpoints=None, gradient_accumulation_fusion=True, async_tensor_model_parallel_allreduce=True, use_te_rng_tracker=False, tp_comm_overlap=False, tp_comm_bulk_wgrad=True, tp_comm_bulk_dgrad=True, tp_comm_overlap_ag=True, tp_comm_overlap_rs=True, tp_comm_overlap_rs_dgrad=False, tp_comm_split_ag=True, tp_comm_atomic_ag=False, tp_comm_split_rs=True, tp_comm_atomic_rs=False, cross_entropy_loss_fusion=False, tp_comm_overlap_disable_qkv=False, tp_comm_overlap_disable_fc1=False, pipeline_dtype=torch.float32, variable_seq_lengths=False, overlap_p2p_comm=False, batch_p2p_comm=True, batch_p2p_sync=True, use_ring_exchange_p2p=False, deallocate_pipeline_outputs=True, defer_embedding_wgrad_compute=False, wgrad_deferral_limit=0, pipeline_model_parallel_split_rank=None, cpu_offloading=False, cpu_offloading_num_layers=0, _cpu_offloading_context=None, cpu_offloading_activations=True, cpu_offloading_weights=True, barrier_with_L1_time=True, num_layers=32, first_pipeline_num_layers=None, last_pipeline_num_layers=None, hidden_size=4096, num_attention_heads=32, num_query_groups=8, ffn_hidden_size=14336, kv_channels=128, hidden_dropout=0.0, attention_dropout=0.0, fp32_residual_connection=False, apply_residual_connection_post_layernorm=False, layernorm_epsilon=1e-05, layernorm_zero_centered_gamma=False, add_bias_linear=False, add_qkv_bias=False, gated_linear_unit=True, activation_func=<function silu at 0x7f2005b255a0>, activation_func_fp8_input_store=False, num_moe_experts=None, rotary_interleaved=False, window_size=None, normalization='RMSNorm', qk_layernorm=False, test_mode=False, calculate_per_token_loss=True, init_method=<function init_method_normal.<locals>.init_ at 0x7f1f557456c0>, output_layer_init_method=<function scaled_init_method_normal.<locals>.init_ at 0x7f1f557443a0>, init_method_std=0.014, apply_query_key_layer_scaling=False, attention_softmax_in_fp32=True, bias_activation_fusion=False, masked_softmax_fusion=False, persist_layer_norm=True, memory_efficient_layer_norm=False, bias_dropout_fusion=False, apply_rope_fusion=False, recompute_granularity=None, recompute_method=None, recompute_num_layers=None, distribute_saved_activations=False, fp8=None, fp8_margin=0, fp8_interval=1, fp8_amax_history_len=1, fp8_amax_compute_algo='most_recent', fp8_wgrad=True, fp8_dot_product_attention=False, fp8_multi_head_attention=False, tp_only_amax_red=False, moe_router_load_balancing_type='aux_loss', moe_router_topk=2, moe_router_pre_softmax=False, moe_grouped_gemm=False, moe_aux_loss_coeff=0.0, moe_z_loss_coeff=None, moe_input_jitter_eps=None, moe_token_dropping=False, moe_token_dispatcher_type='allgather', moe_per_layer_logging=False, moe_expert_capacity_factor=None, moe_pad_expert_input_to_capacity=False, moe_token_drop_policy='probs', moe_layer_recompute=False, clone_scatter_output_in_embedding=True, disable_parameter_transpose_cache=False, enable_cuda_graph=False, external_cuda_graph=False, config_logger_dir='')
pretrain configTransformerConfig(tensor_model_parallel_size=4, pipeline_model_parallel_size=5, virtual_pipeline_model_parallel_size=None, sequence_parallel=False, context_parallel_size=1, expert_model_parallel_size=1, moe_extended_tp=False, perform_initialization=True, use_cpu_initialization=None, fp16=False, bf16=False, params_dtype=torch.float32, timers=None, finalize_model_grads_func=None, grad_scale_func=None, no_sync_func=None, grad_sync_func=None, param_sync_func=None, deterministic_mode=False, enable_autocast=False, autocast_dtype=torch.float32, num_microbatches_with_partial_activation_checkpoints=None, gradient_accumulation_fusion=True, async_tensor_model_parallel_allreduce=True, use_te_rng_tracker=False, tp_comm_overlap=False, tp_comm_bulk_wgrad=True, tp_comm_bulk_dgrad=True, tp_comm_overlap_ag=True, tp_comm_overlap_rs=True, tp_comm_overlap_rs_dgrad=False, tp_comm_split_ag=True, tp_comm_atomic_ag=False, tp_comm_split_rs=True, tp_comm_atomic_rs=False, cross_entropy_loss_fusion=False, tp_comm_overlap_disable_qkv=False, tp_comm_overlap_disable_fc1=False, pipeline_dtype=torch.float32, variable_seq_lengths=False, overlap_p2p_comm=False, batch_p2p_comm=True, batch_p2p_sync=True, use_ring_exchange_p2p=False, deallocate_pipeline_outputs=True, defer_embedding_wgrad_compute=False, wgrad_deferral_limit=0, pipeline_model_parallel_split_rank=None, cpu_offloading=False, cpu_offloading_num_layers=0, _cpu_offloading_context=None, cpu_offloading_activations=True, cpu_offloading_weights=True, barrier_with_L1_time=True, num_layers=32, first_pipeline_num_layers=None, last_pipeline_num_layers=None, hidden_size=4096, num_attention_heads=32, num_query_groups=8, ffn_hidden_size=14336, kv_channels=128, hidden_dropout=0.0, attention_dropout=0.0, fp32_residual_connection=False, apply_residual_connection_post_layernorm=False, layernorm_epsilon=1e-05, layernorm_zero_centered_gamma=False, add_bias_linear=False, add_qkv_bias=False, gated_linear_unit=True, activation_func=<function silu at 0x7fefdcb155a0>, activation_func_fp8_input_store=False, num_moe_experts=None, rotary_interleaved=False, window_size=None, normalization='RMSNorm', qk_layernorm=False, test_mode=False, calculate_per_token_loss=True, init_method=<function init_method_normal.<locals>.init_ at 0x7fef560ac550>, output_layer_init_method=<function scaled_init_method_normal.<locals>.init_ at 0x7fef560ac3a0>, init_method_std=0.014, apply_query_key_layer_scaling=False, attention_softmax_in_fp32=True, bias_activation_fusion=False, masked_softmax_fusion=False, persist_layer_norm=True, memory_efficient_layer_norm=False, bias_dropout_fusion=False, apply_rope_fusion=False, recompute_granularity=None, recompute_method=None, recompute_num_layers=None, distribute_saved_activations=False, fp8=None, fp8_margin=0, fp8_interval=1, fp8_amax_history_len=1, fp8_amax_compute_algo='most_recent', fp8_wgrad=True, fp8_dot_product_attention=False, fp8_multi_head_attention=False, tp_only_amax_red=False, moe_router_load_balancing_type='aux_loss', moe_router_topk=2, moe_router_pre_softmax=False, moe_grouped_gemm=False, moe_aux_loss_coeff=0.0, moe_z_loss_coeff=None, moe_input_jitter_eps=None, moe_token_dropping=False, moe_token_dispatcher_type='allgather', moe_per_layer_logging=False, moe_expert_capacity_factor=None, moe_pad_expert_input_to_capacity=False, moe_token_drop_policy='probs', moe_layer_recompute=False, clone_scatter_output_in_embedding=True, disable_parameter_transpose_cache=False, enable_cuda_graph=False, external_cuda_graph=False, config_logger_dir='')
pretrain configTransformerConfig(tensor_model_parallel_size=4, pipeline_model_parallel_size=5, virtual_pipeline_model_parallel_size=None, sequence_parallel=False, context_parallel_size=1, expert_model_parallel_size=1, moe_extended_tp=False, perform_initialization=True, use_cpu_initialization=None, fp16=False, bf16=False, params_dtype=torch.float32, timers=None, finalize_model_grads_func=None, grad_scale_func=None, no_sync_func=None, grad_sync_func=None, param_sync_func=None, deterministic_mode=False, enable_autocast=False, autocast_dtype=torch.float32, num_microbatches_with_partial_activation_checkpoints=None, gradient_accumulation_fusion=True, async_tensor_model_parallel_allreduce=True, use_te_rng_tracker=False, tp_comm_overlap=False, tp_comm_bulk_wgrad=True, tp_comm_bulk_dgrad=True, tp_comm_overlap_ag=True, tp_comm_overlap_rs=True, tp_comm_overlap_rs_dgrad=False, tp_comm_split_ag=True, tp_comm_atomic_ag=False, tp_comm_split_rs=True, tp_comm_atomic_rs=False, cross_entropy_loss_fusion=False, tp_comm_overlap_disable_qkv=False, tp_comm_overlap_disable_fc1=False, pipeline_dtype=torch.float32, variable_seq_lengths=False, overlap_p2p_comm=False, batch_p2p_comm=True, batch_p2p_sync=True, use_ring_exchange_p2p=False, deallocate_pipeline_outputs=True, defer_embedding_wgrad_compute=False, wgrad_deferral_limit=0, pipeline_model_parallel_split_rank=None, cpu_offloading=False, cpu_offloading_num_layers=0, _cpu_offloading_context=None, cpu_offloading_activations=True, cpu_offloading_weights=True, barrier_with_L1_time=True, num_layers=32, first_pipeline_num_layers=None, last_pipeline_num_layers=None, hidden_size=4096, num_attention_heads=32, num_query_groups=8, ffn_hidden_size=14336, kv_channels=128, hidden_dropout=0.0, attention_dropout=0.0, fp32_residual_connection=False, apply_residual_connection_post_layernorm=False, layernorm_epsilon=1e-05, layernorm_zero_centered_gamma=False, add_bias_linear=False, add_qkv_bias=False, gated_linear_unit=True, activation_func=<function silu at 0x7fd3deec15a0>, activation_func_fp8_input_store=False, num_moe_experts=None, rotary_interleaved=False, window_size=None, normalization='RMSNorm', qk_layernorm=False, test_mode=False, calculate_per_token_loss=True, init_method=<function init_method_normal.<locals>.init_ at 0x7fd309fb0550>, output_layer_init_method=<function scaled_init_method_normal.<locals>.init_ at 0x7fd309fb03a0>, init_method_std=0.014, apply_query_key_layer_scaling=False, attention_softmax_in_fp32=True, bias_activation_fusion=False, masked_softmax_fusion=False, persist_layer_norm=True, memory_efficient_layer_norm=False, bias_dropout_fusion=False, apply_rope_fusion=False, recompute_granularity=None, recompute_method=None, recompute_num_layers=None, distribute_saved_activations=False, fp8=None, fp8_margin=0, fp8_interval=1, fp8_amax_history_len=1, fp8_amax_compute_algo='most_recent', fp8_wgrad=True, fp8_dot_product_attention=False, fp8_multi_head_attention=False, tp_only_amax_red=False, moe_router_load_balancing_type='aux_loss', moe_router_topk=2, moe_router_pre_softmax=False, moe_grouped_gemm=False, moe_aux_loss_coeff=0.0, moe_z_loss_coeff=None, moe_input_jitter_eps=None, moe_token_dropping=False, moe_token_dispatcher_type='allgather', moe_per_layer_logging=False, moe_expert_capacity_factor=None, moe_pad_expert_input_to_capacity=False, moe_token_drop_policy='probs', moe_layer_recompute=False, clone_scatter_output_in_embedding=True, disable_parameter_transpose_cache=False, enable_cuda_graph=False, external_cuda_graph=False, config_logger_dir='')
pretrain configTransformerConfig(tensor_model_parallel_size=4, pipeline_model_parallel_size=5, virtual_pipeline_model_parallel_size=None, sequence_parallel=False, context_parallel_size=1, expert_model_parallel_size=1, moe_extended_tp=False, perform_initialization=True, use_cpu_initialization=None, fp16=False, bf16=False, params_dtype=torch.float32, timers=None, finalize_model_grads_func=None, grad_scale_func=None, no_sync_func=None, grad_sync_func=None, param_sync_func=None, deterministic_mode=False, enable_autocast=False, autocast_dtype=torch.float32, num_microbatches_with_partial_activation_checkpoints=None, gradient_accumulation_fusion=True, async_tensor_model_parallel_allreduce=True, use_te_rng_tracker=False, tp_comm_overlap=False, tp_comm_bulk_wgrad=True, tp_comm_bulk_dgrad=True, tp_comm_overlap_ag=True, tp_comm_overlap_rs=True, tp_comm_overlap_rs_dgrad=False, tp_comm_split_ag=True, tp_comm_atomic_ag=False, tp_comm_split_rs=True, tp_comm_atomic_rs=False, cross_entropy_loss_fusion=False, tp_comm_overlap_disable_qkv=False, tp_comm_overlap_disable_fc1=False, pipeline_dtype=torch.float32, variable_seq_lengths=False, overlap_p2p_comm=False, batch_p2p_comm=True, batch_p2p_sync=True, use_ring_exchange_p2p=False, deallocate_pipeline_outputs=True, defer_embedding_wgrad_compute=False, wgrad_deferral_limit=0, pipeline_model_parallel_split_rank=None, cpu_offloading=False, cpu_offloading_num_layers=0, _cpu_offloading_context=None, cpu_offloading_activations=True, cpu_offloading_weights=True, barrier_with_L1_time=True, num_layers=32, first_pipeline_num_layers=None, last_pipeline_num_layers=None, hidden_size=4096, num_attention_heads=32, num_query_groups=8, ffn_hidden_size=14336, kv_channels=128, hidden_dropout=0.0, attention_dropout=0.0, fp32_residual_connection=False, apply_residual_connection_post_layernorm=False, layernorm_epsilon=1e-05, layernorm_zero_centered_gamma=False, add_bias_linear=False, add_qkv_bias=False, gated_linear_unit=True, activation_func=<function silu at 0x7f1e7835d5a0>, activation_func_fp8_input_store=False, num_moe_experts=None, rotary_interleaved=False, window_size=None, normalization='RMSNorm', qk_layernorm=False, test_mode=False, calculate_per_token_loss=True, init_method=<function init_method_normal.<locals>.init_ at 0x7f1da23c85e0>, output_layer_init_method=<function scaled_init_method_normal.<locals>.init_ at 0x7f1da23c8430>, init_method_std=0.014, apply_query_key_layer_scaling=False, attention_softmax_in_fp32=True, bias_activation_fusion=False, masked_softmax_fusion=False, persist_layer_norm=True, memory_efficient_layer_norm=False, bias_dropout_fusion=False, apply_rope_fusion=False, recompute_granularity=None, recompute_method=None, recompute_num_layers=None, distribute_saved_activations=False, fp8=None, fp8_margin=0, fp8_interval=1, fp8_amax_history_len=1, fp8_amax_compute_algo='most_recent', fp8_wgrad=True, fp8_dot_product_attention=False, fp8_multi_head_attention=False, tp_only_amax_red=False, moe_router_load_balancing_type='aux_loss', moe_router_topk=2, moe_router_pre_softmax=False, moe_grouped_gemm=False, moe_aux_loss_coeff=0.0, moe_z_loss_coeff=None, moe_input_jitter_eps=None, moe_token_dropping=False, moe_token_dispatcher_type='allgather', moe_per_layer_logging=False, moe_expert_capacity_factor=None, moe_pad_expert_input_to_capacity=False, moe_token_drop_policy='probs', moe_layer_recompute=False, clone_scatter_output_in_embedding=True, disable_parameter_transpose_cache=False, enable_cuda_graph=False, external_cuda_graph=False, config_logger_dir='')
rank=0, worker=0: shard_range=[pretrain-0.tar[0, 100), pretrain-0.tar[100, 200), pretrain-0.tar[200, 300), ...<2194>, pretrain-28.tar[9700, 9800), pretrain-28.tar[9800, 9900), pretrain-28.tar[9900, 10000)] sum(count)=220000
rank=0, worker=1: shard_range=[pretrain-29.tar[0, 100), pretrain-29.tar[100, 200), pretrain-29.tar[200, 300), ...<2194>, pretrain-48.tar[9700, 9800), pretrain-48.tar[9800, 9900), pretrain-48.tar[9900, 10000)] sum(count)=220000
rank=0, worker=0: shard_range=[pretrain-49.tar[0, 10000), pretrain-5.tar[0, 10000), pretrain-50.tar[0, 10000)] sum(count)=30000
rank=0, worker=1: shard_range=[pretrain-51.tar[0, 10000), pretrain-52.tar[0, 10000), pretrain-53.tar[0, 10000)] sum(count)=30000
schedules.py decoder_seq_length:1152
schedules.py decoder_seq_length:1152schedules.py decoder_seq_length:1152

schedules.py decoder_seq_length:1152
recv_tensor_shapes:[(576, 2, 4096)]
recv_tensor_shapes:[(576, 2, 4096)]
recv_tensor_shapes:[(576, 2, 4096)]
recv_tensor_shapes:[(576, 2, 4096)]
receive input_tensor shapes:[tensor([[[-0.0450, -0.0742,  0.0430,  ...,  0.0431, -0.1271, -0.0237],
         [-0.0460, -0.0754,  0.0413,  ...,  0.0433, -0.1298, -0.0250]],

        [[-0.0925, -0.0561,  0.0247,  ...,  0.0839, -0.0753,  0.0511],
         [-0.0944, -0.0573,  0.0233,  ...,  0.0836, -0.0773,  0.0496]],

        [[-0.0668, -0.0345, -0.0315,  ..., -0.0181, -0.1268,  0.0082],
         [-0.0676, -0.0359, -0.0333,  ..., -0.0186, -0.1285,  0.0063]],

        ...,

        [[-0.0326,  0.0349,  0.0684,  ...,  0.0774, -0.0247, -0.0953],
         [-0.0927, -0.0502,  0.0674,  ...,  0.0923, -0.0874, -0.0156]],

        [[-0.0393,  0.0139,  0.0608,  ..., -0.0754, -0.0400,  0.0376],
         [-0.0878, -0.0404,  0.0720,  ..., -0.0122, -0.0873,  0.0233]],

        [[-0.0078,  0.0328,  0.0514,  ..., -0.0780, -0.0144,  0.0569],
         [-0.0530, -0.0043,  0.0613,  ...,  0.0083, -0.0853,  0.0483]]],
       device='cuda:3', requires_grad=True)]
receive input_tensor shapes:[tensor([[[-0.0450, -0.0742,  0.0430,  ...,  0.0431, -0.1271, -0.0237],
         [-0.0460, -0.0754,  0.0413,  ...,  0.0433, -0.1298, -0.0250]],

        [[-0.0925, -0.0561,  0.0247,  ...,  0.0839, -0.0753,  0.0511],
         [-0.0944, -0.0573,  0.0233,  ...,  0.0836, -0.0773,  0.0496]],

        [[-0.0668, -0.0345, -0.0315,  ..., -0.0181, -0.1268,  0.0082],
         [-0.0676, -0.0359, -0.0333,  ..., -0.0186, -0.1285,  0.0063]],

        ...,

        [[-0.0326,  0.0349,  0.0684,  ...,  0.0774, -0.0247, -0.0953],
         [-0.0927, -0.0502,  0.0674,  ...,  0.0923, -0.0874, -0.0156]],

        [[-0.0393,  0.0139,  0.0608,  ..., -0.0754, -0.0400,  0.0376],
         [-0.0878, -0.0404,  0.0720,  ..., -0.0122, -0.0873,  0.0233]],

        [[-0.0078,  0.0328,  0.0514,  ..., -0.0780, -0.0144,  0.0569],
         [-0.0530, -0.0043,  0.0613,  ...,  0.0083, -0.0853,  0.0483]]],
       device='cuda:2', requires_grad=True)]
receive input_tensor shapes:[tensor([[[-0.0450, -0.0742,  0.0430,  ...,  0.0431, -0.1271, -0.0237],
         [-0.0460, -0.0754,  0.0413,  ...,  0.0433, -0.1298, -0.0250]],

        [[-0.0925, -0.0561,  0.0247,  ...,  0.0839, -0.0753,  0.0511],
         [-0.0944, -0.0573,  0.0233,  ...,  0.0836, -0.0773,  0.0496]],

        [[-0.0668, -0.0345, -0.0315,  ..., -0.0181, -0.1268,  0.0082],
         [-0.0676, -0.0359, -0.0333,  ..., -0.0186, -0.1285,  0.0063]],

        ...,

        [[-0.0326,  0.0349,  0.0684,  ...,  0.0774, -0.0247, -0.0953],
         [-0.0927, -0.0502,  0.0674,  ...,  0.0923, -0.0874, -0.0156]],

        [[-0.0393,  0.0139,  0.0608,  ..., -0.0754, -0.0400,  0.0376],
         [-0.0878, -0.0404,  0.0720,  ..., -0.0122, -0.0873,  0.0233]],

        [[-0.0078,  0.0328,  0.0514,  ..., -0.0780, -0.0144,  0.0569],
         [-0.0530, -0.0043,  0.0613,  ...,  0.0083, -0.0853,  0.0483]]],
       device='cuda:1', requires_grad=True)]
receive input_tensor shapes:[tensor([[[-0.0450, -0.0742,  0.0430,  ...,  0.0431, -0.1271, -0.0237],
         [-0.0460, -0.0754,  0.0413,  ...,  0.0433, -0.1298, -0.0250]],

        [[-0.0925, -0.0561,  0.0247,  ...,  0.0839, -0.0753,  0.0511],
         [-0.0944, -0.0573,  0.0233,  ...,  0.0836, -0.0773,  0.0496]],

        [[-0.0668, -0.0345, -0.0315,  ..., -0.0181, -0.1268,  0.0082],
         [-0.0676, -0.0359, -0.0333,  ..., -0.0186, -0.1285,  0.0063]],

        ...,

        [[-0.0326,  0.0349,  0.0684,  ...,  0.0774, -0.0247, -0.0953],
         [-0.0927, -0.0502,  0.0674,  ...,  0.0923, -0.0874, -0.0156]],

        [[-0.0393,  0.0139,  0.0608,  ..., -0.0754, -0.0400,  0.0376],
         [-0.0878, -0.0404,  0.0720,  ..., -0.0122, -0.0873,  0.0233]],

        [[-0.0078,  0.0328,  0.0514,  ..., -0.0780, -0.0144,  0.0569],
         [-0.0530, -0.0043,  0.0613,  ...,  0.0083, -0.0853,  0.0483]]],
       device='cuda:0', requires_grad=True)]
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
vision projection start! iamge embeddings size:torch.Size([576, 2, 4096])
vision projection end! iamge embeddings size:torch.Size([576, 2, 4096])
input_ids_size:torch.Size([2, 576])
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
vision projection start! iamge embeddings size:torch.Size([576, 2, 4096])
vision projection end! iamge embeddings size:torch.Size([576, 2, 4096])
input_ids_size:torch.Size([2, 576])
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
vision projection start! iamge embeddings size:torch.Size([576, 2, 4096])
vision projection end! iamge embeddings size:torch.Size([576, 2, 4096])
input_ids_size:torch.Size([2, 576])
_preprocess_data begin! iamge embeddings size:torch.Size([576, 2, 4096])
_preprocess_data begin! language_embeddings size:torch.Size([2, 576, 4096])
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
vision projection start! iamge embeddings size:torch.Size([576, 2, 4096])
vision projection end! iamge embeddings size:torch.Size([576, 2, 4096])
input_ids_size:torch.Size([2, 576])
_preprocess_data begin! iamge embeddings size:torch.Size([576, 2, 4096])
_preprocess_data begin! language_embeddings size:torch.Size([2, 576, 4096])
_preprocess_data begin! iamge embeddings size:torch.Size([576, 2, 4096])
_preprocess_data begin! language_embeddings size:torch.Size([2, 576, 4096])
_preprocess_data begin! iamge embeddings size:torch.Size([576, 2, 4096])
_preprocess_data begin! language_embeddings size:torch.Size([2, 576, 4096])
_preprocess_data end! combined_embeddings size:torch.Size([1024, 2, 4096])
111111111111
decoder begin! decoder input size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
TransformerBlock hidden states size:torch.Size([1024, 2, 4096])
_preprocess_data end! combined_embeddings size:torch.Size([1024, 2, 4096])
111111111111
_preprocess_data end! combined_embeddings size:torch.Size([1024, 2, 4096])
111111111111
_preprocess_data end! combined_embeddings size:torch.Size([1024, 2, 4096])
decoder begin! decoder input size:torch.Size([1024, 2, 4096])
111111111111
hidden state size:torch.Size([1024, 2, 4096])
TransformerBlock hidden states size:torch.Size([1024, 2, 4096])
decoder begin! decoder input size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
TransformerBlock hidden states size:torch.Size([1024, 2, 4096])
decoder begin! decoder input size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
TransformerBlock hidden states size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
recv_tensor_shapes:[(576, 2, 4096)]recv_tensor_shapes:[(576, 2, 4096)]

recv_tensor_shapes:[(576, 2, 4096)]
recv_tensor_shapes:[(576, 2, 4096)]
receive input_tensor shapes:[tensor([[[-0.0049,  0.0301,  0.0277,  ..., -0.0688, -0.0249,  0.0007],
         [-0.0096,  0.0015,  0.0018,  ..., -0.0353, -0.0229, -0.0097]],

        [[ 0.0026,  0.0575,  0.0621,  ...,  0.0389, -0.0137,  0.0153],
         [ 0.0419,  0.0668,  0.0168,  ...,  0.0436,  0.0229, -0.0247]],

        [[-0.0401,  0.0677, -0.0621,  ..., -0.1372, -0.0646, -0.0289],
         [-0.0015,  0.0399, -0.0978,  ..., -0.1011, -0.0327, -0.0218]],

        ...,

        [[-0.0223,  0.0348,  0.0663,  ...,  0.0729, -0.0142, -0.1021],
         [-0.0190,  0.0374,  0.0671,  ...,  0.0718, -0.0085, -0.0928]],

        [[-0.0353,  0.0243,  0.0637,  ..., -0.0715, -0.0302,  0.0294],
         [-0.0293,  0.0242,  0.0664,  ..., -0.0730, -0.0269,  0.0353]],

        [[-0.0031,  0.0404,  0.0543,  ..., -0.0748, -0.0120,  0.0434],
         [ 0.0006,  0.0404,  0.0555,  ..., -0.0779, -0.0099,  0.0512]]],
       device='cuda:3', requires_grad=True)]
receive input_tensor shapes:[tensor([[[-0.0049,  0.0301,  0.0277,  ..., -0.0688, -0.0249,  0.0007],
         [-0.0096,  0.0015,  0.0018,  ..., -0.0353, -0.0229, -0.0097]],

        [[ 0.0026,  0.0575,  0.0621,  ...,  0.0389, -0.0137,  0.0153],
         [ 0.0419,  0.0668,  0.0168,  ...,  0.0436,  0.0229, -0.0247]],

        [[-0.0401,  0.0677, -0.0621,  ..., -0.1372, -0.0646, -0.0289],
         [-0.0015,  0.0399, -0.0978,  ..., -0.1011, -0.0327, -0.0218]],

        ...,

        [[-0.0223,  0.0348,  0.0663,  ...,  0.0729, -0.0142, -0.1021],
         [-0.0190,  0.0374,  0.0671,  ...,  0.0718, -0.0085, -0.0928]],

        [[-0.0353,  0.0243,  0.0637,  ..., -0.0715, -0.0302,  0.0294],
         [-0.0293,  0.0242,  0.0664,  ..., -0.0730, -0.0269,  0.0353]],

        [[-0.0031,  0.0404,  0.0543,  ..., -0.0748, -0.0120,  0.0434],
         [ 0.0006,  0.0404,  0.0555,  ..., -0.0779, -0.0099,  0.0512]]],
       device='cuda:1', requires_grad=True)]
receive input_tensor shapes:[tensor([[[-0.0049,  0.0301,  0.0277,  ..., -0.0688, -0.0249,  0.0007],
         [-0.0096,  0.0015,  0.0018,  ..., -0.0353, -0.0229, -0.0097]],

        [[ 0.0026,  0.0575,  0.0621,  ...,  0.0389, -0.0137,  0.0153],
         [ 0.0419,  0.0668,  0.0168,  ...,  0.0436,  0.0229, -0.0247]],

        [[-0.0401,  0.0677, -0.0621,  ..., -0.1372, -0.0646, -0.0289],
         [-0.0015,  0.0399, -0.0978,  ..., -0.1011, -0.0327, -0.0218]],

        ...,

        [[-0.0223,  0.0348,  0.0663,  ...,  0.0729, -0.0142, -0.1021],
         [-0.0190,  0.0374,  0.0671,  ...,  0.0718, -0.0085, -0.0928]],

        [[-0.0353,  0.0243,  0.0637,  ..., -0.0715, -0.0302,  0.0294],
         [-0.0293,  0.0242,  0.0664,  ..., -0.0730, -0.0269,  0.0353]],

        [[-0.0031,  0.0404,  0.0543,  ..., -0.0748, -0.0120,  0.0434],
         [ 0.0006,  0.0404,  0.0555,  ..., -0.0779, -0.0099,  0.0512]]],
       device='cuda:2', requires_grad=True)]
receive input_tensor shapes:[tensor([[[-0.0049,  0.0301,  0.0277,  ..., -0.0688, -0.0249,  0.0007],
         [-0.0096,  0.0015,  0.0018,  ..., -0.0353, -0.0229, -0.0097]],

        [[ 0.0026,  0.0575,  0.0621,  ...,  0.0389, -0.0137,  0.0153],
         [ 0.0419,  0.0668,  0.0168,  ...,  0.0436,  0.0229, -0.0247]],

        [[-0.0401,  0.0677, -0.0621,  ..., -0.1372, -0.0646, -0.0289],
         [-0.0015,  0.0399, -0.0978,  ..., -0.1011, -0.0327, -0.0218]],

        ...,

        [[-0.0223,  0.0348,  0.0663,  ...,  0.0729, -0.0142, -0.1021],
         [-0.0190,  0.0374,  0.0671,  ...,  0.0718, -0.0085, -0.0928]],

        [[-0.0353,  0.0243,  0.0637,  ..., -0.0715, -0.0302,  0.0294],
         [-0.0293,  0.0242,  0.0664,  ..., -0.0730, -0.0269,  0.0353]],

        [[-0.0031,  0.0404,  0.0543,  ..., -0.0748, -0.0120,  0.0434],
         [ 0.0006,  0.0404,  0.0555,  ..., -0.0779, -0.0099,  0.0512]]],
       device='cuda:0', requires_grad=True)]
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])get batch end! tokens size:torch.Size([2, 576])

get batch end! tokens size:torch.Size([2, 576])get batch end! num_image_tiles:torch.Size([2])get batch end! labels size:torch.Size([2, 576])


get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! images size:torch.Size([2, 3, 336, 336])get batch end! num_image_tiles:torch.Size([2])

get batch end! num_image_tiles:torch.Size([2])vision projection start! iamge embeddings size:torch.Size([576, 2, 4096])

vision projection end! iamge embeddings size:torch.Size([576, 2, 4096])
vision projection start! iamge embeddings size:torch.Size([576, 2, 4096])
input_ids_size:torch.Size([2, 576])
vision projection end! iamge embeddings size:torch.Size([576, 2, 4096])
vision projection start! iamge embeddings size:torch.Size([576, 2, 4096])
vision projection end! iamge embeddings size:torch.Size([576, 2, 4096])
input_ids_size:torch.Size([2, 576])
input_ids_size:torch.Size([2, 576])
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
vision projection start! iamge embeddings size:torch.Size([576, 2, 4096])
vision projection end! iamge embeddings size:torch.Size([576, 2, 4096])
input_ids_size:torch.Size([2, 576])
_preprocess_data begin! iamge embeddings size:torch.Size([576, 2, 4096])_preprocess_data begin! iamge embeddings size:torch.Size([576, 2, 4096])

_preprocess_data begin! language_embeddings size:torch.Size([2, 576, 4096])
_preprocess_data begin! language_embeddings size:torch.Size([2, 576, 4096])
_preprocess_data begin! iamge embeddings size:torch.Size([576, 2, 4096])
_preprocess_data begin! language_embeddings size:torch.Size([2, 576, 4096])
_preprocess_data begin! iamge embeddings size:torch.Size([576, 2, 4096])
_preprocess_data begin! language_embeddings size:torch.Size([2, 576, 4096])
_preprocess_data end! combined_embeddings size:torch.Size([1024, 2, 4096])
111111111111
decoder begin! decoder input size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
TransformerBlock hidden states size:torch.Size([1024, 2, 4096])
_preprocess_data end! combined_embeddings size:torch.Size([1024, 2, 4096])
_preprocess_data end! combined_embeddings size:torch.Size([1024, 2, 4096])
111111111111
111111111111
decoder begin! decoder input size:torch.Size([1024, 2, 4096])
_preprocess_data end! combined_embeddings size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])decoder begin! decoder input size:torch.Size([1024, 2, 4096])

TransformerBlock hidden states size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
TransformerBlock hidden states size:torch.Size([1024, 2, 4096])
111111111111
decoder begin! decoder input size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
TransformerBlock hidden states size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
