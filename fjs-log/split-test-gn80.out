examples/multimodal/pretrain_freeze-llm.sh: line 4: activate: No such file or directory
[2024-11-27 00:45:18,053] torch.distributed.run: [WARNING] 
[2024-11-27 00:45:18,053] torch.distributed.run: [WARNING] *****************************************
[2024-11-27 00:45:18,053] torch.distributed.run: [WARNING] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
[2024-11-27 00:45:18,053] torch.distributed.run: [WARNING] *****************************************
You set `add_prefix_space`. The tokenizer needs to be converted from the slow tokenizers
You set `add_prefix_space`. The tokenizer needs to be converted from the slow tokenizers
You set `add_prefix_space`. The tokenizer needs to be converted from the slow tokenizers
You set `add_prefix_space`. The tokenizer needs to be converted from the slow tokenizers
------pipeline_parallel_model_size:5------
------world_size:20------
------total_model_size:20------
------num_pipeline_model_parallel_groups:4------
------pipeline_parallel_model_size:5------
------world_size:20------
------total_model_size:20------
------num_pipeline_model_parallel_groups:4------
------pipeline_parallel_model_size:5------
------world_size:20------
------total_model_size:20------
------num_pipeline_model_parallel_groups:4------
------pipeline_parallel_model_size:5------
------world_size:20------
------total_model_size:20------
------num_pipeline_model_parallel_groups:4------
---Rank 5---Tensor Parallel Group GPUs: [1, 1, 1, 1]
---Rank 7---Tensor Parallel Group GPUs: [3, 3, 3, 3]
---Rank 5---Pipeline Parallel Group GPUs: [1, 1, 1, 1, 1]
---Rank 6---Tensor Parallel Group GPUs: [2, 2, 2, 2]---Rank 7---Pipeline Parallel Group GPUs: [1, 1, 1, 1, 1]---Rank 4---Tensor Parallel Group GPUs: [0, 0, 0, 0]


---Rank 6---Pipeline Parallel Group GPUs: [1, 1, 1, 1, 1]
---Rank 4---Pipeline Parallel Group GPUs: [1, 1, 1, 1, 1]
[rank5]:[W init.cpp:767] Warning: nvfuser is no longer supported in torch script, use _jit_set_nvfuser_enabled is deprecated and a no-op (function operator())
[rank7]:[W init.cpp:767] Warning: nvfuser is no longer supported in torch script, use _jit_set_nvfuser_enabled is deprecated and a no-op (function operator())
[rank6]:[W init.cpp:767] Warning: nvfuser is no longer supported in torch script, use _jit_set_nvfuser_enabled is deprecated and a no-op (function operator())
[rank4]:[W init.cpp:767] Warning: nvfuser is no longer supported in torch script, use _jit_set_nvfuser_enabled is deprecated and a no-op (function operator())
WARNING:megatron.core.models.multimodal.llava_model:LLaVA model is under active development. It may be missing features and its methods may change.
WARNING:megatron.core.models.multimodal.llava_model:LLaVA model is under active development. It may be missing features and its methods may change.
WARNING:megatron.core.models.multimodal.llava_model:LLaVA model is under active development. It may be missing features and its methods may change.
WARNING:megatron.core.models.multimodal.llava_model:LLaVA model is under active development. It may be missing features and its methods may change.
 > number of parameters on (tensor, pipeline) model parallel rank (0, 1): 330882560
INFO:megatron.core.distributed.param_and_grad_buffer:Number of buckets for gradient all-reduce / reduce-scatter: 1
Params for bucket 1 (24657408 elements):
	vision_model.decoder.layers.0.mlp.linear_fc2.weight
	vision_model.decoder.layers.0.mlp.linear_fc1.bias
	vision_model.decoder.layers.1.mlp.linear_fc2.weight
	vision_model.decoder.layers.1.mlp.linear_fc1.layer_norm_bias
	vision_model.decoder.layers.1.self_attention.linear_qkv.layer_norm_bias
	vision_model.decoder.layers.1.self_attention.linear_qkv.layer_norm_weight
	vision_model.decoder.layers.1.self_attention.linear_proj.bias
	vision_model.decoder.layers.0.self_attention.linear_qkv.layer_norm_weight
	vision_model.decoder.layers.1.self_attention.linear_qkv.weight
	vision_model.decoder.layers.0.mlp.linear_fc1.layer_norm_weight
	vision_model.decoder.layers.0.self_attention.linear_qkv.bias
	vision_model.decoder.layers.0.mlp.linear_fc1.layer_norm_bias
	vision_model.decoder.layers.1.mlp.linear_fc2.bias
	vision_model.decoder.layers.1.mlp.linear_fc1.layer_norm_weight
	vision_model.decoder.layers.0.self_attention.linear_qkv.weight
	vision_model.decoder.layers.0.self_attention.linear_qkv.layer_norm_bias
	vision_model.decoder.layers.0.self_attention.linear_proj.bias
	vision_projection.encoder.linear_fc2.weight
	vision_model.decoder.layers.1.self_attention.linear_proj.weight
	vision_model.decoder.layers.0.mlp.linear_fc1.weight
	vision_projection.encoder.linear_fc1.weight
	vision_model.decoder.layers.0.self_attention.linear_proj.weight
	vision_model.decoder.layers.1.mlp.linear_fc1.weight
	vision_model.decoder.layers.0.mlp.linear_fc2.bias
	vision_model.decoder.layers.1.mlp.linear_fc1.bias
	vision_model.decoder.layers.1.self_attention.linear_qkv.bias
 > number of parameters on (tensor, pipeline) model parallel rank (1, 1): 330882560
 > number of parameters on (tensor, pipeline) model parallel rank (3, 1): 330882560
 > number of parameters on (tensor, pipeline) model parallel rank (2, 1): 330882560
[DistributedDataParallel(
  (module): LLaVAModel(
    (language_model): GPTModel(
      (embedding): LanguageModelEmbedding(
        (word_embeddings): VocabParallelEmbedding()
        (embedding_dropout): Dropout(p=0.0, inplace=False)
      )
      (rotary_pos_emb): RotaryEmbedding()
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-4): 5 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
    (vision_model): CLIPViTModel(
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-1): 2 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
    (vision_projection): MultimodalProjector(
      (encoder): MLP(
        (linear_fc1): TEColumnParallelLinear()
        (linear_fc2): TERowParallelLinear()
      )
    )
  )
)]
pretrain configTransformerConfig(tensor_model_parallel_size=4, pipeline_model_parallel_size=5, virtual_pipeline_model_parallel_size=None, sequence_parallel=False, context_parallel_size=1, expert_model_parallel_size=1, moe_extended_tp=False, perform_initialization=True, use_cpu_initialization=None, fp16=False, bf16=False, params_dtype=torch.float32, timers=None, finalize_model_grads_func=None, grad_scale_func=None, no_sync_func=None, grad_sync_func=None, param_sync_func=None, deterministic_mode=False, enable_autocast=False, autocast_dtype=torch.float32, num_microbatches_with_partial_activation_checkpoints=None, gradient_accumulation_fusion=True, async_tensor_model_parallel_allreduce=True, use_te_rng_tracker=False, tp_comm_overlap=False, tp_comm_bulk_wgrad=True, tp_comm_bulk_dgrad=True, tp_comm_overlap_ag=True, tp_comm_overlap_rs=True, tp_comm_overlap_rs_dgrad=False, tp_comm_split_ag=True, tp_comm_atomic_ag=False, tp_comm_split_rs=True, tp_comm_atomic_rs=False, cross_entropy_loss_fusion=False, tp_comm_overlap_disable_qkv=False, tp_comm_overlap_disable_fc1=False, pipeline_dtype=torch.float32, variable_seq_lengths=False, overlap_p2p_comm=False, batch_p2p_comm=True, batch_p2p_sync=True, use_ring_exchange_p2p=False, deallocate_pipeline_outputs=True, defer_embedding_wgrad_compute=False, wgrad_deferral_limit=0, pipeline_model_parallel_split_rank=None, cpu_offloading=False, cpu_offloading_num_layers=0, _cpu_offloading_context=None, cpu_offloading_activations=True, cpu_offloading_weights=True, barrier_with_L1_time=True, num_layers=32, first_pipeline_num_layers=None, last_pipeline_num_layers=None, hidden_size=4096, num_attention_heads=32, num_query_groups=8, ffn_hidden_size=14336, kv_channels=128, hidden_dropout=0.0, attention_dropout=0.0, fp32_residual_connection=False, apply_residual_connection_post_layernorm=False, layernorm_epsilon=1e-05, layernorm_zero_centered_gamma=False, add_bias_linear=False, add_qkv_bias=False, gated_linear_unit=True, activation_func=<function silu at 0x7fac9397d5a0>, activation_func_fp8_input_store=False, num_moe_experts=None, rotary_interleaved=False, window_size=None, normalization='RMSNorm', qk_layernorm=False, test_mode=False, calculate_per_token_loss=True, init_method=<function init_method_normal.<locals>.init_ at 0x7fabd8a149d0>, output_layer_init_method=<function scaled_init_method_normal.<locals>.init_ at 0x7fabd8a151b0>, init_method_std=0.014, apply_query_key_layer_scaling=False, attention_softmax_in_fp32=True, bias_activation_fusion=False, masked_softmax_fusion=False, persist_layer_norm=True, memory_efficient_layer_norm=False, bias_dropout_fusion=False, apply_rope_fusion=False, recompute_granularity=None, recompute_method=None, recompute_num_layers=None, distribute_saved_activations=False, fp8=None, fp8_margin=0, fp8_interval=1, fp8_amax_history_len=1, fp8_amax_compute_algo='most_recent', fp8_wgrad=True, fp8_dot_product_attention=False, fp8_multi_head_attention=False, tp_only_amax_red=False, moe_router_load_balancing_type='aux_loss', moe_router_topk=2, moe_router_pre_softmax=False, moe_grouped_gemm=False, moe_aux_loss_coeff=0.0, moe_z_loss_coeff=None, moe_input_jitter_eps=None, moe_token_dropping=False, moe_token_dispatcher_type='allgather', moe_per_layer_logging=False, moe_expert_capacity_factor=None, moe_pad_expert_input_to_capacity=False, moe_token_drop_policy='probs', moe_layer_recompute=False, clone_scatter_output_in_embedding=True, disable_parameter_transpose_cache=False, enable_cuda_graph=False, external_cuda_graph=False, config_logger_dir='')
[DistributedDataParallel(
  (module): LLaVAModel(
    (language_model): GPTModel(
      (embedding): LanguageModelEmbedding(
        (word_embeddings): VocabParallelEmbedding()
        (embedding_dropout): Dropout(p=0.0, inplace=False)
      )
      (rotary_pos_emb): RotaryEmbedding()
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-4): 5 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
    (vision_model): CLIPViTModel(
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-1): 2 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
    (vision_projection): MultimodalProjector(
      (encoder): MLP(
        (linear_fc1): TEColumnParallelLinear()
        (linear_fc2): TERowParallelLinear()
      )
    )
  )
)][DistributedDataParallel(
  (module): LLaVAModel(
    (language_model): GPTModel(
      (embedding): LanguageModelEmbedding(
        (word_embeddings): VocabParallelEmbedding()
        (embedding_dropout): Dropout(p=0.0, inplace=False)
      )
      (rotary_pos_emb): RotaryEmbedding()
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-4): 5 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
    (vision_model): CLIPViTModel(
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-1): 2 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
    (vision_projection): MultimodalProjector(
      (encoder): MLP(
        (linear_fc1): TEColumnParallelLinear()
        (linear_fc2): TERowParallelLinear()
      )
    )
  )
)]

[DistributedDataParallel(
  (module): LLaVAModel(
    (language_model): GPTModel(
      (embedding): LanguageModelEmbedding(
        (word_embeddings): VocabParallelEmbedding()
        (embedding_dropout): Dropout(p=0.0, inplace=False)
      )
      (rotary_pos_emb): RotaryEmbedding()
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-4): 5 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
    (vision_model): CLIPViTModel(
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-1): 2 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
    (vision_projection): MultimodalProjector(
      (encoder): MLP(
        (linear_fc1): TEColumnParallelLinear()
        (linear_fc2): TERowParallelLinear()
      )
    )
  )
)]
pretrain configTransformerConfig(tensor_model_parallel_size=4, pipeline_model_parallel_size=5, virtual_pipeline_model_parallel_size=None, sequence_parallel=False, context_parallel_size=1, expert_model_parallel_size=1, moe_extended_tp=False, perform_initialization=True, use_cpu_initialization=None, fp16=False, bf16=False, params_dtype=torch.float32, timers=None, finalize_model_grads_func=None, grad_scale_func=None, no_sync_func=None, grad_sync_func=None, param_sync_func=None, deterministic_mode=False, enable_autocast=False, autocast_dtype=torch.float32, num_microbatches_with_partial_activation_checkpoints=None, gradient_accumulation_fusion=True, async_tensor_model_parallel_allreduce=True, use_te_rng_tracker=False, tp_comm_overlap=False, tp_comm_bulk_wgrad=True, tp_comm_bulk_dgrad=True, tp_comm_overlap_ag=True, tp_comm_overlap_rs=True, tp_comm_overlap_rs_dgrad=False, tp_comm_split_ag=True, tp_comm_atomic_ag=False, tp_comm_split_rs=True, tp_comm_atomic_rs=False, cross_entropy_loss_fusion=False, tp_comm_overlap_disable_qkv=False, tp_comm_overlap_disable_fc1=False, pipeline_dtype=torch.float32, variable_seq_lengths=False, overlap_p2p_comm=False, batch_p2p_comm=True, batch_p2p_sync=True, use_ring_exchange_p2p=False, deallocate_pipeline_outputs=True, defer_embedding_wgrad_compute=False, wgrad_deferral_limit=0, pipeline_model_parallel_split_rank=None, cpu_offloading=False, cpu_offloading_num_layers=0, _cpu_offloading_context=None, cpu_offloading_activations=True, cpu_offloading_weights=True, barrier_with_L1_time=True, num_layers=32, first_pipeline_num_layers=None, last_pipeline_num_layers=None, hidden_size=4096, num_attention_heads=32, num_query_groups=8, ffn_hidden_size=14336, kv_channels=128, hidden_dropout=0.0, attention_dropout=0.0, fp32_residual_connection=False, apply_residual_connection_post_layernorm=False, layernorm_epsilon=1e-05, layernorm_zero_centered_gamma=False, add_bias_linear=False, add_qkv_bias=False, gated_linear_unit=True, activation_func=<function silu at 0x7fc8f89915a0>, activation_func_fp8_input_store=False, num_moe_experts=None, rotary_interleaved=False, window_size=None, normalization='RMSNorm', qk_layernorm=False, test_mode=False, calculate_per_token_loss=True, init_method=<function init_method_normal.<locals>.init_ at 0x7fc83448c940>, output_layer_init_method=<function scaled_init_method_normal.<locals>.init_ at 0x7fc83448d120>, init_method_std=0.014, apply_query_key_layer_scaling=False, attention_softmax_in_fp32=True, bias_activation_fusion=False, masked_softmax_fusion=False, persist_layer_norm=True, memory_efficient_layer_norm=False, bias_dropout_fusion=False, apply_rope_fusion=False, recompute_granularity=None, recompute_method=None, recompute_num_layers=None, distribute_saved_activations=False, fp8=None, fp8_margin=0, fp8_interval=1, fp8_amax_history_len=1, fp8_amax_compute_algo='most_recent', fp8_wgrad=True, fp8_dot_product_attention=False, fp8_multi_head_attention=False, tp_only_amax_red=False, moe_router_load_balancing_type='aux_loss', moe_router_topk=2, moe_router_pre_softmax=False, moe_grouped_gemm=False, moe_aux_loss_coeff=0.0, moe_z_loss_coeff=None, moe_input_jitter_eps=None, moe_token_dropping=False, moe_token_dispatcher_type='allgather', moe_per_layer_logging=False, moe_expert_capacity_factor=None, moe_pad_expert_input_to_capacity=False, moe_token_drop_policy='probs', moe_layer_recompute=False, clone_scatter_output_in_embedding=True, disable_parameter_transpose_cache=False, enable_cuda_graph=False, external_cuda_graph=False, config_logger_dir='')pretrain configTransformerConfig(tensor_model_parallel_size=4, pipeline_model_parallel_size=5, virtual_pipeline_model_parallel_size=None, sequence_parallel=False, context_parallel_size=1, expert_model_parallel_size=1, moe_extended_tp=False, perform_initialization=True, use_cpu_initialization=None, fp16=False, bf16=False, params_dtype=torch.float32, timers=None, finalize_model_grads_func=None, grad_scale_func=None, no_sync_func=None, grad_sync_func=None, param_sync_func=None, deterministic_mode=False, enable_autocast=False, autocast_dtype=torch.float32, num_microbatches_with_partial_activation_checkpoints=None, gradient_accumulation_fusion=True, async_tensor_model_parallel_allreduce=True, use_te_rng_tracker=False, tp_comm_overlap=False, tp_comm_bulk_wgrad=True, tp_comm_bulk_dgrad=True, tp_comm_overlap_ag=True, tp_comm_overlap_rs=True, tp_comm_overlap_rs_dgrad=False, tp_comm_split_ag=True, tp_comm_atomic_ag=False, tp_comm_split_rs=True, tp_comm_atomic_rs=False, cross_entropy_loss_fusion=False, tp_comm_overlap_disable_qkv=False, tp_comm_overlap_disable_fc1=False, pipeline_dtype=torch.float32, variable_seq_lengths=False, overlap_p2p_comm=False, batch_p2p_comm=True, batch_p2p_sync=True, use_ring_exchange_p2p=False, deallocate_pipeline_outputs=True, defer_embedding_wgrad_compute=False, wgrad_deferral_limit=0, pipeline_model_parallel_split_rank=None, cpu_offloading=False, cpu_offloading_num_layers=0, _cpu_offloading_context=None, cpu_offloading_activations=True, cpu_offloading_weights=True, barrier_with_L1_time=True, num_layers=32, first_pipeline_num_layers=None, last_pipeline_num_layers=None, hidden_size=4096, num_attention_heads=32, num_query_groups=8, ffn_hidden_size=14336, kv_channels=128, hidden_dropout=0.0, attention_dropout=0.0, fp32_residual_connection=False, apply_residual_connection_post_layernorm=False, layernorm_epsilon=1e-05, layernorm_zero_centered_gamma=False, add_bias_linear=False, add_qkv_bias=False, gated_linear_unit=True, activation_func=<function silu at 0x7f4f23b3d5a0>, activation_func_fp8_input_store=False, num_moe_experts=None, rotary_interleaved=False, window_size=None, normalization='RMSNorm', qk_layernorm=False, test_mode=False, calculate_per_token_loss=True, init_method=<function init_method_normal.<locals>.init_ at 0x7f4e623a4940>, output_layer_init_method=<function scaled_init_method_normal.<locals>.init_ at 0x7f4e623a5120>, init_method_std=0.014, apply_query_key_layer_scaling=False, attention_softmax_in_fp32=True, bias_activation_fusion=False, masked_softmax_fusion=False, persist_layer_norm=True, memory_efficient_layer_norm=False, bias_dropout_fusion=False, apply_rope_fusion=False, recompute_granularity=None, recompute_method=None, recompute_num_layers=None, distribute_saved_activations=False, fp8=None, fp8_margin=0, fp8_interval=1, fp8_amax_history_len=1, fp8_amax_compute_algo='most_recent', fp8_wgrad=True, fp8_dot_product_attention=False, fp8_multi_head_attention=False, tp_only_amax_red=False, moe_router_load_balancing_type='aux_loss', moe_router_topk=2, moe_router_pre_softmax=False, moe_grouped_gemm=False, moe_aux_loss_coeff=0.0, moe_z_loss_coeff=None, moe_input_jitter_eps=None, moe_token_dropping=False, moe_token_dispatcher_type='allgather', moe_per_layer_logging=False, moe_expert_capacity_factor=None, moe_pad_expert_input_to_capacity=False, moe_token_drop_policy='probs', moe_layer_recompute=False, clone_scatter_output_in_embedding=True, disable_parameter_transpose_cache=False, enable_cuda_graph=False, external_cuda_graph=False, config_logger_dir='')

pretrain configTransformerConfig(tensor_model_parallel_size=4, pipeline_model_parallel_size=5, virtual_pipeline_model_parallel_size=None, sequence_parallel=False, context_parallel_size=1, expert_model_parallel_size=1, moe_extended_tp=False, perform_initialization=True, use_cpu_initialization=None, fp16=False, bf16=False, params_dtype=torch.float32, timers=None, finalize_model_grads_func=None, grad_scale_func=None, no_sync_func=None, grad_sync_func=None, param_sync_func=None, deterministic_mode=False, enable_autocast=False, autocast_dtype=torch.float32, num_microbatches_with_partial_activation_checkpoints=None, gradient_accumulation_fusion=True, async_tensor_model_parallel_allreduce=True, use_te_rng_tracker=False, tp_comm_overlap=False, tp_comm_bulk_wgrad=True, tp_comm_bulk_dgrad=True, tp_comm_overlap_ag=True, tp_comm_overlap_rs=True, tp_comm_overlap_rs_dgrad=False, tp_comm_split_ag=True, tp_comm_atomic_ag=False, tp_comm_split_rs=True, tp_comm_atomic_rs=False, cross_entropy_loss_fusion=False, tp_comm_overlap_disable_qkv=False, tp_comm_overlap_disable_fc1=False, pipeline_dtype=torch.float32, variable_seq_lengths=False, overlap_p2p_comm=False, batch_p2p_comm=True, batch_p2p_sync=True, use_ring_exchange_p2p=False, deallocate_pipeline_outputs=True, defer_embedding_wgrad_compute=False, wgrad_deferral_limit=0, pipeline_model_parallel_split_rank=None, cpu_offloading=False, cpu_offloading_num_layers=0, _cpu_offloading_context=None, cpu_offloading_activations=True, cpu_offloading_weights=True, barrier_with_L1_time=True, num_layers=32, first_pipeline_num_layers=None, last_pipeline_num_layers=None, hidden_size=4096, num_attention_heads=32, num_query_groups=8, ffn_hidden_size=14336, kv_channels=128, hidden_dropout=0.0, attention_dropout=0.0, fp32_residual_connection=False, apply_residual_connection_post_layernorm=False, layernorm_epsilon=1e-05, layernorm_zero_centered_gamma=False, add_bias_linear=False, add_qkv_bias=False, gated_linear_unit=True, activation_func=<function silu at 0x7f1741ca95a0>, activation_func_fp8_input_store=False, num_moe_experts=None, rotary_interleaved=False, window_size=None, normalization='RMSNorm', qk_layernorm=False, test_mode=False, calculate_per_token_loss=True, init_method=<function init_method_normal.<locals>.init_ at 0x7f1661cac940>, output_layer_init_method=<function scaled_init_method_normal.<locals>.init_ at 0x7f1661cad120>, init_method_std=0.014, apply_query_key_layer_scaling=False, attention_softmax_in_fp32=True, bias_activation_fusion=False, masked_softmax_fusion=False, persist_layer_norm=True, memory_efficient_layer_norm=False, bias_dropout_fusion=False, apply_rope_fusion=False, recompute_granularity=None, recompute_method=None, recompute_num_layers=None, distribute_saved_activations=False, fp8=None, fp8_margin=0, fp8_interval=1, fp8_amax_history_len=1, fp8_amax_compute_algo='most_recent', fp8_wgrad=True, fp8_dot_product_attention=False, fp8_multi_head_attention=False, tp_only_amax_red=False, moe_router_load_balancing_type='aux_loss', moe_router_topk=2, moe_router_pre_softmax=False, moe_grouped_gemm=False, moe_aux_loss_coeff=0.0, moe_z_loss_coeff=None, moe_input_jitter_eps=None, moe_token_dropping=False, moe_token_dispatcher_type='allgather', moe_per_layer_logging=False, moe_expert_capacity_factor=None, moe_pad_expert_input_to_capacity=False, moe_token_drop_policy='probs', moe_layer_recompute=False, clone_scatter_output_in_embedding=True, disable_parameter_transpose_cache=False, enable_cuda_graph=False, external_cuda_graph=False, config_logger_dir='')
rank=0, worker=0: shard_range=[pretrain-0.tar[0, 100), pretrain-0.tar[100, 200), pretrain-0.tar[200, 300), ...<2194>, pretrain-28.tar[9700, 9800), pretrain-28.tar[9800, 9900), pretrain-28.tar[9900, 10000)] sum(count)=220000
rank=0, worker=1: shard_range=[pretrain-29.tar[0, 100), pretrain-29.tar[100, 200), pretrain-29.tar[200, 300), ...<2194>, pretrain-48.tar[9700, 9800), pretrain-48.tar[9800, 9900), pretrain-48.tar[9900, 10000)] sum(count)=220000
rank=0, worker=0: shard_range=[pretrain-49.tar[0, 10000), pretrain-5.tar[0, 10000), pretrain-50.tar[0, 10000)] sum(count)=30000
rank=0, worker=1: shard_range=[pretrain-51.tar[0, 10000), pretrain-52.tar[0, 10000), pretrain-53.tar[0, 10000)] sum(count)=30000
schedules.py decoder_seq_length:1152schedules.py decoder_seq_length:1152

schedules.py decoder_seq_length:1152start layer:23start layer:23


start layer:23
start layer:31start layer:31

start layer:31
schedules.py decoder_seq_length:1152
start layer:23
start layer:31
c:[(576, 2, 1024)]
c:[(576, 2, 1024)]
c:[(576, 2, 1024)]
c:[(576, 2, 1024)]
receive input_tensor shapes:[tensor([[[ 0.9024,  0.3216,  1.3491,  ..., -0.0598, -0.0091, -0.8661],
         [ 0.8982,  0.3292,  1.2953,  ..., -0.0455, -0.0184, -0.8750]],

        [[ 1.0483,  0.2995,  1.3656,  ..., -0.0642,  0.6467, -0.7745],
         [ 1.0452,  0.3058,  1.3090,  ..., -0.0531,  0.6373, -0.7822]],

        [[ 1.3146, -0.2833,  0.2837,  ...,  0.6206,  0.2389, -0.7314],
         [ 1.3097, -0.2755,  0.2301,  ...,  0.6330,  0.2280, -0.7420]],

        ...,

        [[ 0.0796,  0.1921, -1.0367,  ..., -0.5067, -0.3023, -0.0307],
         [ 0.8398, -0.1061,  0.0569,  ..., -0.1806,  0.7259, -0.4098]],

        [[ 0.4497,  1.3542, -0.6105,  ..., -0.9794, -0.6464,  1.5262],
         [ 1.0714,  0.5734,  0.2587,  ..., -0.4870,  0.4711,  0.5552]],

        [[-0.2679, -0.4073,  0.2896,  ...,  1.9228,  1.8271,  0.1804],
         [ 0.6758, -0.5271,  0.8684,  ...,  1.1543,  1.9640, -0.3955]]],
       device='cuda:3', requires_grad=True)]
receive input_tensor shapes:[tensor([[[ 0.9024,  0.3216,  1.3491,  ..., -0.0598, -0.0091, -0.8661],
         [ 0.8982,  0.3292,  1.2953,  ..., -0.0455, -0.0184, -0.8750]],

        [[ 1.0483,  0.2995,  1.3656,  ..., -0.0642,  0.6467, -0.7745],
         [ 1.0452,  0.3058,  1.3090,  ..., -0.0531,  0.6373, -0.7822]],

        [[ 1.3146, -0.2833,  0.2837,  ...,  0.6206,  0.2389, -0.7314],
         [ 1.3097, -0.2755,  0.2301,  ...,  0.6330,  0.2280, -0.7420]],

        ...,

        [[ 0.0796,  0.1921, -1.0367,  ..., -0.5067, -0.3023, -0.0307],
         [ 0.8398, -0.1061,  0.0569,  ..., -0.1806,  0.7259, -0.4098]],

        [[ 0.4497,  1.3542, -0.6105,  ..., -0.9794, -0.6464,  1.5262],
         [ 1.0714,  0.5734,  0.2587,  ..., -0.4870,  0.4711,  0.5552]],

        [[-0.2679, -0.4073,  0.2896,  ...,  1.9228,  1.8271,  0.1804],
         [ 0.6758, -0.5271,  0.8684,  ...,  1.1543,  1.9640, -0.3955]]],
       device='cuda:2', requires_grad=True)]
receive input_tensor shapes:[tensor([[[ 0.9024,  0.3216,  1.3491,  ..., -0.0598, -0.0091, -0.8661],
         [ 0.8982,  0.3292,  1.2953,  ..., -0.0455, -0.0184, -0.8750]],

        [[ 1.0483,  0.2995,  1.3656,  ..., -0.0642,  0.6467, -0.7745],
         [ 1.0452,  0.3058,  1.3090,  ..., -0.0531,  0.6373, -0.7822]],

        [[ 1.3146, -0.2833,  0.2837,  ...,  0.6206,  0.2389, -0.7314],
         [ 1.3097, -0.2755,  0.2301,  ...,  0.6330,  0.2280, -0.7420]],

        ...,

        [[ 0.0796,  0.1921, -1.0367,  ..., -0.5067, -0.3023, -0.0307],
         [ 0.8398, -0.1061,  0.0569,  ..., -0.1806,  0.7259, -0.4098]],

        [[ 0.4497,  1.3542, -0.6105,  ..., -0.9794, -0.6464,  1.5262],
         [ 1.0714,  0.5734,  0.2587,  ..., -0.4870,  0.4711,  0.5552]],

        [[-0.2679, -0.4073,  0.2896,  ...,  1.9228,  1.8271,  0.1804],
         [ 0.6758, -0.5271,  0.8684,  ...,  1.1543,  1.9640, -0.3955]]],
       device='cuda:1', requires_grad=True)]
receive input_tensor shapes:[tensor([[[ 0.9024,  0.3216,  1.3491,  ..., -0.0598, -0.0091, -0.8661],
         [ 0.8982,  0.3292,  1.2953,  ..., -0.0455, -0.0184, -0.8750]],

        [[ 1.0483,  0.2995,  1.3656,  ..., -0.0642,  0.6467, -0.7745],
         [ 1.0452,  0.3058,  1.3090,  ..., -0.0531,  0.6373, -0.7822]],

        [[ 1.3146, -0.2833,  0.2837,  ...,  0.6206,  0.2389, -0.7314],
         [ 1.3097, -0.2755,  0.2301,  ...,  0.6330,  0.2280, -0.7420]],

        ...,

        [[ 0.0796,  0.1921, -1.0367,  ..., -0.5067, -0.3023, -0.0307],
         [ 0.8398, -0.1061,  0.0569,  ..., -0.1806,  0.7259, -0.4098]],

        [[ 0.4497,  1.3542, -0.6105,  ..., -0.9794, -0.6464,  1.5262],
         [ 1.0714,  0.5734,  0.2587,  ..., -0.4870,  0.4711,  0.5552]],

        [[-0.2679, -0.4073,  0.2896,  ...,  1.9228,  1.8271,  0.1804],
         [ 0.6758, -0.5271,  0.8684,  ...,  1.1543,  1.9640, -0.3955]]],
       device='cuda:0', requires_grad=True)]
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
333 self.input tensor size:torch.Size([576, 2, 1024])
444444444444
111111 hidden states:torch.Size([576, 2, 1024])
111111 input tensor:torch.Size([576, 2, 1024])
222222 tensor:torch.Size([576, 2, 1024])
333 self.input tensor size:torch.Size([576, 2, 1024])
444444444444
111111 hidden states:torch.Size([576, 2, 1024])
111111 input tensor:torch.Size([576, 2, 1024])
222222 tensor:torch.Size([576, 2, 1024])
Traceback (most recent call last):
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/examples/multimodal/train.py", line 463, in <module>
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
    pretrain(
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/training/training.py", line 371, in pretrain
333 self.input tensor size:torch.Size([576, 2, 1024])
444444444444
111111 hidden states:torch.Size([576, 2, 1024])
111111 input tensor:torch.Size([576, 2, 1024])
222222 tensor:torch.Size([576, 2, 1024])
get batch end! tokens size:torch.Size([2, 576])
    get batch end! labels size:torch.Size([2, 576])iteration, num_floating_point_operations_so_far = train( # 调用 1172 行进行训练

  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/training/training.py", line 1342, in train
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
333 self.input tensor size:torch.Size([576, 2, 1024])
444444444444
111111 hidden states:torch.Size([576, 2, 1024])
111111 input tensor:torch.Size([576, 2, 1024])
222222 tensor:torch.Size([576, 2, 1024])
Traceback (most recent call last):
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/examples/multimodal/train.py", line 463, in <module>
    train_step(forward_step_func, # 调用 805 行
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/training/training.py", line 818, in train_step
Traceback (most recent call last):
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/examples/multimodal/train.py", line 463, in <module>
    losses_reduced = forward_backward_func( # schedules.py 1278 行 forward_backward_pipelining_without_interleaving
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/pipeline_parallel/schedules.py", line 1483, in forward_backward_pipelining_without_interleaving
    pretrain(
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/training/training.py", line 371, in pretrain
    iteration, num_floating_point_operations_so_far = train( # 调用 1172 行进行训练
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/training/training.py", line 1342, in train
    pretrain(
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/training/training.py", line 371, in pretrain
    output_tensor, num_tokens = forward_step(
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/pipeline_parallel/schedules.py", line 273, in forward_step
        iteration, num_floating_point_operations_so_far = train( # 调用 1172 行进行训练train_step(forward_step_func, # 调用 805 行

      File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/training/training.py", line 818, in train_step
output_tensor, loss_func = forward_step_func(data_iterator, model)  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/training/training.py", line 1342, in train

  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/examples/multimodal/train.py", line 375, in forward_step
    output_tensor, loss_mask = model(images, tokens, position_ids, attention_mask, labels, loss_mask, num_image_tiles=num_image_tiles)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
Traceback (most recent call last):
    losses_reduced = forward_backward_func( # schedules.py 1278 行 forward_backward_pipelining_without_interleaving
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/examples/multimodal/train.py", line 463, in <module>
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/pipeline_parallel/schedules.py", line 1483, in forward_backward_pipelining_without_interleaving
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    train_step(forward_step_func, # 调用 805 行
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/training/training.py", line 818, in train_step
    output_tensor, num_tokens = forward_step(
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/pipeline_parallel/schedules.py", line 273, in forward_step
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/distributed/distributed_data_parallel.py", line 308, in forward
    losses_reduced = forward_backward_func( # schedules.py 1278 行 forward_backward_pipelining_without_interleaving
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/pipeline_parallel/schedules.py", line 1483, in forward_backward_pipelining_without_interleaving
    pretrain(
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/training/training.py", line 371, in pretrain
    output_tensor, loss_func = forward_step_func(data_iterator, model)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/examples/multimodal/train.py", line 375, in forward_step
    iteration, num_floating_point_operations_so_far = train( # 调用 1172 行进行训练
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/training/training.py", line 1342, in train
    return self.module(*inputs, **kwargs)
      File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
output_tensor, loss_mask = model(images, tokens, position_ids, attention_mask, labels, loss_mask, num_image_tiles=num_image_tiles)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    output_tensor, num_tokens = forward_step(
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/pipeline_parallel/schedules.py", line 273, in forward_step
    output_tensor, loss_func = forward_step_func(data_iterator, model)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/examples/multimodal/train.py", line 375, in forward_step
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    train_step(forward_step_func, # 调用 805 行
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/training/training.py", line 818, in train_step
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    output_tensor, loss_mask = model(images, tokens, position_ids, attention_mask, labels, loss_mask, num_image_tiles=num_image_tiles)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/models/multimodal/llava_model.py", line 501, in forward
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/distributed/distributed_data_parallel.py", line 308, in forward
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    losses_reduced = forward_backward_func( # schedules.py 1278 行 forward_backward_pipelining_without_interleaving
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/pipeline_parallel/schedules.py", line 1483, in forward_backward_pipelining_without_interleaving
    image_embeddings = self.vision_model(images=None, hidden_state=self.encoder_hidden_state) # 没有头就输入 encoder_hidden_state(这里是 None 吧，llm 怎么处理输入的呢)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/distributed/distributed_data_parallel.py", line 308, in forward
    return self.module(*inputs, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self.module(*inputs, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    output_tensor, num_tokens = forward_step(
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/pipeline_parallel/schedules.py", line 273, in forward_step
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    output_tensor, loss_func = forward_step_func(data_iterator, model)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/examples/multimodal/train.py", line 375, in forward_step
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/models/vision/clip_vit_model.py", line 165, in forward
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/models/multimodal/llava_model.py", line 501, in forward
    output_tensor, loss_mask = model(images, tokens, position_ids, attention_mask, labels, loss_mask, num_image_tiles=num_image_tiles)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    x = self.decoder(x, attention_mask)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/models/multimodal/llava_model.py", line 501, in forward
    image_embeddings = self.vision_model(images=None, hidden_state=self.encoder_hidden_state) # 没有头就输入 encoder_hidden_state(这里是 None 吧，llm 怎么处理输入的呢)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    image_embeddings = self.vision_model(images=None, hidden_state=self.encoder_hidden_state) # 没有头就输入 encoder_hidden_state(这里是 None 吧，llm 怎么处理输入的呢)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return forward_call(*args, **kwargs)
      File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/distributed/distributed_data_parallel.py", line 308, in forward
return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/transformer/transformer_block.py", line 430, in forward
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/models/vision/clip_vit_model.py", line 165, in forward
    return self.module(*inputs, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    x = self.decoder(x, attention_mask)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/models/vision/clip_vit_model.py", line 165, in forward
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/models/multimodal/llava_model.py", line 501, in forward
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/transformer/transformer_block.py", line 430, in forward
    x = self.decoder(x, attention_mask)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
      File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
image_embeddings = self.vision_model(images=None, hidden_state=self.encoder_hidden_state) # 没有头就输入 encoder_hidden_state(这里是 None 吧，llm 怎么处理输入的呢)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/transformer/transformer_block.py", line 430, in forward
    return self._call_impl(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/models/vision/clip_vit_model.py", line 165, in forward
    x = self.decoder(x, attention_mask)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
        print(f"TransformerBlock hidden states size:{hidden_states.size()}")    return self._call_impl(*args, **kwargs)
print(f"TransformerBlock hidden states size:{hidden_states.size()}")    

print(f"TransformerBlock hidden states size:{hidden_states.size()}")  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl

AttributeError: 'NoneType' object has no attribute 'size'AttributeError: 'NoneType' object has no attribute 'size'AttributeError: 'NoneType' object has no attribute 'size'


    return forward_call(*args, **kwargs)
  File "/gf3/home/fjs/project/MLLM/Megatron-LM-core_r0.9.0/megatron/core/transformer/transformer_block.py", line 430, in forward
    print(f"TransformerBlock hidden states size:{hidden_states.size()}")
AttributeError: 'NoneType' object has no attribute 'size'
[2024-11-27 00:45:53,111] torch.distributed.elastic.multiprocessing.api: [WARNING] Sending process 25712 closing signal SIGTERM
[2024-11-27 00:45:53,426] torch.distributed.elastic.multiprocessing.api: [ERROR] failed (exitcode: 1) local_rank: 1 (pid: 25713) of binary: /gf3/home/fjs/anaconda3/envs/megatron/bin/python3.10
Traceback (most recent call last):
  File "/gf3/home/fjs/anaconda3/envs/megatron/bin/torchrun", line 8, in <module>
    sys.exit(main())
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/distributed/elastic/multiprocessing/errors/__init__.py", line 347, in wrapper
    return f(*args, **kwargs)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/distributed/run.py", line 812, in main
    run(args)
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/distributed/run.py", line 803, in run
    elastic_launch(
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/distributed/launcher/api.py", line 135, in __call__
    return launch_agent(self._config, self._entrypoint, list(args))
  File "/gf3/home/fjs/anaconda3/envs/megatron/lib/python3.10/site-packages/torch/distributed/launcher/api.py", line 268, in launch_agent
    raise ChildFailedError(
torch.distributed.elastic.multiprocessing.errors.ChildFailedError: 
============================================================
examples/multimodal/train.py FAILED
------------------------------------------------------------
Failures:
[1]:
  time      : 2024-11-27_00:45:53
  host      : gn80
  rank      : 6 (local_rank: 2)
  exitcode  : 1 (pid: 25714)
  error_file: <N/A>
  traceback : To enable traceback see: https://pytorch.org/docs/stable/elastic/errors.html
[2]:
  time      : 2024-11-27_00:45:53
  host      : gn80
  rank      : 7 (local_rank: 3)
  exitcode  : 1 (pid: 25715)
  error_file: <N/A>
  traceback : To enable traceback see: https://pytorch.org/docs/stable/elastic/errors.html
------------------------------------------------------------
Root Cause (first observed failure):
[0]:
  time      : 2024-11-27_00:45:53
  host      : gn80
  rank      : 5 (local_rank: 1)
  exitcode  : 1 (pid: 25713)
  error_file: <N/A>
  traceback : To enable traceback see: https://pytorch.org/docs/stable/elastic/errors.html
============================================================
