examples/multimodal/pretrain_freeze-llm.sh: line 4: activate: No such file or directory
[2024-11-25 23:08:32,939] torch.distributed.run: [WARNING] 
[2024-11-25 23:08:32,939] torch.distributed.run: [WARNING] *****************************************
[2024-11-25 23:08:32,939] torch.distributed.run: [WARNING] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
[2024-11-25 23:08:32,939] torch.distributed.run: [WARNING] *****************************************
You set `add_prefix_space`. The tokenizer needs to be converted from the slow tokenizers
You set `add_prefix_space`. The tokenizer needs to be converted from the slow tokenizers
You set `add_prefix_space`. The tokenizer needs to be converted from the slow tokenizers
You set `add_prefix_space`. The tokenizer needs to be converted from the slow tokenizers
------pipeline_parallel_model_size:5------
------world_size:20------
------total_model_size:20------
------num_pipeline_model_parallel_groups:4------
------pipeline_parallel_model_size:5------
------world_size:20------
------total_model_size:20------
------num_pipeline_model_parallel_groups:4------
------pipeline_parallel_model_size:5------
------world_size:20------
------total_model_size:20------
------num_pipeline_model_parallel_groups:4------
------pipeline_parallel_model_size:5------
------world_size:20------
------total_model_size:20------
------num_pipeline_model_parallel_groups:4------
---Rank 11---Tensor Parallel Group GPUs: [3, 3, 3, 3]
---Rank 8---Tensor Parallel Group GPUs: [0, 0, 0, 0]---Rank 9---Tensor Parallel Group GPUs: [1, 1, 1, 1]---Rank 11---Pipeline Parallel Group GPUs: [2, 2, 2, 2, 2]


---Rank 8---Pipeline Parallel Group GPUs: [2, 2, 2, 2, 2]---Rank 9---Pipeline Parallel Group GPUs: [2, 2, 2, 2, 2]

[rank11]:[W init.cpp:767] Warning: nvfuser is no longer supported in torch script, use _jit_set_nvfuser_enabled is deprecated and a no-op (function operator())
[rank8]:[W init.cpp:767] Warning: nvfuser is no longer supported in torch script, use _jit_set_nvfuser_enabled is deprecated and a no-op (function operator())
---Rank 10---Tensor Parallel Group GPUs: [2, 2, 2, 2][rank9]:[W init.cpp:767] Warning: nvfuser is no longer supported in torch script, use _jit_set_nvfuser_enabled is deprecated and a no-op (function operator())

---Rank 10---Pipeline Parallel Group GPUs: [2, 2, 2, 2, 2]
[rank10]:[W init.cpp:767] Warning: nvfuser is no longer supported in torch script, use _jit_set_nvfuser_enabled is deprecated and a no-op (function operator())
WARNING:megatron.core.models.multimodal.llava_model:LLaVA model is under active development. It may be missing features and its methods may change.
WARNING:megatron.core.models.multimodal.llava_model:LLaVA model is under active development. It may be missing features and its methods may change.
WARNING:megatron.core.models.multimodal.llava_model:LLaVA model is under active development. It may be missing features and its methods may change.
WARNING:megatron.core.models.multimodal.llava_model:LLaVA model is under active development. It may be missing features and its methods may change.
 > number of parameters on (tensor, pipeline) model parallel rank (2, 2): 436273152
 > number of parameters on (tensor, pipeline) model parallel rank (3, 2): 436273152
 > number of parameters on (tensor, pipeline) model parallel rank (0, 2): 436273152
 > number of parameters on (tensor, pipeline) model parallel rank (1, 2): 436273152
[DistributedDataParallel(
  (module): LLaVAModel(
    (language_model): GPTModel(
      (rotary_pos_emb): RotaryEmbedding()
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-7): 8 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
  )
)]
[DistributedDataParallel(
  (module): LLaVAModel(
    (language_model): GPTModel(
      (rotary_pos_emb): RotaryEmbedding()
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-7): 8 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
  )
)]
pretrain configTransformerConfig(tensor_model_parallel_size=4, pipeline_model_parallel_size=5, virtual_pipeline_model_parallel_size=None, sequence_parallel=False, context_parallel_size=1, expert_model_parallel_size=1, moe_extended_tp=False, perform_initialization=True, use_cpu_initialization=None, fp16=False, bf16=False, params_dtype=torch.float32, timers=None, finalize_model_grads_func=None, grad_scale_func=None, no_sync_func=None, grad_sync_func=None, param_sync_func=None, deterministic_mode=False, enable_autocast=False, autocast_dtype=torch.float32, num_microbatches_with_partial_activation_checkpoints=None, gradient_accumulation_fusion=True, async_tensor_model_parallel_allreduce=True, use_te_rng_tracker=False, tp_comm_overlap=False, tp_comm_bulk_wgrad=True, tp_comm_bulk_dgrad=True, tp_comm_overlap_ag=True, tp_comm_overlap_rs=True, tp_comm_overlap_rs_dgrad=False, tp_comm_split_ag=True, tp_comm_atomic_ag=False, tp_comm_split_rs=True, tp_comm_atomic_rs=False, cross_entropy_loss_fusion=False, tp_comm_overlap_disable_qkv=False, tp_comm_overlap_disable_fc1=False, pipeline_dtype=torch.float32, variable_seq_lengths=False, overlap_p2p_comm=False, batch_p2p_comm=True, batch_p2p_sync=True, use_ring_exchange_p2p=False, deallocate_pipeline_outputs=True, defer_embedding_wgrad_compute=False, wgrad_deferral_limit=0, pipeline_model_parallel_split_rank=None, cpu_offloading=False, cpu_offloading_num_layers=0, _cpu_offloading_context=None, cpu_offloading_activations=True, cpu_offloading_weights=True, barrier_with_L1_time=True, num_layers=32, first_pipeline_num_layers=None, last_pipeline_num_layers=None, hidden_size=4096, num_attention_heads=32, num_query_groups=8, ffn_hidden_size=14336, kv_channels=128, hidden_dropout=0.0, attention_dropout=0.0, fp32_residual_connection=False, apply_residual_connection_post_layernorm=False, layernorm_epsilon=1e-05, layernorm_zero_centered_gamma=False, add_bias_linear=False, add_qkv_bias=False, gated_linear_unit=True, activation_func=<function silu at 0x7f14c8b595a0>, activation_func_fp8_input_store=False, num_moe_experts=None, rotary_interleaved=False, window_size=None, normalization='RMSNorm', qk_layernorm=False, test_mode=False, calculate_per_token_loss=True, init_method=<function init_method_normal.<locals>.init_ at 0x7f14027dc550>, output_layer_init_method=<function scaled_init_method_normal.<locals>.init_ at 0x7f14027dc3a0>, init_method_std=0.014, apply_query_key_layer_scaling=False, attention_softmax_in_fp32=True, bias_activation_fusion=False, masked_softmax_fusion=False, persist_layer_norm=True, memory_efficient_layer_norm=False, bias_dropout_fusion=False, apply_rope_fusion=False, recompute_granularity=None, recompute_method=None, recompute_num_layers=None, distribute_saved_activations=False, fp8=None, fp8_margin=0, fp8_interval=1, fp8_amax_history_len=1, fp8_amax_compute_algo='most_recent', fp8_wgrad=True, fp8_dot_product_attention=False, fp8_multi_head_attention=False, tp_only_amax_red=False, moe_router_load_balancing_type='aux_loss', moe_router_topk=2, moe_router_pre_softmax=False, moe_grouped_gemm=False, moe_aux_loss_coeff=0.0, moe_z_loss_coeff=None, moe_input_jitter_eps=None, moe_token_dropping=False, moe_token_dispatcher_type='allgather', moe_per_layer_logging=False, moe_expert_capacity_factor=None, moe_pad_expert_input_to_capacity=False, moe_token_drop_policy='probs', moe_layer_recompute=False, clone_scatter_output_in_embedding=True, disable_parameter_transpose_cache=False, enable_cuda_graph=False, external_cuda_graph=False, config_logger_dir='')
pretrain configTransformerConfig(tensor_model_parallel_size=4, pipeline_model_parallel_size=5, virtual_pipeline_model_parallel_size=None, sequence_parallel=False, context_parallel_size=1, expert_model_parallel_size=1, moe_extended_tp=False, perform_initialization=True, use_cpu_initialization=None, fp16=False, bf16=False, params_dtype=torch.float32, timers=None, finalize_model_grads_func=None, grad_scale_func=None, no_sync_func=None, grad_sync_func=None, param_sync_func=None, deterministic_mode=False, enable_autocast=False, autocast_dtype=torch.float32, num_microbatches_with_partial_activation_checkpoints=None, gradient_accumulation_fusion=True, async_tensor_model_parallel_allreduce=True, use_te_rng_tracker=False, tp_comm_overlap=False, tp_comm_bulk_wgrad=True, tp_comm_bulk_dgrad=True, tp_comm_overlap_ag=True, tp_comm_overlap_rs=True, tp_comm_overlap_rs_dgrad=False, tp_comm_split_ag=True, tp_comm_atomic_ag=False, tp_comm_split_rs=True, tp_comm_atomic_rs=False, cross_entropy_loss_fusion=False, tp_comm_overlap_disable_qkv=False, tp_comm_overlap_disable_fc1=False, pipeline_dtype=torch.float32, variable_seq_lengths=False, overlap_p2p_comm=False, batch_p2p_comm=True, batch_p2p_sync=True, use_ring_exchange_p2p=False, deallocate_pipeline_outputs=True, defer_embedding_wgrad_compute=False, wgrad_deferral_limit=0, pipeline_model_parallel_split_rank=None, cpu_offloading=False, cpu_offloading_num_layers=0, _cpu_offloading_context=None, cpu_offloading_activations=True, cpu_offloading_weights=True, barrier_with_L1_time=True, num_layers=32, first_pipeline_num_layers=None, last_pipeline_num_layers=None, hidden_size=4096, num_attention_heads=32, num_query_groups=8, ffn_hidden_size=14336, kv_channels=128, hidden_dropout=0.0, attention_dropout=0.0, fp32_residual_connection=False, apply_residual_connection_post_layernorm=False, layernorm_epsilon=1e-05, layernorm_zero_centered_gamma=False, add_bias_linear=False, add_qkv_bias=False, gated_linear_unit=True, activation_func=<function silu at 0x7fc94d0155a0>, activation_func_fp8_input_store=False, num_moe_experts=None, rotary_interleaved=False, window_size=None, normalization='RMSNorm', qk_layernorm=False, test_mode=False, calculate_per_token_loss=True, init_method=<function init_method_normal.<locals>.init_ at 0x7fc89cd5d6c0>, output_layer_init_method=<function scaled_init_method_normal.<locals>.init_ at 0x7fc89cd5c3a0>, init_method_std=0.014, apply_query_key_layer_scaling=False, attention_softmax_in_fp32=True, bias_activation_fusion=False, masked_softmax_fusion=False, persist_layer_norm=True, memory_efficient_layer_norm=False, bias_dropout_fusion=False, apply_rope_fusion=False, recompute_granularity=None, recompute_method=None, recompute_num_layers=None, distribute_saved_activations=False, fp8=None, fp8_margin=0, fp8_interval=1, fp8_amax_history_len=1, fp8_amax_compute_algo='most_recent', fp8_wgrad=True, fp8_dot_product_attention=False, fp8_multi_head_attention=False, tp_only_amax_red=False, moe_router_load_balancing_type='aux_loss', moe_router_topk=2, moe_router_pre_softmax=False, moe_grouped_gemm=False, moe_aux_loss_coeff=0.0, moe_z_loss_coeff=None, moe_input_jitter_eps=None, moe_token_dropping=False, moe_token_dispatcher_type='allgather', moe_per_layer_logging=False, moe_expert_capacity_factor=None, moe_pad_expert_input_to_capacity=False, moe_token_drop_policy='probs', moe_layer_recompute=False, clone_scatter_output_in_embedding=True, disable_parameter_transpose_cache=False, enable_cuda_graph=False, external_cuda_graph=False, config_logger_dir='')
[DistributedDataParallel(
  (module): LLaVAModel(
    (language_model): GPTModel(
      (rotary_pos_emb): RotaryEmbedding()
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-7): 8 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
  )
)]
[DistributedDataParallel(
  (module): LLaVAModel(
    (language_model): GPTModel(
      (rotary_pos_emb): RotaryEmbedding()
      (decoder): TransformerBlock(
        (layers): ModuleList(
          (0-7): 8 x TransformerLayer(
            (input_layernorm): IdentityOp()
            (self_attention): SelfAttention(
              (core_attention): TEDotProductAttention(
                (flash_attention): FlashAttention()
                (fused_attention): FusedAttention()
                (unfused_attention): UnfusedDotProductAttention(
                  (scale_mask_softmax): FusedScaleMaskSoftmax()
                  (attention_dropout): Dropout(p=0.0, inplace=False)
                )
              )
              (linear_proj): TERowParallelLinear()
              (linear_qkv): TELayerNormColumnParallelLinear()
              (q_layernorm): IdentityOp()
              (k_layernorm): IdentityOp()
            )
            (pre_cross_attn_layernorm): IdentityOp()
            (cross_attention): IdentityOp()
            (cross_attn_bda): IdentityFuncOp()
            (pre_mlp_layernorm): IdentityOp()
            (mlp): MLP(
              (linear_fc1): TELayerNormColumnParallelLinear()
              (linear_fc2): TERowParallelLinear()
            )
          )
        )
      )
    )
  )
)]
pretrain configTransformerConfig(tensor_model_parallel_size=4, pipeline_model_parallel_size=5, virtual_pipeline_model_parallel_size=None, sequence_parallel=False, context_parallel_size=1, expert_model_parallel_size=1, moe_extended_tp=False, perform_initialization=True, use_cpu_initialization=None, fp16=False, bf16=False, params_dtype=torch.float32, timers=None, finalize_model_grads_func=None, grad_scale_func=None, no_sync_func=None, grad_sync_func=None, param_sync_func=None, deterministic_mode=False, enable_autocast=False, autocast_dtype=torch.float32, num_microbatches_with_partial_activation_checkpoints=None, gradient_accumulation_fusion=True, async_tensor_model_parallel_allreduce=True, use_te_rng_tracker=False, tp_comm_overlap=False, tp_comm_bulk_wgrad=True, tp_comm_bulk_dgrad=True, tp_comm_overlap_ag=True, tp_comm_overlap_rs=True, tp_comm_overlap_rs_dgrad=False, tp_comm_split_ag=True, tp_comm_atomic_ag=False, tp_comm_split_rs=True, tp_comm_atomic_rs=False, cross_entropy_loss_fusion=False, tp_comm_overlap_disable_qkv=False, tp_comm_overlap_disable_fc1=False, pipeline_dtype=torch.float32, variable_seq_lengths=False, overlap_p2p_comm=False, batch_p2p_comm=True, batch_p2p_sync=True, use_ring_exchange_p2p=False, deallocate_pipeline_outputs=True, defer_embedding_wgrad_compute=False, wgrad_deferral_limit=0, pipeline_model_parallel_split_rank=None, cpu_offloading=False, cpu_offloading_num_layers=0, _cpu_offloading_context=None, cpu_offloading_activations=True, cpu_offloading_weights=True, barrier_with_L1_time=True, num_layers=32, first_pipeline_num_layers=None, last_pipeline_num_layers=None, hidden_size=4096, num_attention_heads=32, num_query_groups=8, ffn_hidden_size=14336, kv_channels=128, hidden_dropout=0.0, attention_dropout=0.0, fp32_residual_connection=False, apply_residual_connection_post_layernorm=False, layernorm_epsilon=1e-05, layernorm_zero_centered_gamma=False, add_bias_linear=False, add_qkv_bias=False, gated_linear_unit=True, activation_func=<function silu at 0x7fcca82815a0>, activation_func_fp8_input_store=False, num_moe_experts=None, rotary_interleaved=False, window_size=None, normalization='RMSNorm', qk_layernorm=False, test_mode=False, calculate_per_token_loss=True, init_method=<function init_method_normal.<locals>.init_ at 0x7fcbe67d45e0>, output_layer_init_method=<function scaled_init_method_normal.<locals>.init_ at 0x7fcbe67d4430>, init_method_std=0.014, apply_query_key_layer_scaling=False, attention_softmax_in_fp32=True, bias_activation_fusion=False, masked_softmax_fusion=False, persist_layer_norm=True, memory_efficient_layer_norm=False, bias_dropout_fusion=False, apply_rope_fusion=False, recompute_granularity=None, recompute_method=None, recompute_num_layers=None, distribute_saved_activations=False, fp8=None, fp8_margin=0, fp8_interval=1, fp8_amax_history_len=1, fp8_amax_compute_algo='most_recent', fp8_wgrad=True, fp8_dot_product_attention=False, fp8_multi_head_attention=False, tp_only_amax_red=False, moe_router_load_balancing_type='aux_loss', moe_router_topk=2, moe_router_pre_softmax=False, moe_grouped_gemm=False, moe_aux_loss_coeff=0.0, moe_z_loss_coeff=None, moe_input_jitter_eps=None, moe_token_dropping=False, moe_token_dispatcher_type='allgather', moe_per_layer_logging=False, moe_expert_capacity_factor=None, moe_pad_expert_input_to_capacity=False, moe_token_drop_policy='probs', moe_layer_recompute=False, clone_scatter_output_in_embedding=True, disable_parameter_transpose_cache=False, enable_cuda_graph=False, external_cuda_graph=False, config_logger_dir='')
pretrain configTransformerConfig(tensor_model_parallel_size=4, pipeline_model_parallel_size=5, virtual_pipeline_model_parallel_size=None, sequence_parallel=False, context_parallel_size=1, expert_model_parallel_size=1, moe_extended_tp=False, perform_initialization=True, use_cpu_initialization=None, fp16=False, bf16=False, params_dtype=torch.float32, timers=None, finalize_model_grads_func=None, grad_scale_func=None, no_sync_func=None, grad_sync_func=None, param_sync_func=None, deterministic_mode=False, enable_autocast=False, autocast_dtype=torch.float32, num_microbatches_with_partial_activation_checkpoints=None, gradient_accumulation_fusion=True, async_tensor_model_parallel_allreduce=True, use_te_rng_tracker=False, tp_comm_overlap=False, tp_comm_bulk_wgrad=True, tp_comm_bulk_dgrad=True, tp_comm_overlap_ag=True, tp_comm_overlap_rs=True, tp_comm_overlap_rs_dgrad=False, tp_comm_split_ag=True, tp_comm_atomic_ag=False, tp_comm_split_rs=True, tp_comm_atomic_rs=False, cross_entropy_loss_fusion=False, tp_comm_overlap_disable_qkv=False, tp_comm_overlap_disable_fc1=False, pipeline_dtype=torch.float32, variable_seq_lengths=False, overlap_p2p_comm=False, batch_p2p_comm=True, batch_p2p_sync=True, use_ring_exchange_p2p=False, deallocate_pipeline_outputs=True, defer_embedding_wgrad_compute=False, wgrad_deferral_limit=0, pipeline_model_parallel_split_rank=None, cpu_offloading=False, cpu_offloading_num_layers=0, _cpu_offloading_context=None, cpu_offloading_activations=True, cpu_offloading_weights=True, barrier_with_L1_time=True, num_layers=32, first_pipeline_num_layers=None, last_pipeline_num_layers=None, hidden_size=4096, num_attention_heads=32, num_query_groups=8, ffn_hidden_size=14336, kv_channels=128, hidden_dropout=0.0, attention_dropout=0.0, fp32_residual_connection=False, apply_residual_connection_post_layernorm=False, layernorm_epsilon=1e-05, layernorm_zero_centered_gamma=False, add_bias_linear=False, add_qkv_bias=False, gated_linear_unit=True, activation_func=<function silu at 0x7f8c398215a0>, activation_func_fp8_input_store=False, num_moe_experts=None, rotary_interleaved=False, window_size=None, normalization='RMSNorm', qk_layernorm=False, test_mode=False, calculate_per_token_loss=True, init_method=<function init_method_normal.<locals>.init_ at 0x7f8b86100550>, output_layer_init_method=<function scaled_init_method_normal.<locals>.init_ at 0x7f8b861003a0>, init_method_std=0.014, apply_query_key_layer_scaling=False, attention_softmax_in_fp32=True, bias_activation_fusion=False, masked_softmax_fusion=False, persist_layer_norm=True, memory_efficient_layer_norm=False, bias_dropout_fusion=False, apply_rope_fusion=False, recompute_granularity=None, recompute_method=None, recompute_num_layers=None, distribute_saved_activations=False, fp8=None, fp8_margin=0, fp8_interval=1, fp8_amax_history_len=1, fp8_amax_compute_algo='most_recent', fp8_wgrad=True, fp8_dot_product_attention=False, fp8_multi_head_attention=False, tp_only_amax_red=False, moe_router_load_balancing_type='aux_loss', moe_router_topk=2, moe_router_pre_softmax=False, moe_grouped_gemm=False, moe_aux_loss_coeff=0.0, moe_z_loss_coeff=None, moe_input_jitter_eps=None, moe_token_dropping=False, moe_token_dispatcher_type='allgather', moe_per_layer_logging=False, moe_expert_capacity_factor=None, moe_pad_expert_input_to_capacity=False, moe_token_drop_policy='probs', moe_layer_recompute=False, clone_scatter_output_in_embedding=True, disable_parameter_transpose_cache=False, enable_cuda_graph=False, external_cuda_graph=False, config_logger_dir='')
rank=0, worker=0: shard_range=[pretrain-0.tar[0, 100), pretrain-0.tar[100, 200), pretrain-0.tar[200, 300), ...<2194>, pretrain-28.tar[9700, 9800), pretrain-28.tar[9800, 9900), pretrain-28.tar[9900, 10000)] sum(count)=220000
rank=0, worker=1: shard_range=[pretrain-29.tar[0, 100), pretrain-29.tar[100, 200), pretrain-29.tar[200, 300), ...<2194>, pretrain-48.tar[9700, 9800), pretrain-48.tar[9800, 9900), pretrain-48.tar[9900, 10000)] sum(count)=220000
rank=0, worker=0: shard_range=[pretrain-49.tar[0, 10000), pretrain-5.tar[0, 10000), pretrain-50.tar[0, 10000)] sum(count)=30000
rank=0, worker=1: shard_range=[pretrain-51.tar[0, 10000), pretrain-52.tar[0, 10000), pretrain-53.tar[0, 10000)] sum(count)=30000
schedules.py decoder_seq_length:1152
start layer:35
start layer:35
schedules.py decoder_seq_length:1152
start layer:35
schedules.py decoder_seq_length:1152start layer:35

start layer:35
start layer:35
c:[(1024, 2, 4096)]
c:[(1024, 2, 4096)]
schedules.py decoder_seq_length:1152
c:[(1024, 2, 4096)]start layer:35

start layer:35
c:[(1024, 2, 4096)]
receive input_tensor shapes:[tensor([[[ 0.1420, -0.6197, -0.4113,  ..., -0.2206, -0.5350,  0.2192],
         [ 0.2914, -0.0496, -0.3360,  ..., -0.5003, -0.1515,  0.1772]],

        [[ 0.1190, -0.6127, -0.4182,  ..., -0.2282, -0.5297,  0.2066],
         [ 0.2883, -0.0516, -0.3457,  ..., -0.4982, -0.1413,  0.1744]],

        [[ 0.0627, -0.3385, -0.0797,  ...,  0.0320, -0.4810,  0.5281],
         [-0.0299, -0.1033, -0.1056,  ..., -0.6335, -0.6673,  0.3046]],

        ...,

        [[ 0.0507, -0.2223, -0.0218,  ..., -0.7094, -0.6116,  0.0537],
         [ 0.0654, -0.1008, -0.0159,  ..., -0.6552, -0.3440,  0.3218]],

        [[ 0.0547, -0.2202, -0.0284,  ..., -0.7118, -0.6061,  0.0569],
         [ 0.0580, -0.1009, -0.0183,  ..., -0.6492, -0.3464,  0.3239]],

        [[ 0.0566, -0.2180, -0.0354,  ..., -0.7113, -0.6016,  0.0585],
         [ 0.0539, -0.1029, -0.0206,  ..., -0.6532, -0.3457,  0.3194]]],
       device='cuda:2', requires_grad=True)]
receive input_tensor shapes:[tensor([[[ 0.1420, -0.6197, -0.4113,  ..., -0.2206, -0.5350,  0.2192],
         [ 0.2914, -0.0496, -0.3360,  ..., -0.5003, -0.1515,  0.1772]],

        [[ 0.1190, -0.6127, -0.4182,  ..., -0.2282, -0.5297,  0.2066],
         [ 0.2883, -0.0516, -0.3457,  ..., -0.4982, -0.1413,  0.1744]],

        [[ 0.0627, -0.3385, -0.0797,  ...,  0.0320, -0.4810,  0.5281],
         [-0.0299, -0.1033, -0.1056,  ..., -0.6335, -0.6673,  0.3046]],

        ...,

        [[ 0.0507, -0.2223, -0.0218,  ..., -0.7094, -0.6116,  0.0537],
         [ 0.0654, -0.1008, -0.0159,  ..., -0.6552, -0.3440,  0.3218]],

        [[ 0.0547, -0.2202, -0.0284,  ..., -0.7118, -0.6061,  0.0569],
         [ 0.0580, -0.1009, -0.0183,  ..., -0.6492, -0.3464,  0.3239]],

        [[ 0.0566, -0.2180, -0.0354,  ..., -0.7113, -0.6016,  0.0585],
         [ 0.0539, -0.1029, -0.0206,  ..., -0.6532, -0.3457,  0.3194]]],
       device='cuda:0', requires_grad=True)]
receive input_tensor shapes:[tensor([[[ 0.1420, -0.6197, -0.4113,  ..., -0.2206, -0.5350,  0.2192],
         [ 0.2914, -0.0496, -0.3360,  ..., -0.5003, -0.1515,  0.1772]],

        [[ 0.1190, -0.6127, -0.4182,  ..., -0.2282, -0.5297,  0.2066],
         [ 0.2883, -0.0516, -0.3457,  ..., -0.4982, -0.1413,  0.1744]],

        [[ 0.0627, -0.3385, -0.0797,  ...,  0.0320, -0.4810,  0.5281],
         [-0.0299, -0.1033, -0.1056,  ..., -0.6335, -0.6673,  0.3046]],

        ...,

        [[ 0.0507, -0.2223, -0.0218,  ..., -0.7094, -0.6116,  0.0537],
         [ 0.0654, -0.1008, -0.0159,  ..., -0.6552, -0.3440,  0.3218]],

        [[ 0.0547, -0.2202, -0.0284,  ..., -0.7118, -0.6061,  0.0569],
         [ 0.0580, -0.1009, -0.0183,  ..., -0.6492, -0.3464,  0.3239]],

        [[ 0.0566, -0.2180, -0.0354,  ..., -0.7113, -0.6016,  0.0585],
         [ 0.0539, -0.1029, -0.0206,  ..., -0.6532, -0.3457,  0.3194]]],
       device='cuda:3', requires_grad=True)]
receive input_tensor shapes:[tensor([[[ 0.1420, -0.6197, -0.4113,  ..., -0.2206, -0.5350,  0.2192],
         [ 0.2914, -0.0496, -0.3360,  ..., -0.5003, -0.1515,  0.1772]],

        [[ 0.1190, -0.6127, -0.4182,  ..., -0.2282, -0.5297,  0.2066],
         [ 0.2883, -0.0516, -0.3457,  ..., -0.4982, -0.1413,  0.1744]],

        [[ 0.0627, -0.3385, -0.0797,  ...,  0.0320, -0.4810,  0.5281],
         [-0.0299, -0.1033, -0.1056,  ..., -0.6335, -0.6673,  0.3046]],

        ...,

        [[ 0.0507, -0.2223, -0.0218,  ..., -0.7094, -0.6116,  0.0537],
         [ 0.0654, -0.1008, -0.0159,  ..., -0.6552, -0.3440,  0.3218]],

        [[ 0.0547, -0.2202, -0.0284,  ..., -0.7118, -0.6061,  0.0569],
         [ 0.0580, -0.1009, -0.0183,  ..., -0.6492, -0.3464,  0.3239]],

        [[ 0.0566, -0.2180, -0.0354,  ..., -0.7113, -0.6016,  0.0585],
         [ 0.0539, -0.1029, -0.0206,  ..., -0.6532, -0.3457,  0.3194]]],
       device='cuda:1', requires_grad=True)]
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
self.input tensor size:torch.Size([1024, 2, 4096])get batch end! position_ids:torch.Size([2, 576])

TransformerBlock hidden states size:torch.Size([1024, 2, 4096])get batch end! images size:torch.Size([2, 3, 336, 336])

get batch end! num_image_tiles:torch.Size([2])
self.input tensor size:torch.Size([1024, 2, 4096])
TransformerBlock hidden states size:torch.Size([1024, 2, 4096])
get batch end! tokens size:torch.Size([2, 576])get batch end! tokens size:torch.Size([2, 576])

get batch end! labels size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
get batch end! num_image_tiles:torch.Size([2])
self.input tensor size:torch.Size([1024, 2, 4096])
TransformerBlock hidden states size:torch.Size([1024, 2, 4096])
self.input tensor size:torch.Size([1024, 2, 4096])
TransformerBlock hidden states size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
c:[(1024, 2, 4096)]
c:[(1024, 2, 4096)]
c:[(1024, 2, 4096)]
c:[(1024, 2, 4096)]
receive input_tensor shapes:[tensor([[[ 0.0251, -0.3193,  0.4237,  ..., -0.7499, -0.1235,  0.3479],
         [-0.0706,  0.5050, -0.1071,  ..., -0.0668, -0.0660,  0.1995]],

        [[ 0.1537, -0.4781,  0.4551,  ..., -0.5786,  0.1072,  0.3076],
         [ 0.0688,  0.5374, -0.3685,  ..., -0.0079, -0.1400,  0.1798]],

        [[ 0.0851,  0.1731,  0.3035,  ..., -0.4865,  0.0802,  0.1500],
         [-0.2998,  0.8308, -0.3265,  ..., -0.1944, -0.4897,  0.2028]],

        ...,

        [[-0.6706,  0.4090, -0.3937,  ...,  0.1439,  0.3683,  0.6128],
         [ 0.1093,  0.4858, -0.2933,  ...,  0.2701,  0.3026,  0.5390]],

        [[-0.6729,  0.4061, -0.3859,  ...,  0.1487,  0.3726,  0.6195],
         [ 0.1137,  0.4929, -0.3053,  ...,  0.2773,  0.3013,  0.5254]],

        [[-0.6707,  0.4053, -0.3745,  ...,  0.1447,  0.3795,  0.6229],
         [ 0.1153,  0.4992, -0.3089,  ...,  0.2828,  0.2953,  0.5155]]],
       device='cuda:2', requires_grad=True)]
receive input_tensor shapes:[tensor([[[ 0.0251, -0.3193,  0.4237,  ..., -0.7499, -0.1235,  0.3479],
         [-0.0706,  0.5050, -0.1071,  ..., -0.0668, -0.0660,  0.1995]],

        [[ 0.1537, -0.4781,  0.4551,  ..., -0.5786,  0.1072,  0.3076],
         [ 0.0688,  0.5374, -0.3685,  ..., -0.0079, -0.1400,  0.1798]],

        [[ 0.0851,  0.1731,  0.3035,  ..., -0.4865,  0.0802,  0.1500],
         [-0.2998,  0.8308, -0.3265,  ..., -0.1944, -0.4897,  0.2028]],

        ...,

        [[-0.6706,  0.4090, -0.3937,  ...,  0.1439,  0.3683,  0.6128],
         [ 0.1093,  0.4858, -0.2933,  ...,  0.2701,  0.3026,  0.5390]],

        [[-0.6729,  0.4061, -0.3859,  ...,  0.1487,  0.3726,  0.6195],
         [ 0.1137,  0.4929, -0.3053,  ...,  0.2773,  0.3013,  0.5254]],

        [[-0.6707,  0.4053, -0.3745,  ...,  0.1447,  0.3795,  0.6229],
         [ 0.1153,  0.4992, -0.3089,  ...,  0.2828,  0.2953,  0.5155]]],
       device='cuda:1', requires_grad=True)]
receive input_tensor shapes:[tensor([[[ 0.0251, -0.3193,  0.4237,  ..., -0.7499, -0.1235,  0.3479],
         [-0.0706,  0.5050, -0.1071,  ..., -0.0668, -0.0660,  0.1995]],

        [[ 0.1537, -0.4781,  0.4551,  ..., -0.5786,  0.1072,  0.3076],
         [ 0.0688,  0.5374, -0.3685,  ..., -0.0079, -0.1400,  0.1798]],

        [[ 0.0851,  0.1731,  0.3035,  ..., -0.4865,  0.0802,  0.1500],
         [-0.2998,  0.8308, -0.3265,  ..., -0.1944, -0.4897,  0.2028]],

        ...,

        [[-0.6706,  0.4090, -0.3937,  ...,  0.1439,  0.3683,  0.6128],
         [ 0.1093,  0.4858, -0.2933,  ...,  0.2701,  0.3026,  0.5390]],

        [[-0.6729,  0.4061, -0.3859,  ...,  0.1487,  0.3726,  0.6195],
         [ 0.1137,  0.4929, -0.3053,  ...,  0.2773,  0.3013,  0.5254]],

        [[-0.6707,  0.4053, -0.3745,  ...,  0.1447,  0.3795,  0.6229],
         [ 0.1153,  0.4992, -0.3089,  ...,  0.2828,  0.2953,  0.5155]]],
       device='cuda:0', requires_grad=True)]
receive input_tensor shapes:[tensor([[[ 0.0251, -0.3193,  0.4237,  ..., -0.7499, -0.1235,  0.3479],
         [-0.0706,  0.5050, -0.1071,  ..., -0.0668, -0.0660,  0.1995]],

        [[ 0.1537, -0.4781,  0.4551,  ..., -0.5786,  0.1072,  0.3076],
         [ 0.0688,  0.5374, -0.3685,  ..., -0.0079, -0.1400,  0.1798]],

        [[ 0.0851,  0.1731,  0.3035,  ..., -0.4865,  0.0802,  0.1500],
         [-0.2998,  0.8308, -0.3265,  ..., -0.1944, -0.4897,  0.2028]],

        ...,

        [[-0.6706,  0.4090, -0.3937,  ...,  0.1439,  0.3683,  0.6128],
         [ 0.1093,  0.4858, -0.2933,  ...,  0.2701,  0.3026,  0.5390]],

        [[-0.6729,  0.4061, -0.3859,  ...,  0.1487,  0.3726,  0.6195],
         [ 0.1137,  0.4929, -0.3053,  ...,  0.2773,  0.3013,  0.5254]],

        [[-0.6707,  0.4053, -0.3745,  ...,  0.1447,  0.3795,  0.6229],
         [ 0.1153,  0.4992, -0.3089,  ...,  0.2828,  0.2953,  0.5155]]],
       device='cuda:3', requires_grad=True)]
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
self.input tensor size:torch.Size([1024, 2, 4096])get batch end! loss_mask size:torch.Size([2, 576])

TransformerBlock hidden states size:torch.Size([1024, 2, 4096])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
self.input tensor size:torch.Size([1024, 2, 4096])
TransformerBlock hidden states size:torch.Size([1024, 2, 4096])
get batch end! tokens size:torch.Size([2, 576])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
self.input tensor size:torch.Size([1024, 2, 4096])
TransformerBlock hidden states size:torch.Size([1024, 2, 4096])
self.input tensor size:torch.Size([1024, 2, 4096])
TransformerBlock hidden states size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
get batch end! tokens size:torch.Size([2, 576])get batch end! tokens size:torch.Size([2, 576])

get batch end! tokens size:torch.Size([2, 576])get batch end! labels size:torch.Size([2, 576])get batch end! labels size:torch.Size([2, 576])


get batch end! loss_mask size:torch.Size([2, 576])get batch end! loss_mask size:torch.Size([2, 576])

get batch end! labels size:torch.Size([2, 576])get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])

get batch end! loss_mask size:torch.Size([2, 576])get batch end! position_ids:torch.Size([2, 576])get batch end! position_ids:torch.Size([2, 576])


get batch end! attention_mask:torch.Size([1, 1, 576, 576])get batch end! images size:torch.Size([2, 3, 336, 336])get batch end! images size:torch.Size([2, 3, 336, 336])get batch end! tokens size:torch.Size([2, 576])


get batch end! position_ids:torch.Size([2, 576])get batch end! num_image_tiles:torch.Size([2])get batch end! num_image_tiles:torch.Size([2])



get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
get batch end! labels size:torch.Size([2, 576])
get batch end! loss_mask size:torch.Size([2, 576])
get batch end! attention_mask:torch.Size([1, 1, 576, 576])
get batch end! position_ids:torch.Size([2, 576])
get batch end! images size:torch.Size([2, 3, 336, 336])
get batch end! num_image_tiles:torch.Size([2])
self.input tensor size:torch.Size([1024, 2, 4096])self.input tensor size:torch.Size([1024, 2, 4096])
self.input tensor size:torch.Size([1024, 2, 4096])

TransformerBlock hidden states size:torch.Size([1024, 2, 4096])
TransformerBlock hidden states size:torch.Size([1024, 2, 4096])TransformerBlock hidden states size:torch.Size([1024, 2, 4096])

self.input tensor size:torch.Size([1024, 2, 4096])
TransformerBlock hidden states size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
1111 output_tensor:torch.Size([1024, 2, 4096])
2222 output_tensor:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
1111 output_tensor:torch.Size([1024, 2, 4096])
2222 output_tensor:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
hidden state size:torch.Size([1024, 2, 4096])
language model end! output size:torch.Size([1024, 2, 4096])
1111 output_tensor:torch.Size([1024, 2, 4096])
2222 output_tensor:torch.Size([1024, 2, 4096])
1111 output_tensor:torch.Size([1024, 2, 4096])
2222 output_tensor:torch.Size([1024, 2, 4096])
----------output_tensor_grad:torch.Size([1024, 2, 4096])
3333 output_tensor:torch.Size([1024, 2, 4096])
----------output_tensor_grad:torch.Size([1024, 2, 4096])
3333 output_tensor:torch.Size([1024, 2, 4096])
----------output_tensor_grad:torch.Size([1024, 2, 4096])----------output_tensor_grad:torch.Size([1024, 2, 4096])

3333 output_tensor:torch.Size([1024, 2, 4096])
3333 output_tensor:torch.Size([1024, 2, 4096])
output tensors:[[tensor([[[ 0.0321, -0.9987, -1.0967,  ..., -0.2764, -0.6077,  0.0410],
         [ 0.2034, -0.2262, -0.9647,  ..., -0.2541,  0.3705, -0.0089]],

        [[ 0.0124, -0.9836, -1.0888,  ..., -0.2875, -0.5955,  0.0259],
         [ 0.2049, -0.2384, -0.9766,  ..., -0.2557,  0.3836, -0.0191]],

        [[-0.1011, -0.6915, -0.7991,  ...,  0.0332, -0.9914,  0.4595],
         [-0.0627, -0.3276, -0.8608,  ..., -0.4428,  0.0662, -0.0018]],

        ...,

        [[ 0.1137, -0.2711, -0.5314,  ..., -0.9065, -1.3548, -0.2442],
         [ 0.1772, -0.0957, -0.6412,  ..., -0.6761, -1.1624,  0.0360]],

        [[ 0.1175, -0.2655, -0.5434,  ..., -0.9047, -1.3540, -0.2400],
         [ 0.1769, -0.1041, -0.6391,  ..., -0.6735, -1.1701,  0.0562]],

        [[ 0.1222, -0.2662, -0.5497,  ..., -0.8991, -1.3545, -0.2365],
         [ 0.1732, -0.1124, -0.6468,  ..., -0.6813, -1.1727,  0.0541]]],
       device='cuda:2', grad_fn=<AddBackward0>)], [tensor([[[-0.1703,  0.3565, -0.0172,  ..., -1.5088,  0.2470,  0.3441],
         [ 0.0142,  1.0511, -0.7092,  ..., -0.0357, -0.0434,  0.3922]],

        [[ 0.4370, -0.1298,  0.1368,  ..., -1.0662,  0.1738,  0.2357],
         [ 0.4307,  0.9812, -1.0428,  ..., -0.3164, -0.1414,  0.5866]],

        [[-0.0133,  0.6746,  0.1805,  ..., -0.5213,  0.4108,  0.0217],
         [-0.6062,  1.4078, -0.6288,  ..., -0.2956, -0.7745,  0.1458]],

        ...,

        [[-0.5313,  0.8633, -0.8394,  ..., -0.0539,  0.6668,  0.5687],
         [ 0.1939,  0.3945, -0.3798,  ...,  0.2049,  0.4173,  0.0532]],

        [[-0.5271,  0.8622, -0.8365,  ..., -0.0408,  0.6788,  0.5652],
         [ 0.2207,  0.3852, -0.3979,  ...,  0.2046,  0.4297,  0.0383]],

        [[-0.5186,  0.8619, -0.8324,  ..., -0.0358,  0.6847,  0.5606],
         [ 0.2277,  0.3694, -0.3987,  ...,  0.2002,  0.4287,  0.0280]]],
       device='cuda:2', grad_fn=<AddBackward0>)], [tensor([[[ 0.1926, -0.7489, -1.2147,  ..., -0.2318, -0.7215,  0.2725],
         [ 0.1921,  0.4119, -0.9989,  ..., -0.1409, -0.3028,  0.6514]],

        [[ 0.2436, -0.6652, -1.1557,  ..., -0.2757, -0.6233,  0.2050],
         [-0.0338,  0.4141, -0.8721,  ...,  0.1955, -0.1144,  0.2807]],

        [[ 0.0518, -0.2181, -0.6445,  ...,  0.2788, -1.1977,  0.8733],
         [-0.1307,  0.0407,  0.1233,  ..., -0.5528, -0.2045,  0.4889]],

        ...,

        [[-0.0280, -0.2033, -0.4709,  ..., -0.8720, -1.3999, -0.1158],
         [ 0.4249, -0.0314, -1.0626,  ..., -0.2229,  0.1196,  0.4364]],

        [[-0.0108, -0.2005, -0.4836,  ..., -0.8782, -1.4087, -0.1067],
         [ 0.4152, -0.0346, -1.0340,  ..., -0.2237,  0.0881,  0.4257]],

        [[ 0.0143, -0.1969, -0.4905,  ..., -0.8796, -1.4184, -0.1020],
         [ 0.4058, -0.0175, -1.0115,  ..., -0.2363,  0.0560,  0.4443]]],
       device='cuda:2', grad_fn=<AddBackward0>)]]
4444 output_tensor:torch.Size([1024, 2, 4096])
torch.autograd.backward
custom_backward output_tensor[0]:torch.Size([1024, 2, 4096])
output_tensor_grad[0]:torch.Size([1024, 2, 4096])
output tensors:[[tensor([[[ 0.0321, -0.9987, -1.0967,  ..., -0.2764, -0.6077,  0.0410],
         [ 0.2034, -0.2262, -0.9647,  ..., -0.2541,  0.3705, -0.0089]],

        [[ 0.0124, -0.9836, -1.0888,  ..., -0.2875, -0.5955,  0.0259],
         [ 0.2049, -0.2384, -0.9766,  ..., -0.2557,  0.3836, -0.0191]],

        [[-0.1011, -0.6915, -0.7991,  ...,  0.0332, -0.9914,  0.4595],
         [-0.0627, -0.3276, -0.8608,  ..., -0.4428,  0.0662, -0.0018]],

        ...,

        [[ 0.1137, -0.2711, -0.5314,  ..., -0.9065, -1.3548, -0.2442],
         [ 0.1772, -0.0957, -0.6412,  ..., -0.6761, -1.1624,  0.0360]],

        [[ 0.1175, -0.2655, -0.5434,  ..., -0.9047, -1.3540, -0.2400],
         [ 0.1769, -0.1041, -0.6391,  ..., -0.6735, -1.1701,  0.0562]],

        [[ 0.1222, -0.2662, -0.5497,  ..., -0.8991, -1.3545, -0.2365],
         [ 0.1732, -0.1124, -0.6468,  ..., -0.6813, -1.1727,  0.0541]]],
       device='cuda:0', grad_fn=<AddBackward0>)], [tensor([[[-0.1703,  0.3565, -0.0172,  ..., -1.5088,  0.2470,  0.3441],
         [ 0.0142,  1.0511, -0.7092,  ..., -0.0357, -0.0434,  0.3922]],

        [[ 0.4370, -0.1298,  0.1368,  ..., -1.0662,  0.1738,  0.2357],
         [ 0.4307,  0.9812, -1.0428,  ..., -0.3164, -0.1414,  0.5866]],

        [[-0.0133,  0.6746,  0.1805,  ..., -0.5213,  0.4108,  0.0217],
         [-0.6062,  1.4078, -0.6288,  ..., -0.2956, -0.7745,  0.1458]],

        ...,

        [[-0.5313,  0.8633, -0.8394,  ..., -0.0539,  0.6668,  0.5687],
         [ 0.1939,  0.3945, -0.3798,  ...,  0.2049,  0.4173,  0.0532]],

        [[-0.5271,  0.8622, -0.8365,  ..., -0.0408,  0.6788,  0.5652],
         [ 0.2207,  0.3852, -0.3979,  ...,  0.2046,  0.4297,  0.0383]],

        [[-0.5186,  0.8619, -0.8324,  ..., -0.0358,  0.6847,  0.5606],
         [ 0.2277,  0.3694, -0.3987,  ...,  0.2002,  0.4287,  0.0280]]],
       device='cuda:0', grad_fn=<AddBackward0>)], [tensor([[[ 0.1926, -0.7489, -1.2147,  ..., -0.2318, -0.7215,  0.2725],
         [ 0.1921,  0.4119, -0.9989,  ..., -0.1409, -0.3028,  0.6514]],

        [[ 0.2436, -0.6652, -1.1557,  ..., -0.2757, -0.6233,  0.2050],
         [-0.0338,  0.4141, -0.8721,  ...,  0.1955, -0.1144,  0.2807]],

        [[ 0.0518, -0.2181, -0.6445,  ...,  0.2788, -1.1977,  0.8733],
         [-0.1307,  0.0407,  0.1233,  ..., -0.5528, -0.2045,  0.4889]],

        ...,

        [[-0.0280, -0.2033, -0.4709,  ..., -0.8720, -1.3999, -0.1158],
         [ 0.4249, -0.0314, -1.0626,  ..., -0.2229,  0.1196,  0.4364]],

        [[-0.0108, -0.2005, -0.4836,  ..., -0.8782, -1.4087, -0.1067],
         [ 0.4152, -0.0346, -1.0340,  ..., -0.2237,  0.0881,  0.4257]],

        [[ 0.0143, -0.1969, -0.4905,  ..., -0.8796, -1.4184, -0.1020],
         [ 0.4058, -0.0175, -1.0115,  ..., -0.2363,  0.0560,  0.4443]]],
       device='cuda:0', grad_fn=<AddBackward0>)]]
4444 output_tensor:torch.Size([1024, 2, 4096])
output tensors:[[tensor([[[ 0.0321, -0.9987, -1.0967,  ..., -0.2764, -0.6077,  0.0410],
         [ 0.2034, -0.2262, -0.9647,  ..., -0.2541,  0.3705, -0.0089]],

        [[ 0.0124, -0.9836, -1.0888,  ..., -0.2875, -0.5955,  0.0259],
         [ 0.2049, -0.2384, -0.9766,  ..., -0.2557,  0.3836, -0.0191]],

        [[-0.1011, -0.6915, -0.7991,  ...,  0.0332, -0.9914,  0.4595],
         [-0.0627, -0.3276, -0.8608,  ..., -0.4428,  0.0662, -0.0018]],

        ...,

        [[ 0.1137, -0.2711, -0.5314,  ..., -0.9065, -1.3548, -0.2442],
         [ 0.1772, -0.0957, -0.6412,  ..., -0.6761, -1.1624,  0.0360]],

        [[ 0.1175, -0.2655, -0.5434,  ..., -0.9047, -1.3540, -0.2400],
         [ 0.1769, -0.1041, -0.6391,  ..., -0.6735, -1.1701,  0.0562]],

        [[ 0.1222, -0.2662, -0.5497,  ..., -0.8991, -1.3545, -0.2365],
         [ 0.1732, -0.1124, -0.6468,  ..., -0.6813, -1.1727,  0.0541]]],
       device='cuda:1', grad_fn=<AddBackward0>)], [tensor([[[-0.1703,  0.3565, -0.0172,  ..., -1.5088,  0.2470,  0.3441],
         [ 0.0142,  1.0511, -0.7092,  ..., -0.0357, -0.0434,  0.3922]],

        [[ 0.4370, -0.1298,  0.1368,  ..., -1.0662,  0.1738,  0.2357],
         [ 0.4307,  0.9812, -1.0428,  ..., -0.3164, -0.1414,  0.5866]],

        [[-0.0133,  0.6746,  0.1805,  ..., -0.5213,  0.4108,  0.0217],
         [-0.6062,  1.4078, -0.6288,  ..., -0.2956, -0.7745,  0.1458]],

        ...,

        [[-0.5313,  0.8633, -0.8394,  ..., -0.0539,  0.6668,  0.5687],
         [ 0.1939,  0.3945, -0.3798,  ...,  0.2049,  0.4173,  0.0532]],

        [[-0.5271,  0.8622, -0.8365,  ..., -0.0408,  0.6788,  0.5652],
         [ 0.2207,  0.3852, -0.3979,  ...,  0.2046,  0.4297,  0.0383]],

        [[-0.5186,  0.8619, -0.8324,  ..., -0.0358,  0.6847,  0.5606],
         [ 0.2277,  0.3694, -0.3987,  ...,  0.2002,  0.4287,  0.0280]]],
       device='cuda:1', grad_fn=<AddBackward0>)], [tensor([[[ 0.1926, -0.7489, -1.2147,  ..., -0.2318, -0.7215,  0.2725],
         [ 0.1921,  0.4119, -0.9989,  ..., -0.1409, -0.3028,  0.6514]],

        [[ 0.2436, -0.6652, -1.1557,  ..., -0.2757, -0.6233,  0.2050],
         [-0.0338,  0.4141, -0.8721,  ...,  0.1955, -0.1144,  0.2807]],

        [[ 0.0518, -0.2181, -0.6445,  ...,  0.2788, -1.1977,  0.8733],
         [-0.1307,  0.0407,  0.1233,  ..., -0.5528, -0.2045,  0.4889]],

        ...,

        [[-0.0280, -0.2033, -0.4709,  ..., -0.8720, -1.3999, -0.1158],
         [ 0.4249, -0.0314, -1.0626,  ..., -0.2229,  0.1196,  0.4364]],

        [[-0.0108, -0.2005, -0.4836,  ..., -0.8782, -1.4087, -0.1067],
         [ 0.4152, -0.0346, -1.0340,  ..., -0.2237,  0.0881,  0.4257]],

        [[ 0.0143, -0.1969, -0.4905,  ..., -0.8796, -1.4184, -0.1020],
         [ 0.4058, -0.0175, -1.0115,  ..., -0.2363,  0.0560,  0.4443]]],
       device='cuda:1', grad_fn=<AddBackward0>)]]
torch.autograd.backward4444 output_tensor:torch.Size([1024, 2, 4096])

custom_backward output_tensor[0]:torch.Size([1024, 2, 4096])
output_tensor_grad[0]:torch.Size([1024, 2, 4096])
torch.autograd.backward
custom_backward output_tensor[0]:torch.Size([1024, 2, 4096])
output_tensor_grad[0]:torch.Size([1024, 2, 4096])
output tensors:[[tensor([[[ 0.0321, -0.9987, -1.0967,  ..., -0.2764, -0.6077,  0.0410],
         [ 0.2034, -0.2262, -0.9647,  ..., -0.2541,  0.3705, -0.0089]],

        [[ 0.0124, -0.9836, -1.0888,  ..., -0.2875, -0.5955,  0.0259],
         [ 0.2049, -0.2384, -0.9766,  ..., -0.2557,  0.3836, -0.0191]],

        [[-0.1011, -0.6915, -0.7991,  ...,  0.0332, -0.9914,  0.4595],
         [-0.0627, -0.3276, -0.8608,  ..., -0.4428,  0.0662, -0.0018]],

        ...,

        [[ 0.1137, -0.2711, -0.5314,  ..., -0.9065, -1.3548, -0.2442],
         [ 0.1772, -0.0957, -0.6412,  ..., -0.6761, -1.1624,  0.0360]],

        [[ 0.1175, -0.2655, -0.5434,  ..., -0.9047, -1.3540, -0.2400],
         [ 0.1769, -0.1041, -0.6391,  ..., -0.6735, -1.1701,  0.0562]],

        [[ 0.1222, -0.2662, -0.5497,  ..., -0.8991, -1.3545, -0.2365],
         [ 0.1732, -0.1124, -0.6468,  ..., -0.6813, -1.1727,  0.0541]]],
       device='cuda:3', grad_fn=<AddBackward0>)], [tensor([[[-0.1703,  0.3565, -0.0172,  ..., -1.5088,  0.2470,  0.3441],
         [ 0.0142,  1.0511, -0.7092,  ..., -0.0357, -0.0434,  0.3922]],

        [[ 0.4370, -0.1298,  0.1368,  ..., -1.0662,  0.1738,  0.2357],
         [ 0.4307,  0.9812, -1.0428,  ..., -0.3164, -0.1414,  0.5866]],

        [[-0.0133,  0.6746,  0.1805,  ..., -0.5213,  0.4108,  0.0217],
         [-0.6062,  1.4078, -0.6288,  ..., -0.2956, -0.7745,  0.1458]],

        ...,

        [[-0.5313,  0.8633, -0.8394,  ..., -0.0539,  0.6668,  0.5687],
         [ 0.1939,  0.3945, -0.3798,  ...,  0.2049,  0.4173,  0.0532]],

        [[-0.5271,  0.8622, -0.8365,  ..., -0.0408,  0.6788,  0.5652],
         [ 0.2207,  0.3852, -0.3979,  ...,  0.2046,  0.4297,  0.0383]],

        [[-0.5186,  0.8619, -0.8324,  ..., -0.0358,  0.6847,  0.5606],
         [ 0.2277,  0.3694, -0.3987,  ...,  0.2002,  0.4287,  0.0280]]],
       device='cuda:3', grad_fn=<AddBackward0>)], [tensor([[[ 0.1926, -0.7489, -1.2147,  ..., -0.2318, -0.7215,  0.2725],
         [ 0.1921,  0.4119, -0.9989,  ..., -0.1409, -0.3028,  0.6514]],

        [[ 0.2436, -0.6652, -1.1557,  ..., -0.2757, -0.6233,  0.2050],
         [-0.0338,  0.4141, -0.8721,  ...,  0.1955, -0.1144,  0.2807]],

        [[ 0.0518, -0.2181, -0.6445,  ...,  0.2788, -1.1977,  0.8733],
         [-0.1307,  0.0407,  0.1233,  ..., -0.5528, -0.2045,  0.4889]],

        ...,

        [[-0.0280, -0.2033, -0.4709,  ..., -0.8720, -1.3999, -0.1158],
         [ 0.4249, -0.0314, -1.0626,  ..., -0.2229,  0.1196,  0.4364]],

        [[-0.0108, -0.2005, -0.4836,  ..., -0.8782, -1.4087, -0.1067],
         [ 0.4152, -0.0346, -1.0340,  ..., -0.2237,  0.0881,  0.4257]],

        [[ 0.0143, -0.1969, -0.4905,  ..., -0.8796, -1.4184, -0.1020],
         [ 0.4058, -0.0175, -1.0115,  ..., -0.2363,  0.0560,  0.4443]]],
       device='cuda:3', grad_fn=<AddBackward0>)]]
4444 output_tensor:torch.Size([1024, 2, 4096])
torch.autograd.backward
custom_backward output_tensor[0]:torch.Size([1024, 2, 4096])
output_tensor_grad[0]:torch.Size([1024, 2, 4096])
